
import sys  # <-- –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω—É–∂–µ–Ω –¥–ª—è sys.exit
import logging
from telegram import Update

import threading
from flask import Flask
import os

# üîê –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
logging.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")  # —ç—Ç–æ –±—É–¥–µ—Ç –≤—ã–≤–µ–¥–µ–Ω–æ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
ADMIN_CHAT_ID = 844673891  # –¢–≤–æ–π chat_id

if "RUNNING" in os.environ:
    logging.error("–ü–æ—Ö–æ–∂–µ, –±–æ—Ç —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç. –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å.")
    sys.exit(1)
os.environ["RUNNING"] = "true"

# ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# üìâ –û—Ç–∫–ª—é—á–∞–µ–º –ª–∏—à–Ω–∏–µ –ª–æ–≥–∏
logging.getLogger("httpx").setLevel(logging.WARNING)
logging.getLogger("asyncio").setLevel(logging.WARNING)

# üîë –ö–æ–Ω—Ñ–∏–≥–∏
TOKEN = "7604409638:AAGQPicknQYWdp5MPVJQzGy3rJwBVCsiwCE"
BALANCE_FILE = 'balances.json'
ADMIN_USERNAME = "hto_i_taki"  # –±–µ–∑ @

# ... –¥–∞–ª—å—à–µ —Ç–≤–æ–π –∫–æ–¥



CURRENCIES = {
    "–ø–µ—á–µ–Ω—å–∫–∏": "üç™",
    "—Ç—Ä–∏–ª–∏—Å—Ç–Ω–∏–∫–∏": "‚òòÔ∏è",
    "—á–µ—Ç—ã—Ä—ë—Ö–ª–∏—Å—Ç–Ω–∏–∫–∏": "üçÄ"
}
LOTTERY_FILE = 'lottery.json'
# === –í–∞—à –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π ===


# === –ó–∞–≥–ª—É—à–∫–∞ HTTP-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render ===
def start_dummy_server():
    app = Flask(__name__)

    @app.route('/')
    def index():
        return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!"

    port = int(os.environ.get("PORT", 10000))
    app.run(host="0.0.0.0", port=port)

# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
def start_bot():

    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, main_handler))
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()


LEVELS_PRICE_FILE = 'levels_price.json'

from telegram.ext import ApplicationBuilder, MessageHandler, CommandHandler, ContextTypes, filters


def load_levels_price():
    if not os.path.exists(LEVELS_PRICE_FILE):
        # –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞–¥–∏–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ —Ü–µ–Ω—ã (10 –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–≤–Ω—è —Å 2 –ø–æ 10)
        default_prices = {str(i): 10 for i in range(2, 11)}
        save_levels_price(default_prices)
        return default_prices
    with open(LEVELS_PRICE_FILE, 'r', encoding='utf-8') as f:
        return json.load(f)




def save_levels_price(data):
    with open(LEVELS_PRICE_FILE, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=2)
async def handle_level_up(update: Update, context: ContextTypes.DEFAULT_TYPE):
    username = get_username_from_message(update.message)
    balances = load_balances()
    user_balances = balances.get(username)

    if user_balances is None:
        await update.message.reply_text("–í —Ç–≤–æ—ë–º –º–µ—à–æ—á–∫–µ —Å –ü–µ—á–µ–Ω—å–∫–∞–º–∏ –∫–∞–∂–µ—Ç—Å—è –Ω–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ :(.")
        return

    current_level = user_balances.get("—É—Ä–æ–≤–µ–Ω—å", 1)
    if current_level >= 20:
        await update.message.reply_text("–¢—ã –∏ —Ç–∞–∫ —Å–ª–∏—à–∫–æ–º –∫—Ä—É—Ç!")
        return

    levels_price = load_levels_price()
    next_level = str(current_level + 1)
    price = levels_price.get(next_level)

    if price is None:
        await update.message.reply_text("–ù–µ –º–æ–≥—É –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ü–µ–Ω—É –ø–æ–≤—ã—à–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è.")
        return

    current_cookies = user_balances.get("–ø–µ—á–µ–Ω—å–∫–∏", 0)
    resources_str = user_balances.get("—Ä–µ—Å—É—Ä—Å—ã", "0/0/0/0/0/0/0")
    resources = list(map(int, resources_str.split('/')))

    gold_cookies_index = list(RESOURCES.keys()).index("—Ä")
    diamonds_index = list(RESOURCES.keys()).index("–∞")

    required_gold_cookies = 10 * (current_level - 9) if current_level >= 10 else 0
    required_diamonds = 10 * (current_level - 9) if current_level >= 10 else 0

    if current_level >= 10:
        if resources[gold_cookies_index] < required_gold_cookies:
            await update.message.reply_text(f"–î–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –¥–æ —É—Ä–æ–≤–Ω—è {next_level} –Ω—É–∂–Ω–æ {required_gold_cookies} –∑–æ–ª–æ—Ç—ã—Ö –ü–µ—á–µ–Ω–µ–∫, —Ç–∞–∫ —á—Ç–æ –∏–¥–∏ –∏ –Ω–∞–π–¥–∏ –∏—Ö –º–Ω–µ")
            return
        if resources[diamonds_index] < required_diamonds:
            await update.message.reply_text(f"–î–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –¥–æ —É—Ä–æ–≤–Ω—è {next_level} –Ω—É–∂–Ω–æ {required_diamonds} –∞–ª–º–∞–∑–æ–≤, —Ç–∞–∫ —á—Ç–æ –∏–¥–∏ –∏ –Ω–∞–π–¥–∏ –∏—Ö –º–Ω–µ")
            return

    if current_cookies < price:
        await update.message.reply_text(f"–î–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –¥–æ —É—Ä–æ–≤–Ω—è {next_level} –Ω—É–∂–Ω–æ {price} –ø–µ—á–µ–Ω–µ–∫, —Ç–∞–∫ —á—Ç–æ –∏–¥–∏ –∏ –Ω–∞–π–¥–∏ –∏—Ö –º–Ω–µ")
        return

    # –û—Ç–Ω–∏–º–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã –∏ –ø–æ–≤—ã—à–∞–µ–º —É—Ä–æ–≤–µ–Ω—å
    user_balances["–ø–µ—á–µ–Ω—å–∫–∏"] = current_cookies - price
    if current_level >= 10:
        resources[gold_cookies_index] -= required_gold_cookies
        resources[diamonds_index] -= required_diamonds
    user_balances["—É—Ä–æ–≤–µ–Ω—å"] = current_level + 1
    user_balances["—Ä–µ—Å—É—Ä—Å—ã"] = "/".join(map(str, resources))
    balances[username] = user_balances
    save_balances(balances)

    # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    log_transaction({
        "timestamp": datetime.datetime.now(datetime.UTC).isoformat(),
        "type": "–ø–æ–≤—ã—Å–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å",
        "username": username,
        "from_level": current_level,
        "to_level": current_level + 1,
        "cookies_spent": price,
        "gold_cookies_spent": required_gold_cookies if current_level >= 10 else 0,
        "diamonds_spent": required_diamonds if current_level >= 10 else 0
    })

    await update.message.reply_text(f"–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã –ø–æ–≤—ã—Å–∏–ª —É—Ä–æ–≤–µ–Ω—å –¥–æ {next_level} –∏ –ø–æ—Ç—Ä–∞—Ç–∏–ª {price} –ø–µ—á–µ–Ω–µ–∫. –î–∞–≤–∞–π –µ—â—ë –ø–æ–≤—ã—Å–∏–º !")
async def handle_update_prices(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.from_user.username != ADMIN_USERNAME:
        await update.message.reply_text("–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    text = update.message.text.strip()
    # –û–∂–∏–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç: "–Ω–æ–≤—ã–µ —Ü–µ–Ω—ã 10/10/10/10/10/10/10/10/10"
    parts = text.split(maxsplit=2)
    if len(parts) < 3:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –Ω–æ–≤—ã–µ —Ü–µ–Ω—ã 10/10/10/10/10/10/10/10/10")
        return

    prices_str = parts[2]
    prices_list = prices_str.split('/')
    if len(prices_list) != 9:
        await update.message.reply_text("–î–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–æ–≤–Ω–æ 9 —Ü–µ–Ω –¥–ª—è —É—Ä–æ–≤–Ω–µ–π 2-10.")
        return

    try:
        prices = [int(p) for p in prices_list]
    except ValueError:
        await update.message.reply_text("–í—Å–µ —Ü–µ–Ω—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ü–µ–ª—ã–º–∏ —á–∏—Å–ª–∞–º–∏.")
        return

    new_prices = {str(level): price for level, price in zip(range(2, 11), prices)}
    save_levels_price(new_prices)

    await update.message.reply_text(f"–¶–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {prices_str}")
lottery_lock = threading.Lock()

def save_lottery(data, allow_empty=False):
    if not isinstance(data, dict):
        raise ValueError("save_lottery: –¥–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–ª–æ–≤–∞—Ä—ë–º.")

    if not allow_empty and (
        len(data) == 0 or all(rng[1] < rng[0] for rng in data.values())
    ):
        logging.warning("–ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π —Å–ø–∏—Å–æ–∫ –±–∏–ª–µ—Ç–æ–≤. –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        return

    with lottery_lock:
        with open(LOTTERY_FILE, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2, separators=(',', ': '))



import threading



file_lock = threading.Lock()

def load_balances():
    with file_lock:
        if not os.path.exists(BALANCE_FILE):
            return {}
        with open(BALANCE_FILE, "r", encoding="utf-8") as f:
            return json.load(f)

import random
import datetime
from telegram import Message, Update

file_lock1 = threading.Lock()

def save_balances(data):
    file_lock1.acquire()
    try:
        with open(BALANCE_FILE, "w", encoding="utf-8") as f:
            json.dump(data, f, indent=2, ensure_ascii=False)
    finally:
        file_lock1.release()



def get_username_from_message(msg: Message) -> str:
    return f"@{msg.from_user.username}" if msg.from_user.username else f"id{msg.from_user.id}"

def get_currency_from_text(text: str) -> str:
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–∞–ª—é—Ç—É –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É –≤ —Ç–µ–∫—Å—Ç–µ, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ - –ø–µ—á–µ–Ω—å–∫–∏
    for curr in CURRENCIES.keys():
        if curr in text:
            return curr
    return "–ø–µ—á–µ–Ω—å–∫–∏"

async def handle_balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    username = get_username_from_message(update.message)
    balances = load_balances()
    user_balances = balances.get(username)

    if user_balances is None:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–æ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞ —Å —É—Ä–æ–≤–Ω–µ–º 1 –∏ –Ω—É–ª—ë–º –ø–æ –≤–∞–ª—é—Ç–∞–º
        user_balances = {"—É—Ä–æ–≤–µ–Ω—å": 1}
        user_balances.update({curr: 0 for curr in CURRENCIES})
        user_balances.update({"—Ä–µ—Å—É—Ä—Å—ã": "0/0/0/0/0/0/0"})  # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ—Å—É—Ä—Å—ã
        balances[username] = user_balances
        save_balances(balances)  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª

    level = user_balances.get("—É—Ä–æ–≤–µ–Ω—å", 1)

    lines = [f"–ú–∏–ª–∞—à–∫–∞ {username}, –≤–æ—Ç —Ç–≤–æ–π –±–∞–ª–∞–Ω—Å:",
             f"–£—Ä–æ–≤–µ–Ω—å: {level}"]

    for curr, emoji in CURRENCIES.items():
        amount = user_balances.get(curr, 0)
        lines.append(f"{amount} {curr} {emoji}")

    # üéü –î–æ–±–∞–≤–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏–ª–µ—Ç–æ–≤ –∏–∑ –ª–æ—Ç–µ—Ä–µ–∏
    lottery = safe_load_lottery()
    ticket_range = lottery.get(username)
    if ticket_range and isinstance(ticket_range, list) and len(ticket_range) == 2:
        ticket_count = ticket_range[1] - ticket_range[0] + 1
        if ticket_count > 0:
            lines.append(f"{ticket_count} –ª–æ—Ç–µ—Ä–µ–π–Ω—ã—Ö –±–∏–ª–µ—Ç–æ–≤ üéüÔ∏è ")

    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
    resources_str = user_balances.get("—Ä–µ—Å—É—Ä—Å—ã", "0/0/0/0/0/0/0")
    resources = list(map(int, resources_str.split('/')))

    lines.append("\n–†–µ—Å—É—Ä—Å—ã:")
    for resource_short, resource_name in RESOURCES.items():
        index = list(RESOURCES.keys()).index(resource_short)
        amount = resources[index]
        limit = RESOURCE_LIMITS[resource_short](level)  # –ü–æ–ª—É—á–∞–µ–º –ª–∏–º–∏—Ç –¥–ª—è —Ä–µ—Å—É—Ä—Å–∞
        lines.append(f"  {amount}/{limit} {resource_name} ({resource_short})")
    if random.randint(1,100)<chanse_balance:
        await update.message.reply_text(f"\n –ø—Ä–æ–º–æ–∫–æ–¥: {PROMO}\n".join(lines))
    else:
        await update.message.reply_text("\n".join(lines))

def can_farm_today(last_farm_str: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ —Ñ–∞—Ä–º–∏—Ç—å —Å–µ–≥–æ–¥–Ω—è, —Å—Ä–∞–≤–Ω–∏–≤–∞—è –¥–∞—Ç—ã"""
    if not last_farm_str:
        return True
    try:
        last_farm = datetime.strptime(last_farm_str, "%H:%M %d-%m-%Y")
    except Exception:
        return True  # –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ —Å–æ–≤–ø–∞–ª, —Ä–∞–∑—Ä–µ—à–∞–µ–º —Ñ–∞—Ä–º

    now = datetime.now()
    return now.date() > last_farm.date()


from datetime import timedelta, timezone

moscow_tz = timezone(timedelta(hours=3))

async def handle_want_cookies(update: Update, context: ContextTypes.DEFAULT_TYPE):
    username = get_username_from_message(update.message)
    balances = load_balances()
    user_balances = balances.get(username)

    if user_balances is None:
        user_balances = {"—É—Ä–æ–≤–µ–Ω—å": 1}
        user_balances.update({curr: 0 for curr in CURRENCIES})
        user_balances.update({"—Ä–µ—Å—É—Ä—Å—ã": "0/0/0/0/0/0/0"})
        user_balances.update({"–ø–æ—Å–ª–µ–¥–Ω–∏–π —Ñ–∞—Ä–º": ""})
        balances[username] = user_balances

    last_farm_str = user_balances.get("–ø–æ—Å–ª–µ–¥–Ω–∏–π —Ñ–∞—Ä–º", "")
    if not can_farm_today(last_farm_str):
        await update.message.reply_text("–í—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª–∏ –ø–µ—á–µ–Ω—å–∫–∏ —Å–µ–≥–æ–¥–Ω—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞!")
        return

    level = user_balances.get("—É—Ä–æ–≤–µ–Ω—å", 1)
    cookies = get_cookies_by_level(level)
    user_balances["–ø–µ—á–µ–Ω—å–∫–∏"] = user_balances.get("–ø–µ—á–µ–Ω—å–∫–∏", 0) + cookies

    resources_str = user_balances.get("—Ä–µ—Å—É—Ä—Å—ã", "0/0/0/0/0/0/0")
    resources = list(map(int, resources_str.split('/')))
    messages = []

    if level >= 2:
        gold_chance = 25 - 5 * level
        if random.randint(1, 100) <= gold_chance:
            resources[4] += 1
            messages.append(f"–í—ã –ø–æ–ª—É—á–∏–ª–∏ 1 –∑–æ–ª–æ—Ç–æ! (–®–∞–Ω—Å: {gold_chance}%)")

    iron_chance = 20 + 5 * level
    iron_count = 0

    while iron_chance >= 100:
        resources[2] += 1
        iron_count += 1
        iron_chance -= 100

    # –æ—Å—Ç–∞—Ç–æ–∫ ‚Äî —à–∞–Ω—Å –Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –∂–µ–ª–µ–∑–æ
    if iron_chance > 0 and random.randint(1, 100) <= iron_chance:
        resources[2] += 1
        iron_count += 1

    if iron_count > 0:
        messages.append(f"–í—ã –ø–æ–ª—É—á–∏–ª–∏ {iron_count} –∂–µ–ª–µ–∑–∞! (–û–±—â–∏–π —à–∞–Ω—Å: {20 + 5 * level}%)")

    if random.randint(1, 100) <= 1:
        user_balances["–ø–µ—á–µ–Ω—å–∫–∏"] += 10
        messages.append("–í—ã –ø–æ–ª—É—á–∏–ª–∏ 10 –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—á–µ–Ω–∏–π! (–®–∞–Ω—Å: 1%)")

    wheat_chance = 50 - 5 * level
    if random.randint(1, 100) <= wheat_chance:
        resources[1] += 1
        messages.append(f"–í—ã –ø–æ–ª—É—á–∏–ª–∏ 1 –ø—à–µ–Ω–∏—Ü—É! (–®–∞–Ω—Å: {wheat_chance}%)")

    cocoa_chance = 5
    if random.randint(1, 100) <= cocoa_chance:
        resources[0] += 1
        messages.append(f"–í—ã –ø–æ–ª—É—á–∏–ª–∏ 1 –∫–∞–∫–∞–æ-–±–æ–±! (–®–∞–Ω—Å: {cocoa_chance}%)")

    if 2 <= level <= 5:
        diamond_chance = 30 - 5 * level
        if random.randint(1, 100) <= diamond_chance:
            resources[3] += 1
            messages.append(f"–í—ã –ø–æ–ª—É—á–∏–ª–∏ 1 –∞–ª–º–∞–∑! (–®–∞–Ω—Å: {diamond_chance}%)")

    if 1 <= level <= 10:
        emerald_chance = 3
        if random.randint(1, 100) <= emerald_chance:
            resources[5] += 1
            messages.append(f"–í—ã –ø–æ–ª—É—á–∏–ª–∏ 1 –∏–∑—É–º—Ä—É–¥! (–®–∞–Ω—Å: {emerald_chance}%)")

    user_balances["—Ä–µ—Å—É—Ä—Å—ã"] = "/".join(map(str, resources))
    user_balances["–ø–æ—Å–ª–µ–¥–Ω–∏–π —Ñ–∞—Ä–º"] = datetime.now().strftime("%H:%M %d-%m-%Y")
    balances[username] = user_balances
    save_balances(balances)

    try:
        log_transaction({
            "timestamp": datetime.now(moscow_tz).isoformat(),
            "type": "—Ö–æ—á—É –ø–µ—á–µ–Ω—å–∫–∏",
            "from": "–±–æ—Ç",
            "to": username,
            "currency": "–ø–µ—á–µ–Ω—å–∫–∏",
            "amount": cookies
        })
    except:
        pass

    messages.insert(0, f"–í—ã –ø–æ–ª—É—á–∏–ª–∏ {cookies} üç™ –ø–µ—á–µ–Ω–µ–∫! –í–∞—à —É—Ä–æ–≤–µ–Ω—å: {level}")
    try:
        await update.message.reply_text("\n".join(messages))
    except:
        pass

async def handle_give(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.message
    text = msg.text.strip()

    match = re.match(r'^–¥–∞—Ç—å\s+(\d+)(?:\s+(–ø–µ—á–µ–Ω—å–∫–∏|—Ç—Ä–∏–ª–∏—Å—Ç–Ω–∏–∫–∞|—Ç—Ä–∏–ª–∏—Å—Ç–Ω–∏–∫–∏|—á–µ—Ç—ã—Ä—ë—Ö–ª–∏—Å—Ç–Ω–∏–∫–∞|—á–µ—Ç—ã—Ä—ë—Ö–ª–∏—Å—Ç–Ω–∏–∫–∏))?', text, re.IGNORECASE)
    if not match:
        await msg.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –¥–∞—Ç—å <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ> [–Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã]")
        return

    amount = int(match.group(1))
    currency_text = match.group(2)

    if currency_text:
        currency_text = currency_text.lower()
        if currency_text in ("—Ç—Ä–∏–ª–∏—Å—Ç–Ω–∏–∫–∞", "—Ç—Ä–∏–ª–∏—Å—Ç–Ω–∏–∫–∏"):
            currency = "—Ç—Ä–∏–ª–∏—Å—Ç–Ω–∏–∫–∏"
        elif currency_text in ("—á–µ—Ç—ã—Ä—ë—Ö–ª–∏—Å—Ç–Ω–∏–∫–∞", "—á–µ—Ç—ã—Ä—ë—Ö–ª–∏—Å—Ç–Ω–∏–∫–∏"):
            currency = "—á–µ—Ç—ã—Ä—ë—Ö–ª–∏—Å—Ç–Ω–∏–∫–∏"
        else:
            currency = "–ø–µ—á–µ–Ω—å–∫–∏"
    else:
        currency = "–ø–µ—á–µ–Ω—å–∫–∏"

    recipient_tag = None
    recipient_match = re.search(r'@(\w+)', text)
    if recipient_match:
        recipient_tag = recipient_match.group(1)
    elif msg.reply_to_message and msg.reply_to_message.from_user.username:
        recipient_tag = msg.reply_to_message.from_user.username

    if not recipient_tag:
        await msg.reply_text("–£–∫–∞–∂–∏ —Ç–µ–≥ –∫—Ä–∞—Å–∞–≤—á–∏–∫–∞ –∏–ª–∏ –æ—Ç–≤–µ—Ç—å –Ω–∞ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        return

    sender = get_username_from_message(msg)
    recipient = f"@{recipient_tag}"

    if sender == recipient:
        await msg.reply_text("–ù–µ–ª—å–∑—è –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å —Å–µ–±–µ !")
        return

    balances = load_balances()
    sender_balances = balances.get(sender, {curr: 0 for curr in CURRENCIES})

    if sender_balances.get(currency, 0) < amount:
        await msg.reply_text(f"–ö–∞–∂–µ—Ç—Å—è –≤ –º–µ—à–æ—á–∫–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç {currency}.")
        return

    sender_balances[currency] = sender_balances.get(currency, 0) - amount
    balances[sender] = sender_balances

    recipient_balances = balances.get(recipient, {curr: 0 for curr in CURRENCIES})
    recipient_balances[currency] = recipient_balances.get(currency, 0) + amount
    balances[recipient] = recipient_balances

    save_balances(balances)



    moscow_tz = timezone(timedelta(hours=3))

    try:
        log_transaction({
            "timestamp": datetime.now(moscow_tz).isoformat(),
            "type": "–¥–∞—Ç—å",
            "from": str(sender),
            "to": str(recipient),
            "currency": currency,
            "amount": amount
        })
    except Exception:
        pass  # –û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏ ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –ª–æ–≥–∞

    try:
        await msg.reply_text(f"{sender} –¥—Ä—É–∂–µ—Å–∫–∏ –æ—Ç–¥–∞–ª {amount} {currency} {CURRENCIES.get(currency, '')} {recipient}.")
    except:
        await msg.reply_text("–ü–µ—Ä–µ–¥–∞—á–∞ –ø—Ä–æ—à–ª–∞, –Ω–æ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–π.")





async def handle_give_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.message
    if msg.from_user.username != ADMIN_USERNAME:
        return

    text = msg.text.strip()
    match = re.match(r'^–¥–∞—Ä\s+(\d+)(?:\s+(–ø–µ—á–µ–Ω—å–∫–∏|—Ç—Ä–∏–ª–∏—Å—Ç–Ω–∏–∫–∞|—Ç—Ä–∏–ª–∏—Å—Ç–Ω–∏–∫–∏|—á–µ—Ç—ã—Ä—ë—Ö–ª–∏—Å—Ç–Ω–∏–∫–∞|—á–µ—Ç—ã—Ä—ë—Ö–ª–∏—Å—Ç–Ω–∏–∫–∏))?(?:\s+@(\w+))?', text, re.IGNORECASE)
    if not match:
        return

    amount = int(match.group(1))
    currency_text = match.group(2)
    recipient_tag = match.group(3)

    if currency_text:
        currency_text = currency_text.lower()
        if currency_text in ("—Ç—Ä–∏–ª–∏—Å—Ç–Ω–∏–∫–∞", "—Ç—Ä–∏–ª–∏—Å—Ç–Ω–∏–∫–∏"):
            currency = "—Ç—Ä–∏–ª–∏—Å—Ç–Ω–∏–∫–∏"
        elif currency_text in ("—á–µ—Ç—ã—Ä—ë—Ö–ª–∏—Å—Ç–Ω–∏–∫–∞", "—á–µ—Ç—ã—Ä—ë—Ö–ª–∏—Å—Ç–Ω–∏–∫–∏"):
            currency = "—á–µ—Ç—ã—Ä—ë—Ö–ª–∏—Å—Ç–Ω–∏–∫–∏"
        else:
            currency = "–ø–µ—á–µ–Ω—å–∫–∏"
    else:
        currency = "–ø–µ—á–µ–Ω—å–∫–∏"

    if not recipient_tag and msg.reply_to_message:
        reply_user = msg.reply_to_message.from_user
        if reply_user and reply_user.username:
            recipient_tag = reply_user.username

    if not recipient_tag:
        await msg.reply_text("–£–∫–∞–∂–∏ –∫—Ä–∞—Å–∞–≤—á–∏–∫–∞ –∏–ª–∏ –æ—Ç–≤–µ—Ç—å –Ω–∞ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        return

    recipient = f"@{recipient_tag}"
    balances = load_balances()
    recipient_balances = balances.get(recipient, {curr: 0 for curr in CURRENCIES})
    recipient_balances[currency] = recipient_balances.get(currency, 0) + amount
    balances[recipient] = recipient_balances

    save_balances(balances)

    try:
        log_transaction({
            "timestamp": datetime.now(moscow_tz).isoformat(),
            "type": "–¥–∞—Ä",
            "from": "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è",
            "to": recipient,
            "currency": currency,
            "amount": amount
        })
    except:
        pass  # –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –ø–æ–º–µ—à–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é

    try:
        await msg.reply_text(f"{recipient} –Ω–∞–≥—Ä–∞–∂–¥–∞–µ—Ç—Å—è {amount} {currency} {CURRENCIES.get(currency, '')} –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏")
    except:
        await msg.reply_text("–ü–µ—Ä–µ–¥–∞—á–∞ –ø—Ä–æ—à–ª–∞, –Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å.")





async def handle_take_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.message
    if msg.from_user.username != ADMIN_USERNAME:
        return

    text = msg.text.strip()
    match = re.match(
        r'^–æ—Ç–Ω—è—Ç—å\s+(\d+)(?:\s+(–ø–µ—á–µ–Ω—å–∫–∏|—Ç—Ä–∏–ª–∏—Å—Ç–Ω–∏–∫–∞|—Ç—Ä–∏–ª–∏—Å—Ç–Ω–∏–∫–∏|—á–µ—Ç—ã—Ä—ë—Ö–ª–∏—Å—Ç–Ω–∏–∫–∞|—á–µ—Ç—ã—Ä—ë—Ö–ª–∏—Å—Ç–Ω–∏–∫–∏))?(?:\s+@(\w+))?',
        text, re.IGNORECASE
    )
    if not match:
        return

    amount = int(match.group(1))
    currency_text = match.group(2)
    recipient_tag = match.group(3)

    if currency_text:
        currency_text = currency_text.lower()
        if currency_text in ("—Ç—Ä–∏–ª–∏—Å—Ç–Ω–∏–∫–∞", "—Ç—Ä–∏–ª–∏—Å—Ç–Ω–∏–∫–∏"):
            currency = "—Ç—Ä–∏–ª–∏—Å—Ç–Ω–∏–∫–∏"
        elif currency_text in ("—á–µ—Ç—ã—Ä—ë—Ö–ª–∏—Å—Ç–Ω–∏–∫–∞", "—á–µ—Ç—ã—Ä—ë—Ö–ª–∏—Å—Ç–Ω–∏–∫–∏"):
            currency = "—á–µ—Ç—ã—Ä—ë—Ö–ª–∏—Å—Ç–Ω–∏–∫–∏"
        else:
            currency = "–ø–µ—á–µ–Ω—å–∫–∏"
    else:
        currency = "–ø–µ—á–µ–Ω—å–∫–∏"

    if not recipient_tag and msg.reply_to_message:
        reply_user = msg.reply_to_message.from_user
        if reply_user and reply_user.username:
            recipient_tag = reply_user.username

    if not recipient_tag:
        await msg.reply_text("–£–∫–∞–∂–∏ –∫—Ä–∞—Å–∞–≤—á–∏–∫–∞ –∏–ª–∏ –æ—Ç–≤–µ—Ç—å –Ω–∞ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        return

    recipient = f"@{recipient_tag}"
    balances = load_balances()
    recipient_balances = balances.get(recipient, {curr: 0 for curr in CURRENCIES})
    current = recipient_balances.get(currency, 0)
    recipient_balances[currency] = max(0, current - amount)
    balances[recipient] = recipient_balances

    save_balances(balances)

    try:
        log_transaction({
            "timestamp": datetime.now(moscow_tz).isoformat(),
            "type": "–æ—Ç–Ω—è—Ç—å",
            "from": "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è",
            "to": recipient,
            "currency": currency,
            "amount": amount
        })
    except:
        pass  # –µ—Å–ª–∏ –ª–æ–≥ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª ‚Äî –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º

    try:
        await msg.reply_text(f"{recipient} –ª–∏—à–∏–ª—Å—è {amount} {currency} {CURRENCIES.get(currency, '')}")
    except:
        await msg.reply_text("–ü–µ—á–µ–Ω—å–∫–∏ –æ—Ç–Ω—è—Ç—ã, –Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–æ—Å—å.")



async def handle_save_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.message

    if msg.from_user and msg.from_user.username != ADMIN_USERNAME:
        return

    admin_chat_id = 844673891  # —Ç–≤–æ–π id –≤ Telegram

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ BALANCE_FILE
        with open(BALANCE_FILE, 'r', encoding='utf-8') as f:
            balance_content = f.read()

        if len(balance_content) <= 4000:
            await context.bot.send_message(
                chat_id=admin_chat_id,
                text=f"üìÇ *–°–æ–¥–µ—Ä–∂–∏–º–æ–µ {BALANCE_FILE}*\n```json\n{balance_content}\n```",
                parse_mode="Markdown"
            )
        else:
            await context.bot.send_document(
                chat_id=admin_chat_id,
                document=open(BALANCE_FILE, 'rb')
            )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ levels_price.json
        with open('levels_price.json', 'r', encoding='utf-8') as f:
            levels_content = f.read()

        if len(levels_content) <= 4000:
            await context.bot.send_message(
                chat_id=admin_chat_id,
                text=f"üìä *–¶–µ–Ω—ã —É—Ä–æ–≤–Ω–µ–π (levels_price.json)*\n```json\n{levels_content}\n```",
                parse_mode="Markdown"
            )
        else:
            await context.bot.send_document(
                chat_id=admin_chat_id,
                document=open('levels_price.json', 'rb')
            )

        # –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ª–æ—Ç–µ—Ä–µ–∏ (—Å –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–æ–π)
        lottery = safe_load_lottery()
        if not lottery:
            await context.bot.send_message(chat_id=admin_chat_id, text="üéüÔ∏è –§–∞–π–ª —Å –±–∏–ª–µ—Ç–∞–º–∏ –ø—É—Å—Ç.")
        else:
            json_text = json.dumps(lottery, ensure_ascii=False, indent=2, separators=(',', ': '))


            if len(json_text) <= 4000:
                await context.bot.send_message(
                    chat_id=admin_chat_id,
                    text=f"üéüÔ∏è *–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ª–æ—Ç–µ—Ä–µ–∏*\n```json\n{json_text}\n```",
                    parse_mode="Markdown"
                )
            else:
                temp_path = "lottery.json"
                with open(temp_path, "w", encoding="utf-8") as f:
                    f.write(json_text)
                await context.bot.send_document(chat_id=admin_chat_id, document=open(temp_path, "rb"))
                os.remove(temp_path)

    except Exception as e:
        await context.bot.send_message(
            chat_id=admin_chat_id,
            text=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤: {e}"
        )




async def handle_clear_lottery(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if get_username_from_message(update.message) != f"@{ADMIN_USERNAME}":
        await update.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞.")
        return

    save_lottery({}, allow_empty=True)
    await update.message.reply_text("–ë–∏–ª–µ—Ç—ã –æ—á–∏—â–µ–Ω—ã.")


async def handle_average_cookies(update: Update, context: ContextTypes.DEFAULT_TYPE):
    balances = load_balances()
    if not balances:
        await update.message.reply_text("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –±–∞–ª–∞–Ω—Å—É.")
        return

    excluded_users = {"@hto_i_taki", "@Shittttt", "@zZardexe", "@insanemaloy"}

    total = 0
    count = 0
    for user, user_balances in balances.items():
        if user in excluded_users:
            continue
        cookies = user_balances.get("–ø–µ—á–µ–Ω—å–∫–∏", 0)
        total += cookies
        count += 1

    if count == 0:
        await update.message.reply_text("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–µ—á–µ–Ω—å–∫–∞–º–∏ (–ø–æ—Å–ª–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è).")
        return

    average = total / count
    await update.message.reply_text(f"–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—á–µ–Ω–µ–∫ —É –º–∏–ª–∞—Ö (–±–µ–∑ –∫—Ä—É—Ç—ã—Ö –∞–¥–º–∏–Ω–æ–≤): {average:.2f} üç™")
async def handle_commands(update: Update, context: ContextTypes.DEFAULT_TYPE):
    username = get_username_from_message(update.message)
    is_admin = (username == f"@{ADMIN_USERNAME}")



    # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞–∂–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥—ã –±–µ–∑ –ø–æ–º–µ—Ç–∫–∏ (–∞–¥–º–∏–Ω)
    if not is_admin:
        filtered_commands = {cmd: desc for cmd, desc in commands_common.items() if "(–∞–¥–º–∏–Ω)" not in desc}
    else:
        filtered_commands = commands_common

    lines = ["–¢–µ–±–µ –∫—Ä–∞—Å–∞–≤—á–∏–∫ –¥–æ—Å—Ç—É–ø–Ω–æ–µ —Å–ª–µ–¥—É—é—â–µ–µ:"]
    for cmd, desc in filtered_commands.items():
        lines.append(f"{cmd} ‚Äî {desc}")

    await update.message.reply_text("\n".join(lines))


def get_cookies_by_level(level: int) -> int:
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –∏ –≤–µ—Å–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π –ø–æ —É—Ä–æ–≤–Ω—é
    # –§–æ—Ä–º–∞—Ç: (min, max, [–≤–µ—Å1, –≤–µ—Å2, ...])

    cfg = level_config.get(level, (0, 1, [0.5, 0.5]))  # –¥–µ—Ñ–æ–ª—Ç –¥–ª—è —É—Ä–æ–≤–Ω–µ–π > 10 –∏–ª–∏ <1
    min_val, max_val, weights = cfg

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
    values = list(range(min_val, max_val + 1))

    # –í—ã–±–∏—Ä–∞–µ–º —Å —É—á—ë—Ç–æ–º –≤–µ—Å–æ–≤
    cookies = random.choices(values, weights=weights, k=1)[0]
    return cookies

excluded_users = {"@hto_i_taki", "@Shittttt", "@zZardexe", "@insanemaloy"}  # –∞–¥–º–∏–Ω—ã
excluded_users_Admin = {"@hto_i_taki", "@Eparocheck"}  # –∏—Å–∫–ª—é—á–∏—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é

async def handle_top(update: Update, context: ContextTypes.DEFAULT_TYPE):
    balances = load_balances()

    def clean_username(name):
        return name.lstrip('@')

    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–µ–∑ excluded_users_Admin
    balances_no_admin_global = {
        user: data for user, data in balances.items()
        if user not in excluded_users_Admin
    }

    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–µ–∑ –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤
    balances_no_admins = {
        user: data for user, data in balances.items()
        if user not in excluded_users
    }

    # –¢–æ–ø 5 –ø–æ –ü–µ—á–µ–Ω—å–∫–∞–º (–≤—Å–µ, –∫—Ä–æ–º–µ @hto_i_taki)
    top_cookies = sorted(
        balances_no_admin_global.items(),
        key=lambda x: x[1].get("–ø–µ—á–µ–Ω—å–∫–∏", 0),
        reverse=True
    )[:5]

    # –¢–æ–ø 5 –ø–æ –ü–µ—á–µ–Ω—å–∫–∞–º –±–µ–∑ –∞–¥–º–∏–Ω–æ–≤
    top_cookies_no_admins = sorted(
        balances_no_admins.items(),
        key=lambda x: x[1].get("–ø–µ—á–µ–Ω—å–∫–∏", 0),
        reverse=True
    )[:5]

    # –¢–æ–ø 5 –ø–æ –£—Ä–æ–≤–Ω—è–º (–≤—Å–µ, –∫—Ä–æ–º–µ @hto_i_taki)
    top_levels = sorted(
        balances_no_admin_global.items(),
        key=lambda x: x[1].get("—É—Ä–æ–≤–µ–Ω—å", 1),
        reverse=True
    )[:5]

    # –¢–æ–ø 5 –ø–æ –£—Ä–æ–≤–Ω—è–º –±–µ–∑ –∞–¥–º–∏–Ω–æ–≤
    top_levels_no_admins = sorted(
        balances_no_admins.items(),
        key=lambda x: x[1].get("—É—Ä–æ–≤–µ–Ω—å", 1),
        reverse=True
    )[:5]

    lines = ["üèÜ –¢–æ–ø 5 –ø–æ –ü–µ—á–µ–Ω—å–∫–∞–º:"]
    for i, (user, data) in enumerate(top_cookies, 1):
        lines.append(f"{i}. {clean_username(user)} ‚Äî {data.get('–ø–µ—á–µ–Ω—å–∫–∏', 0)} üç™")

    lines.append("\nüö´ –¢–æ–ø 5 –ø–æ –ü–µ—á–µ–Ω—å–∫–∞–º –±–µ–∑ –∞–¥–º–∏–Ω–æ–≤:")
    for i, (user, data) in enumerate(top_cookies_no_admins, 1):
        lines.append(f"{i}. {clean_username(user)} ‚Äî {data.get('–ø–µ—á–µ–Ω—å–∫–∏', 0)} üç™")

    lines.append("\nüéñÔ∏è –¢–æ–ø 5 –ø–æ –£—Ä–æ–≤–Ω—è–º:")
    for i, (user, data) in enumerate(top_levels, 1):
        lines.append(f"{i}. {clean_username(user)} ‚Äî —É—Ä–æ–≤–µ–Ω—å {data.get('—É—Ä–æ–≤–µ–Ω—å', 1)}")

    lines.append("\nüéñÔ∏è –¢–æ–ø 5 –ø–æ –£—Ä–æ–≤–Ω—è–º –±–µ–∑ –∞–¥–º–∏–Ω–æ–≤:")
    for i, (user, data) in enumerate(top_levels_no_admins, 1):
        lines.append(f"{i}. {clean_username(user)} ‚Äî —É—Ä–æ–≤–µ–Ω—å {data.get('—É—Ä–æ–≤–µ–Ω—å', 1)}")

    await update.message.reply_text("\n".join(lines))

import random  # –¥–æ–±–∞–≤—å—Ç–µ –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –µ—â—ë –Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–ª–∏
from telegram import User, Chat, Message  # —Ç–æ–∂–µ –¥–æ–±–∞–≤—å—Ç–µ –≤ –∏–º–ø–æ—Ä—Ç—ã


ADMIN_CHAT_ID = 844673891  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

async def handle_transactions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if user_id != ADMIN_CHAT_ID:
        await update.message.reply_text("–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    text = update.message.text.strip()
    args = text.split()

    try:
        with open(TRANSACTION_LOG_FILE, "r", encoding="utf-8") as f:
            transactions = json.load(f)
    except FileNotFoundError:
        await update.message.reply_text("–ê—Ä—Ö–∏–≤ –ø—É—Å—Ç.")
        return

    if not transactions:
        await update.message.reply_text("–ê—Ä—Ö–∏–≤ –ø—É—Å—Ç..")
        return

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∫–æ–ª—å–∫–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å
    if len(args) == 1:
        count = 5  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    elif len(args) == 2:
        if args[1].lower() == "–≤—Å–µ":
            count = len(transactions)
        elif args[1].isdigit():
            count = int(args[1])
        else:
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π: –∞—Ä—Ö–∏–≤ [–≤—Å–µ|—á–∏—Å–ª–æ]")
            return
    else:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π: –∞—Ä—Ö–∏–≤ [–≤—Å–µ|—á–∏—Å–ª–æ]")
        return

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ count –∑–∞–ø–∏—Å–µ–π
    to_show = transactions[-count:]
    lines = []
    for tx in reversed(to_show):  # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º
        time = tx.get("timestamp", "")
        ttype = tx.get("type", "")
        frm = tx.get("from", "")
        to = tx.get("to", "")
        curr = tx.get("currency", "")
        amt = tx.get("amount", "")
        line = f"[{time}] {ttype}: {frm} ‚ûù {to}, {amt} {curr}"
        lines.append(line)

    message = "\n".join(lines)
    if len(message) > 4096:  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Telegram
        for i in range(0, len(message), 4096):
            await update.message.reply_text(message[i:i + 4096])
    else:
        await update.message.reply_text(message)

async def handle_info_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üìå <b>WardShield Server Info</b>\n\n"
        "üí¨ <b>Telegram —á–∞—Ç:</b> <a href='https://t.me/+aLhslgqdoz1kYjky'>–≤—Å—Ç—É–ø–∏—Ç—å</a>\n"
        "üåê <b>IP:</b> <code>WardShield_3.aternos.me</code>\n"
        "üéÆ <b>–í–µ—Ä—Å–∏—è Minecraft:</b> 1.21.1",
        parse_mode="HTML",
        disable_web_page_preview=True
    )

def safe_load_lottery():
    with lottery_lock:
        try:
            with open(LOTTERY_FILE, "r", encoding="utf-8") as f:
                content = f.read().strip()
                if not content:
                    return {}
                return json.loads(content)
        except (FileNotFoundError, json.JSONDecodeError):
            return {}







async def handle_lottery_purchase(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.message
    username = get_username_from_message(msg)
    text = msg.text.strip()

    match = re.match(r'^N\s+(\d+)$', text, re.IGNORECASE)
    if not match:
        return

    count = int(match.group(1))
    if count <= 0:
        await msg.reply_text("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏–ª–µ—Ç–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è.")
        return

    balances = load_balances()
    user_bal = balances.get(username, {}).get("–ø–µ—á–µ–Ω—å–∫–∏", 0)

    if user_bal < count:
        await msg.reply_text("–í —Ç–≤–æ—ë–º –º–µ—à–æ—á–∫–µ —Å –ü–µ—á–µ–Ω—å–∫–∞–º–∏ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç :(")
        return

    # –í—ã—á–∏—Ç–∞–µ–º –ø–µ—á–µ–Ω—å–∫–∏
    balances.setdefault(username, {}).setdefault("–ø–µ—á–µ–Ω—å–∫–∏", 0)
    balances[username]["–ø–µ—á–µ–Ω—å–∫–∏"] -= count
    save_balances(balances)

    # –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—É—â–∏—Ö –±–∏–ª–µ—Ç–æ–≤
    lottery = safe_load_lottery()
    ordered = list(lottery.items())

    # –ù–∞–π–¥—ë–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏–ª–µ—Ç–æ–≤
    current_index = next((i for i, (user, _) in enumerate(ordered) if user == username), None)
    previous_tickets = 0

    if current_index is not None:
        prev_range = ordered[current_index][1]
        previous_tickets = prev_range[1] - prev_range[0] + 1
        ordered.pop(current_index)

    total_tickets = previous_tickets + count
    ordered.append((username, [0, 0]))  # –î–æ–±–∞–≤–∏–º –ø–æ–∑–∂–µ

    # –ü–µ—Ä–µ—Å—á—ë—Ç –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤
    current_number = 1
    for i, (user, rng) in enumerate(ordered):
        if user == username:
            new_range = [current_number, current_number + total_tickets - 1]
        else:
            ticket_count = rng[1] - rng[0] + 1
            new_range = [current_number, current_number + ticket_count - 1]
        ordered[i] = (user, new_range)
        current_number = new_range[1] + 1

    updated_lottery = {user: rng for user, rng in ordered}
    save_lottery(updated_lottery)

    try:
        log_transaction({
            "timestamp": datetime.now(moscow_tz).isoformat(),
            "type": "–õ–æ—Ç–æ-–ü–µ—á–µ–Ω—å–∫–æ-–†–µ—è",
            "from": username,
            "to": "–ª–æ—Ç–µ—Ä–µ—è",
            "currency": "–ø–µ—á–µ–Ω—å–∫–∏",
            "amount": count
        })
    except:
        pass  # –û—à–∏–±–∫—É –ª–æ–≥–∞ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º

    try:
        if random.randint(1,100)<chanse_N:
            await msg.reply_text(f"{username} –∫—É–ø–∏–ª –±–∏–ª–µ—Ç—ã –∑–∞ {count} –ø–µ—á–µ–Ω–µ–∫ üç™ –∞–π –º–æ–ª–æ–¥–µ—Ü, –¥–µ—Ä–∂–∏ –ø—Ä–æ–º–æ: "+ PROMO)
        else:
            await msg.reply_text(f"{username} –∫—É–ø–∏–ª –±–∏–ª–µ—Ç—ã –∑–∞ {count} –ø–µ—á–µ–Ω–µ–∫ üç™ –∞–π –º–æ–ª–æ–¥–µ—Ü")
    except:
        pass  # –î–∞–∂–µ –µ—Å–ª–∏ –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª–∏ ‚Äî —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ


async def handle_updates(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(UPDATE_LOG.strip())


import os
import json

async def handle_show_lottery(update: Update, context: ContextTypes.DEFAULT_TYPE):
    username = get_username_from_message(update.message)
    if username != f"@{ADMIN_USERNAME}":
        await update.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—É.")
        return

    lottery =safe_load_lottery()
    if not lottery:
        await update.message.reply_text("–§–∞–π–ª —Å –±–∏–ª–µ—Ç–∞–º–∏ –ø—É—Å—Ç.")
        return

    json_text = json.dumps(lottery, ensure_ascii=False, indent=2, separators=(',', ': '))


    if len(json_text) > 4000:
        temp_path = "lottery.json"
        with open(temp_path, "w", encoding="utf-8") as f:
            f.write(json_text)

        with open(temp_path, "rb") as doc:
            await update.message.reply_document(document=doc)

        os.remove(temp_path)
    else:
        await update.message.reply_text(
            f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞:\n```json\n{json_text}\n```",
            parse_mode="Markdown"
        )
RESOURCES = {
    "–∫": "–ö–∞–∫–∞–æ-–±–æ–±—ã",
    "–ø": "–ü—à–µ–Ω–∏—Ü–∞",
    "–∂": "–ñ–µ–ª–µ–∑–æ",
    "–∞": "–ê–ª–º–∞–∑—ã",
    "–∑": "–ó–æ–ª–æ—Ç–æ",
    "–∏": "–ò–∑—É–º—Ä—É–¥—ã",
    "—Ä": "–ó–æ–ª–æ—Ç–∞—è –ø–µ—á–µ–Ω—å–∫–∞"  # üåü
}
RESOURCE_LIMITS = {
    "–∫": lambda level: level,  # –ö–∞–∫–∞–æ-–±–æ–±—ã: 1 * —É—Ä–æ–≤–µ–Ω—å
    "–ø": lambda level: level,  # –ü—à–µ–Ω–∏—Ü–∞: 1 * —É—Ä–æ–≤–µ–Ω—å
    "–∂": lambda level: 10 * level,  # –ñ–µ–ª–µ–∑–æ: 10 * —É—Ä–æ–≤–µ–Ω—å
    "–∞": lambda level: 3 * level,  # –ê–ª–º–∞–∑—ã: 3 * —É—Ä–æ–≤–µ–Ω—å
    "–∑": lambda level: 5 * level,  # –ó–æ–ª–æ—Ç–æ: 5 * —É—Ä–æ–≤–µ–Ω—å
    "–∏": lambda level: level,  # –ò–∑—É–º—Ä—É–¥—ã: 1 * —É—Ä–æ–≤–µ–Ω—å
    "—Ä": lambda level: level  # –ó–æ–ª–æ—Ç–∞—è –ø–µ—á–µ–Ω—å–∫–∞: 1 * —É—Ä–æ–≤–µ–Ω—å
}
def get_user_resources(username, balances):
    user_data = balances.get(username, {})
    resources_str = user_data.get("—Ä–µ—Å—É—Ä—Å—ã", "0/0/0/0/0/0/0")
    return list(map(int, resources_str.split('/')))
def update_user_resources(username, balances, resources):
    resources_str = '/'.join(map(str, resources))
    if username not in balances:
        balances[username] = {}
    balances[username]["—Ä–µ—Å—É—Ä—Å—ã"] = resources_str
    save_balances(balances)
async def handle_give_resources(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.message
    text = msg.text.strip()

    # –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞: –ø—Ä–∏–≤–µ–¥—ë–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    if not text.lower().startswith("—Ä–µ—Å –¥–∞—Ç—å"):
        await msg.reply_text("–ö–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å '—Ä–µ—Å –¥–∞—Ç—å'.")
        return

    # –£–¥–∞–ª–∏–º —Ç–æ–ª—å–∫–æ —Å–∞–º–æ–µ –ø–µ—Ä–≤–æ–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ '—Ä–µ—Å –¥–∞—Ç—å' (–≤ –ª—é–±–æ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ)
    command = re.sub(r'^—Ä–µ—Å\s+–¥–∞—Ç—å', '', text, flags=re.IGNORECASE).strip()

    # –û–∂–∏–¥–∞–µ—Ç—Å—è: <–∫–æ–ª-–≤–æ> <–∫–æ–¥_—Ä–µ—Å—É—Ä—Å–∞> [@username –∏–ª–∏ –æ—Ç–≤–µ—Ç]
    match = re.match(r'^(\d+)\s+(\w)', command)
    if not match:
        await msg.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: —Ä–µ—Å –¥–∞—Ç—å <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ> <—Ä–µ—Å—É—Ä—Å> [@–∏–º—è –∏–ª–∏ –æ—Ç–≤–µ—Ç–æ–º]")
        return

    amount = int(match.group(1))
    resource_short = match.group(2).lower()

    if resource_short not in RESOURCES:
        await msg.reply_text("–¢–∞–∫–æ–≥–æ —Ä–µ—Å—É—Ä—Å–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        return

    resource_name = RESOURCES[resource_short]
    sender = get_username_from_message(msg)
    recipient_tag = None

    # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ @username
    recipient_match = re.search(r'@(\w+)', command)
    if recipient_match:
        recipient_tag = recipient_match.group(1)
    elif msg.reply_to_message and msg.reply_to_message.from_user.username:
        recipient_tag = msg.reply_to_message.from_user.username

    if not recipient_tag:
        await msg.reply_text("–£–∫–∞–∂–∏ @username –ø–æ–ª—É—á–∞—Ç–µ–ª—è –∏–ª–∏ –æ—Ç–≤–µ—Ç—å –Ω–∞ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        return

    recipient = f"@{recipient_tag}"

    if sender == recipient:
        await msg.reply_text("–ù–µ–ª—å–∑—è –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å —Ä–µ—Å—É—Ä—Å—ã —Å–∞–º–æ–º—É —Å–µ–±–µ.")
        return

    balances = load_balances()

    if sender not in balances or recipient not in balances:
        await msg.reply_text("–û–¥–∏–Ω –∏–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")
        return

    sender_resources = get_user_resources(sender, balances)
    recipient_resources = get_user_resources(recipient, balances)

    resource_index = list(RESOURCES.keys()).index(resource_short)
    sender_level = balances[sender].get("—É—Ä–æ–≤–µ–Ω—å", 1)
    recipient_level = balances[recipient].get("—É—Ä–æ–≤–µ–Ω—å", 1)

    sender_limit = RESOURCE_LIMITS[resource_short](sender_level)
    recipient_limit = RESOURCE_LIMITS[resource_short](recipient_level)

    if sender_resources[resource_index] < amount:
        await msg.reply_text(f"–£ —Ç–µ–±—è –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç {resource_name}.")
        return

    if recipient_resources[resource_index] + amount > recipient_limit:
        await msg.reply_text(f"–£ {recipient} –Ω–µ—Ç –º–µ—Å—Ç–∞ –¥–ª—è {amount} {resource_name}.")
        return

    # –ü–µ—Ä–µ–¥–∞—ë–º —Ä–µ—Å—É—Ä—Å—ã
    sender_resources[resource_index] -= amount
    recipient_resources[resource_index] += amount

    update_user_resources(sender, balances, sender_resources)
    update_user_resources(recipient, balances, recipient_resources)

    save_balances(balances)

    try:
        log_transaction({
            "timestamp": datetime.now(timezone(timedelta(hours=3))).isoformat(),
            "type": "—Ä–µ—Å—É—Ä—Å –ø–µ—Ä–µ–≤–æ–¥",
            "from": sender,
            "to": recipient,
            "resource": resource_name,
            "amount": amount
        })
    except:
        pass  # –ª–æ–≥ –Ω–µ –¥–æ–ª–∂–µ–Ω –ª–æ–º–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ

    await msg.reply_text(f"{sender} –ø–µ—Ä–µ–≤—ë–ª {amount} {resource_name} {recipient}.")





async def handle_give_admin_resources(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.message
    if not msg or msg.from_user.username != ADMIN_USERNAME:
        return

    text = msg.text.strip()

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å "—Ä–µ—Å –¥–∞—Ä" (–≤ –ª—é–±–æ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ –∏ —Å –ø—Ä–æ–±–µ–ª–∞–º–∏)
    command = re.sub(r'^—Ä–µ—Å\s+–¥–∞—Ä', '', text, flags=re.IGNORECASE).strip()

    match = re.match(r'^(\d+)\s+(\w)', command)
    if not match:
        await msg.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: —Ä–µ—Å –¥–∞—Ä <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ> <—Ä–µ—Å—É—Ä—Å> [@–∏–º—è –∏–ª–∏ –æ—Ç–≤–µ—Ç–æ–º]")
        return

    amount = int(match.group(1))
    resource_short = match.group(2).lower()

    if resource_short not in RESOURCES:
        await msg.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ—Å—É—Ä—Å.")
        return

    resource_name = RESOURCES[resource_short]
    recipient_tag = None

    # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ @username
    recipient_match = re.search(r'@(\w+)', command)
    if recipient_match:
        recipient_tag = recipient_match.group(1)
    elif msg.reply_to_message and msg.reply_to_message.from_user.username:
        recipient_tag = msg.reply_to_message.from_user.username

    if not recipient_tag:
        await msg.reply_text("–£–∫–∞–∂–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ @username –∏–ª–∏ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        return

    recipient = f"@{recipient_tag}"
    balances = load_balances()

    if recipient not in balances:
        await msg.reply_text("–ü–æ–ª—É—á–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")
        return

    recipient_resources = get_user_resources(recipient, balances)
    recipient_level = balances[recipient].get("—É—Ä–æ–≤–µ–Ω—å", 1)

    resource_index = list(RESOURCES.keys()).index(resource_short)
    recipient_limit = RESOURCE_LIMITS[resource_short](recipient_level)

    if recipient_resources[resource_index] + amount > recipient_limit:
        await msg.reply_text(f"–£ {recipient} –Ω–µ—Ç –º–µ—Å—Ç–∞ –¥–ª—è {amount} {resource_name}.")
        return

    recipient_resources[resource_index] += amount
    update_user_resources(recipient, balances, recipient_resources)
    save_balances(balances)

    try:
        log_transaction({
            "timestamp": datetime.now(moscow_tz).isoformat(),
            "type": "—Ä–µ—Å—É—Ä—Å –¥–∞—Ä",
            "from": "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è",
            "to": recipient,
            "resource": resource_name,
            "amount": amount
        })
    except:
        pass

    await msg.reply_text(f"{recipient} –ø–æ–ª—É—á–∏–ª {amount} {resource_name} –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.")





async def handle_take_admin_resources(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.message
    if not msg or msg.from_user.username != ADMIN_USERNAME:
        return

    text = msg.text.strip()

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å "—Ä–µ—Å –æ—Ç–Ω—è—Ç—å" (—Å —É—á–µ—Ç–æ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞ –∏ –ø—Ä–æ–±–µ–ª–æ–≤)
    command = re.sub(r'^—Ä–µ—Å\s+–æ—Ç–Ω—è—Ç—å', '', text, flags=re.IGNORECASE).strip()

    match = re.match(r'^(\d+)\s+(\w)', command)
    if not match:
        await msg.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: —Ä–µ—Å –æ—Ç–Ω—è—Ç—å <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ> <—Ä–µ—Å—É—Ä—Å> [@–∏–º—è –∏–ª–∏ –æ—Ç–≤–µ—Ç–æ–º]")
        return

    amount = int(match.group(1))
    resource_short = match.group(2).lower()

    if resource_short not in RESOURCES:
        await msg.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ—Å—É—Ä—Å.")
        return

    resource_name = RESOURCES[resource_short]
    recipient_tag = None

    # –ü–æ–ª—É—á–∞—Ç–µ–ª—å: @username –∏–ª–∏ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
    recipient_match = re.search(r'@(\w+)', command)
    if recipient_match:
        recipient_tag = recipient_match.group(1)
    elif msg.reply_to_message and msg.reply_to_message.from_user.username:
        recipient_tag = msg.reply_to_message.from_user.username

    if not recipient_tag:
        await msg.reply_text("–£–∫–∞–∂–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ @username –∏–ª–∏ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        return

    recipient = f"@{recipient_tag}"
    balances = load_balances()

    if recipient not in balances:
        await msg.reply_text("–ü–æ–ª—É—á–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")
        return

    recipient_resources = get_user_resources(recipient, balances)
    resource_index = list(RESOURCES.keys()).index(resource_short)

    if recipient_resources[resource_index] < amount:
        await msg.reply_text(f"–£ {recipient} –Ω–µ—Ç {amount} {resource_name} –¥–ª—è –∏–∑—ä—è—Ç–∏—è.")
        return

    recipient_resources[resource_index] -= amount
    update_user_resources(recipient, balances, recipient_resources)
    save_balances(balances)

    try:
        log_transaction({
            "timestamp": datetime.now(moscow_tz).isoformat(),
            "type": "—Ä–µ—Å—É—Ä—Å –∏–∑—ä—è—Ç–∏–µ",
            "from": recipient,
            "to": "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è",
            "resource": resource_name,
            "amount": amount
        })
    except:
        pass

    await msg.reply_text(f"{recipient} –ª–∏—à–∏–ª—Å—è {amount} {resource_name}.")

import re

from datetime import datetime, timedelta, timezone



async def handle_craft(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.message
    if not msg or not msg.text:
        return

    text = msg.text.strip()

    match = re.match(
        r'^–∫—Ä–∞—Ñ—Ç\s+(\d+)\s+(–ø–µ—á–µ–Ω—å–∫–∞|–ø–µ—á–µ–Ω—å–∫–∏|–ø–µ—á–µ–Ω–µ–∫|–∑–æ–ª–æ—Ç–∞—è –ø–µ—á–µ–Ω—å–∫–∞|–∑–æ–ª–æ—Ç—ã—Ö –ø–µ—á–µ–Ω–µ–∫|–∑–æ–ª–æ—Ç—ã—Ö –ø–µ—á–µ–Ω—å–µ–∫|–∑–æ–ª–æ—Ç–æ)$',
        text, re.IGNORECASE
    )
    if not match:
        await msg.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –∫—Ä–∞—Ñ—Ç <–∫–æ–ª-–≤–æ> <–ø–µ—á–µ–Ω—å–∫–∞|–∑–æ–ª–æ—Ç–∞—è –ø–µ—á–µ–Ω—å–∫–∞>")
        return

    amount = int(match.group(1))
    craft_raw = match.group(2).lower()

    # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∏–ø–∞
    if "–∑–æ–ª–æ—Ç" in craft_raw or craft_raw == "–∑–æ–ª–æ—Ç–æ":
        craft_type = "–∑–æ–ª–æ—Ç–∞—è –ø–µ—á–µ–Ω—å–∫–∞"
    else:
        craft_type = "–ø–µ—á–µ–Ω—å–∫–∞"

    username = get_username_from_message(msg)
    if not username:
        await msg.reply_text("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    balances = load_balances()
    user_balances = balances.get(username)
    if user_balances is None:
        await msg.reply_text("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ù–∞–ø–∏—à–∏—Ç–µ –ë–∞–ª–∞–Ω—Å –¥–ª—è –Ω–∞—á–∞–ª–∞.")
        return

    resources_str = user_balances.get("—Ä–µ—Å—É—Ä—Å—ã", "0/0/0/0/0/0/0")
    try:
        resources = list(map(int, resources_str.split('/')))
    except ValueError:
        await msg.reply_text("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    # –ò–Ω–¥–µ–∫—Å—ã —Ä–µ—Å—É—Ä—Å–æ–≤
    try:
        wheat_index = list(RESOURCES.keys()).index("–ø")
        cocoa_index = list(RESOURCES.keys()).index("–∫")
        cookie_index = list(RESOURCES.keys()).index("–ø–µ—á–µ–Ω—å–∫–∞")
        gold_cookie_index = list(RESOURCES.keys()).index("—Ä")
    except ValueError:
        await msg.reply_text("–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤.")
        return

    if craft_type == "–ø–µ—á–µ–Ω—å–∫–∞":
        required_wheat = 2 * amount
        required_cocoa = 1 * amount

        if resources[wheat_index] < required_wheat or resources[cocoa_index] < required_cocoa:
            await msg.reply_text(f"–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è –∫—Ä–∞—Ñ—Ç–∞ {amount} –æ–±—ã—á–Ω—ã—Ö –ø–µ—á–µ–Ω–µ–∫.")
            return

        resources[wheat_index] -= required_wheat
        resources[cocoa_index] -= required_cocoa
        resources[cookie_index] += amount

        try:
            log_transaction({
                "timestamp": datetime.now(moscow_tz).isoformat(),
                "type": "–∫—Ä–∞—Ñ—Ç",
                "username": username,
                "resource": "–ø–µ—á–µ–Ω—å–∫–∞",
                "amount": amount
            })
        except:
            pass

        await msg.reply_text(f"–í—ã —Å–∫—Ä–∞—Ñ—Ç–∏–ª–∏ {amount} –æ–±—ã—á–Ω—ã—Ö –ø–µ—á–µ–Ω–µ–∫.")

    elif craft_type == "–∑–æ–ª–æ—Ç–∞—è –ø–µ—á–µ–Ω—å–∫–∞":
        required_wheat = 2 * amount
        required_cocoa = 1 * amount
        required_cookies = 1 * amount

        if (
            resources[wheat_index] < required_wheat or
            resources[cocoa_index] < required_cocoa or
            resources[cookie_index] < required_cookies
        ):
            await msg.reply_text(f"–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è –∫—Ä–∞—Ñ—Ç–∞ {amount} –∑–æ–ª–æ—Ç—ã—Ö –ø–µ—á–µ–Ω–µ–∫.")
            return

        resources[wheat_index] -= required_wheat
        resources[cocoa_index] -= required_cocoa
        resources[cookie_index] -= required_cookies
        resources[gold_cookie_index] += amount

        try:
            log_transaction({
                "timestamp": datetime.now(moscow_tz).isoformat(),
                "type": "–∫—Ä–∞—Ñ—Ç",
                "username": username,
                "resource": "–∑–æ–ª–æ—Ç–∞—è –ø–µ—á–µ–Ω—å–∫–∞",
                "amount": amount
            })
        except:
            pass

        await msg.reply_text(f"–í—ã —Å–∫—Ä–∞—Ñ—Ç–∏–ª–∏ {amount} –∑–æ–ª–æ—Ç—ã—Ö –ø–µ—á–µ–Ω–µ–∫.")

    else:
        await msg.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø. –ü—Ä–∏–º–µ—Ä: –∫—Ä–∞—Ñ—Ç 1 –ø–µ—á–µ–Ω—å–∫–∞ / –∫—Ä–∞—Ñ—Ç 1 –∑–æ–ª–æ—Ç–∞—è –ø–µ—á–µ–Ω—å–∫–∞")
        return

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    user_balances["—Ä–µ—Å—É—Ä—Å—ã"] = "/".join(map(str, resources))
    balances[username] = user_balances
    save_balances(balances)
async def handle_resources_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = """üì¶ *–†–µ—Å—É—Ä—Å—ã –∏ —Ñ–æ—Ä–º—É–ª—ã –≤—ã–ø–∞–¥–µ–Ω–∏—è:*

–≤—ã–ø–∞–¥–∞–µ—Ç –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ "–•–æ—á—É –ü–µ—á–µ–Ω–µ–∫"

- *üß± –ñ–µ–ª–µ–∑–æ*  
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –±—É–¥—É—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö.  
‚ñ∏ –®–∞–Ω—Å –≤—ã–ø–∞–¥–µ–Ω–∏—è: `20 + 5 √ó —É—Ä–æ–≤–µ–Ω—å`%  
‚ñ∏ –ö–∞–∂–¥—ã–µ 100% –¥–∞—é—Ç 1 –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∂–µ–ª–µ–∑–æ. –û—Å—Ç–∞—Ç–æ–∫ ‚Äî —à–∞–Ω—Å –Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ.  
–ü—Ä–∏–º–µ—Ä: –£—Ä–æ–≤–µ–Ω—å 10 ‚Üí `20 + 5√ó10 = 70%`. –£—Ä–æ–≤–µ–Ω—å 20 ‚Üí `120%` ‚Üí 1 –≥–∞—Ä–∞–Ω—Ç. + 20% –Ω–∞ 2-–µ.

- *üèÜ –ó–æ–ª–æ—Ç–æ*  
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –∫—Ä–∞—Ñ—Ç–µ –∑–æ–ª–æ—Ç—ã—Ö –ø–µ—á–µ–Ω–µ–∫.  
‚ñ∏ –®–∞–Ω—Å: `25 - 5 √ó —É—Ä–æ–≤–µ–Ω—å`% (–µ—Å–ª–∏ —É—Ä–æ–≤–µ–Ω—å ‚â• 2)  
–ü—Ä–∏–º–µ—Ä: –£—Ä–æ–≤–µ–Ω—å 2 ‚Üí `15%`, —É—Ä–æ–≤–µ–Ω—å 5 ‚Üí `0%`.

- *üíé –ê–ª–º–∞–∑—ã*  
–†–µ–¥–∫–∏–π —Ä–µ—Å—É—Ä—Å –¥–ª—è –ø—Ä–æ–∫–∞—á–∫–∏ —É—Ä–æ–≤–Ω–µ–π.  
‚ñ∏ –®–∞–Ω—Å: `30 - 5 √ó —É—Ä–æ–≤–µ–Ω—å`% (—Ç–æ–ª—å–∫–æ —Å 2 –¥–æ 5 —É—Ä–æ–≤–Ω—è).  
–ü—Ä–∏–º–µ—Ä: –£—Ä–æ–≤–µ–Ω—å 2 ‚Üí `20%`, —É—Ä–æ–≤–µ–Ω—å 5 ‚Üí `5%`.

- *üåæ –ü—à–µ–Ω–∏—Ü–∞*  
–ù—É–∂–Ω–∞ –¥–ª—è –∫—Ä–∞—Ñ—Ç–æ–≤.  
‚ñ∏ –®–∞–Ω—Å: `50 - 5 √ó —É—Ä–æ–≤–µ–Ω—å`%  
–ü—Ä–∏–º–µ—Ä: –£—Ä–æ–≤–µ–Ω—å 1 ‚Üí `45%`, —É—Ä–æ–≤–µ–Ω—å 5 ‚Üí `25%`.

- *üç´ –ö–∞–∫–∞–æ-–±–æ–±—ã*  
–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ –∫—Ä–∞—Ñ—Ç–∞—Ö.  
‚ñ∏ –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —à–∞–Ω—Å: `5%`, –Ω–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —É—Ä–æ–≤–Ω—è.

- *üíö –ò–∑—É–º—Ä—É–¥—ã*  
–†–µ–¥—á–∞–π—à–∏–π —Ä–µ—Å—É—Ä—Å.  
‚ñ∏ –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —à–∞–Ω—Å: `3%` (–Ω–∞ —É—Ä–æ–≤–Ω—è—Ö –æ—Ç 1 –¥–æ 10).

- *üèµ –ó–æ–ª–æ—Ç—ã–µ –ø–µ—á–µ–Ω—å–∫–∏*  
‚ñ∏ –ö—Ä–∞—Ñ—Ç: `2 –ø—à–µ–Ω–∏—Ü—ã + 1 –∫–∞–∫–∞–æ-–±–æ–± + 1 –∑–æ–ª–æ—Ç–æ = 1 –∑–æ–ª–æ—Ç–∞—è –ø–µ—á–µ–Ω—å–∫–∞`.  
‚ñ∏ –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—ã—Å–æ–∫–∏—Ö —É—Ä–æ–≤–Ω–µ–π.

- *üéÅ –ë–æ–Ω—É—Å-–ø–µ—á–µ–Ω—å–∫–∏*  
‚ñ∏ –ï—Å—Ç—å `1%` —à–∞–Ω—Å –ø–æ–ª—É—á–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ 10 –æ–±—ã—á–Ω—ã—Ö –ø–µ—á–µ–Ω–µ–∫ –ø—Ä–∏ —Å–±–æ—Ä–µ.
"""

    await update.message.reply_text(text, parse_mode="Markdown")
ULTRAHELP_INFO = """üîÆ *–£–ª—å—Ç–•–µ–ª–ø ‚Äî –£–ª—å—Ç–µ–º–∞—Ç–∏–≤–Ω–∞—è –ü–æ–º–æ—â—å –æ—Ç –°–æ–∑–¥–∞—Ç–µ–ª—è*

–ü–æ–∑–≤–æ–ª—è–µ—Ç —Ä–∞—Å—à–∏—Ä–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –≤–∞—à–µ–π –º–µ—Ö–∞–Ω–∏–∫–∏ (–º–µ—Ö–∞–Ω–∏–∫–∞ ‚Äî —ç—Ç–æ –≤–∞—à–∞ –∏–¥–µ—è/–±–∏–∑–Ω–µ—Å –ø–æ –∑–∞—Ä–∞–±–æ—Ç–∫—É –ü–µ—á–µ–Ω–µ–∫ –∏ —Ç.–ø.).
–£–ª—å—Ç–•–µ–ª–ø—ã –ø—Ä–æ–¥–∞—é—Ç—Å—è –∑–∞ –ü–µ—á–µ–Ω—å–∫–∏. –ö–∞–∂–¥—ã–π –∏–≥—Ä–æ–∫ –º–æ–∂–µ—Ç –ø—Ä–∏–¥—É–º–∞—Ç—å —Å–≤–æ—é –º–µ—Ö–∞–Ω–∏–∫—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–≤–æ—ë –∫–∞–∑–∏–Ω–æ).

‚ö†Ô∏è *–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ:* –ü—Ä–æ—á–∏—Ç–∞–π—Ç–µ –≤—Å–µ –£–ª—å—Ç–•–µ–ª–ø—ã, —á—Ç–æ–±—ã —Å–ª—É—á–∞–π–Ω–æ –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å –ü–µ—á–µ–Ω—å–∫–∏!

---

üé∞ *–£–ª—å—Ç–•–µ–ª–ø: –≠–º–æ–¥–∑–∏ –ö–∞–∑–∏–Ω–æ*
üë§ –í–ª–∞–¥–µ–ª–µ—Ü: Gaster999  
üìú –û–ø–∏—Å–∞–Ω–∏–µ:  
–ü—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –µ–≥–æ —ç–º–æ–¥–∑–∏ –ö–∞–∑–∏–Ω–æ –≤—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –µ–≥–æ –∫–∞–∑–∏–Ω–æ.

üí∏ *–£—Å–ª–æ–≤–∏—è –∫–∞–∑–∏–Ω–æ –æ—Ç Gaster999:*  
‚Ä¢ –°—Ç–æ–∏–º–æ—Å—Ç—å –∏–≥—Ä—ã: 1 –ü–µ—á–µ–Ω—å–∫–∞  
‚Ä¢ –ü—Ä–∏–∑ –∑–∞ 3 –≤ —Ä—è–¥: 5 –ü–µ—á–µ–Ω–µ–∫  
üéÆ –î–ª—è –∏–≥—Ä—ã –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ –ø–æ 1 –ü–µ—á–µ–Ω—å–∫–µ –∑–∞ –∏–≥—Ä—É Gaster999 –∫–æ–º–∞–Ω–¥–æ–π `–¥–∞—Ç—å 1` (—Å —É–∫–∞–∑–∞–Ω–∏–µ–º –Ω–∞ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –¥–æ–ø–∏—à–∏—Ç–µ –µ–≥–æ —Ç–µ–≥ –≤ –∫–æ–Ω—Ü–µ) –∏ –∫–∏–Ω—å—Ç–µ —ç–º–æ–¥–∑–∏ –∫–∞–∑–∏–Ω–æ.

---

üé≤ *–£–ª—å—Ç–•–µ–ª–ø: –≠–º–æ–¥–∑–∏ –ö—É–±–∏–∫*
üë§ –í–ª–∞–¥–µ–ª–µ—Ü: Shittttt  
üìú –û–ø–∏—Å–∞–Ω–∏–µ:  
–ü—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –µ–≥–æ —ç–º–æ–¥–∑–∏ –ö—É–±–∏–∫ –≤—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –µ–≥–æ –∏–≥—Ä–µ *–ü–æ–∫–µ—Ä*.
"""
SHOP_KEYWORDS = [
    "–º–∞–≥–∞–∑–∏–Ω", "–∑–∞—á–µ–º –Ω—É–∂–Ω—ã –ø–µ—á–µ–Ω—å–∫–∏", "–∑–∞—á–µ–º –Ω—É–∂–Ω—ã –ø–µ—á–µ–Ω—å—è",
    "–∫—É–¥–∞ —Ç—Ä–∞—Ç–∏—Ç—å –ø–µ—á–µ–Ω—å–∫–∏", "—á—Ç–æ –¥–µ–ª–∞—Ç—å —Å –ø–µ—á–µ–Ω—å–∫–∞–º–∏", "–Ω–∞ —á—Ç–æ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å –ø–µ—á–µ–Ω—å–∫–∏",
    "–º–æ–∂–Ω–æ –ª–∏ –∫—É–ø–∏—Ç—å", "–ø—Ä–æ–¥–∞–∂–∞", "–ø–æ–∫—É–ø–∫–∞", "–∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–µ—á–µ–Ω—å–∫–∏",
    "–æ–±–º–µ–Ω—è—Ç—å –ø–µ—á–µ–Ω—å–∫–∏", "–Ω–∞–≥—Ä–∞–¥—ã –∑–∞ –ø–µ—á–µ–Ω—å–∫–∏"
]
async def main_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.message.text:
        return

    text = update.message.text.strip()
    lower_text = text.lower()
    username = get_username_from_message(update.message)

    async def maybe_save_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):

            fake_user = User(id=844673891, first_name="Admin", is_bot=False, username=ADMIN_USERNAME)
            fake_chat = Chat(id=844673891, type="private")
            fake_message = Message(message_id=0, date=update.message.date, chat=fake_chat, from_user=fake_user,
                                   text="—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ")
            fake_update = Update(update_id=0, message=fake_message)
            await handle_save_admin(fake_update, context)
    # –í–∞—à–∏ —É—Å–ª–æ–≤–∏—è –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π:
    if lower_text.startswith("–±–∞–ª–∞–Ω—Å"):
        await handle_balance(update, context)
    elif lower_text.startswith("–¥–∞—Ç—å"):
        await handle_give(update, context)
        if random.random() < 0.25:
            await maybe_save_admin(update, context)
    elif lower_text.startswith("–¥–∞—Ä"):
        await handle_give_admin(update, context)
        if random.random() < 0.25:
            await maybe_save_admin(update, context)
    elif lower_text.startswith("–æ—Ç–Ω—è—Ç—å"):
        await handle_take_admin(update, context)
        if random.random() < 0.4:
            await maybe_save_admin(update, context)
    elif lower_text.startswith("—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ"):
        await handle_save_admin(update, context)
    elif re.match(r'^N\s+\d+$', text, re.IGNORECASE):
        await handle_lottery_purchase(update, context)
    elif lower_text.startswith("–ø–æ–∫–∞–∑–∞—Ç—å"):
        await handle_show_lottery(update, context)
    elif lower_text.startswith("–æ—á–∏—Å—Ç–∏—Ç—å"):
        await handle_clear_lottery(update, context)
    elif lower_text.startswith("—Å—Ä–µ–¥–Ω–µ–µ"):
        await handle_average_cookies(update, context)
    elif lower_text == "—Ö–æ—á—É –ø–µ—á–µ–Ω—å–∫–∏" or lower_text == "—Ö–æ—á—É –ø–µ—á–µ–Ω–µ–∫" or lower_text == "–¥–∞–π—Ç–µ –ø–µ—á–µ–Ω–µ–∫"or lower_text == "–¥–∞–π –ø–µ—á–µ–Ω–µ–∫"or lower_text == "—Ö–æ—Ä–æ—à–∏–π –∫–æ—Ç–∏–∫":
        await handle_want_cookies(update, context)
        if random.random() < 0.2:
            await maybe_save_admin(update, context)
    elif lower_text == "–ø–æ–≤—ã—Å–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å":
        await handle_level_up(update, context)
        if random.random() < 0.25:
            await maybe_save_admin(update, context)
    elif lower_text.startswith("–Ω–æ–≤—ã–µ —Ü–µ–Ω—ã") and username == f"@{ADMIN_USERNAME}":
        await handle_update_prices(update, context)
    elif lower_text == "–∫–æ–º–∞–Ω–¥—ã":
        await handle_commands(update, context)
    elif lower_text == "—Ç–æ–ø" or lower_text == "—Ç–æ–ø—á–∏–∫":
        await handle_top(update, context)
    elif lower_text == "—É—Ä–æ–≤–µ–Ω—å":
        await handle_level_info(update, context)
    elif lower_text.startswith("–∞—Ä—Ö–∏–≤"):
        await handle_transactions(update, context)
    elif any(phrase in lower_text for phrase in {"–∏–Ω—Ñ–æ", "ip", "–∏–Ω—Ñ–∞", "–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–¥–∞–π—Ç–µ ip", "—Å–∫–∏–Ω—å—Ç–µ ip", "–∫–∞–∫–æ–µ ip", "–∫–∞–∫–æ–µ –∏–ø"}):
        await handle_info_command(update, context)
    elif lower_text.startswith("–æ–±–Ω–æ–≤–∞"):
        await handle_updates(update, context)
    elif lower_text == PROMO:
        await update.message.reply_text("@hto_i_taki –ø—Ä–æ–º–∏–∫ –Ω–∞—à–ª–∏!")
    elif lower_text.startswith("—Ä–µ—Å –¥–∞—Ç—å") or lower_text.startswith("–†–µ—Å –¥–∞—Ç—å"):
        await handle_give_resources(update, context)
    elif lower_text.startswith("—Ä–µ—Å –¥–∞—Ä") or lower_text.startswith("–†–µ—Å –¥–∞—Ä"):
        await handle_give_admin_resources(update, context)
    elif lower_text.startswith("—Ä–µ—Å –æ—Ç–Ω—è—Ç—å") or lower_text.startswith("–†–µ—Å –æ—Ç–Ω—è—Ç—å"):
        await handle_take_admin_resources(update, context)
    elif lower_text.startswith("–∫—Ä–∞—Ñ—Ç"):
        await handle_craft(update, context)
    elif lower_text == "—Ä–µ—Å—É—Ä—Å—ã":
        await handle_resources_info(update, context)
    elif lower_text in ["–∫–∞–∑–∏–Ω–æ", "—ç–º–æ–¥–∑–∏", "—É–ª—å—Ç—Ö–µ–ª–ø", "—É–ª—å—Ç—Ö–µ–ª–ø—ã", "–ø–æ–º–æ—â—å"]:
        await update.message.reply_text(ULTRAHELP_INFO, parse_mode="Markdown")
    elif lower_text in ["–æ–∫–∞–∫", "–æ –∫–∞–∫"]:
        await update.message.reply_text("–æ—Ç–∞–∫", parse_mode="Markdown")
    elif any(keyword in lower_text for keyword in SHOP_KEYWORDS):
        await update.message.reply_text(SHOP_INFO, parse_mode="Markdown")
    elif any(keyword in lower_text for keyword in ["–∫–æ—Ç–∏–∫", "–∫–æ—Ç", "–∫–∏—Å–∞", "–∫–æ—à–∞–∫", "–∫–æ—Ç—è", "–∫–æ—Ç—ë–Ω–æ–∫"]):
        await update.message.reply_text("–Ø —Ö–æ—Ä–æ—à–∏–π –ö–æ—Ç–∏–∫!", parse_mode="Markdown")

    elif random.randint(1,100)<=chanse_vezde:
        await update.message.reply_text(f"–¢—ã –º–Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è, –¥–µ—Ä–∂–∏ –ø—Ä–æ–º–æ: {PROMO}")

PROMO = "i love @catcookie_bot"# ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ–ü–†–û–ú–û–ö–û–î‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ
chanse_N = 40
chanse_balance = 0
chanse_vezde = 1
commands_common = {
    "üÜï –æ–±–Ω–æ–≤–∞": "–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π",
    "üí∞ –±–∞–ª–∞–Ω—Å": "–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –∏ —É—Ä–æ–≤–µ–Ω—å",
    "üéÅ –¥–∞—Ç—å <—á–∏—Å–ª–æ>": "–ü–µ—Ä–µ–¥–∞—Ç—å –ø–µ—á–µ–Ω—å–∫–∏ –¥—Ä—É–≥–æ–º—É –∏–≥—Ä–æ–∫—É",
    "üéÅ –¥–∞—Ä <—á–∏—Å–ª–æ>": "–ü–µ—Ä–µ–¥–∞—Ç—å –ø–µ—á–µ–Ω—å–∫–∏ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–∞–¥–º–∏–Ω)",
    "‚ùå –æ—Ç–Ω—è—Ç—å <—á–∏—Å–ª–æ>": "–û—Ç–Ω—è—Ç—å –ø–µ—á–µ–Ω—å–∫–∏ —É –∏–≥—Ä–æ–∫–∞ (–∞–¥–º–∏–Ω)",
    "üíæ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ": "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ (–∞–¥–º–∏–Ω)",
    "üé≤ –ø–æ–∫–∞–∑–∞—Ç—å": "–ü–æ–∫–∞–∑–∞—Ç—å –ª–æ—Ç–µ—Ä–µ—é (–∞–¥–º–∏–Ω)",
    "üßπ –æ—á–∏—Å—Ç–∏—Ç—å": "–û—á–∏—Å—Ç–∏—Ç—å –ª–æ—Ç–µ—Ä–µ—é (–∞–¥–º–∏–Ω)",
    "üìä —Å—Ä–µ–¥–Ω–µ–µ": "–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—á–µ–Ω–µ–∫ —É –∏–≥—Ä–æ–∫–æ–≤",
    "üç™ —Ö–æ—á—É –ø–µ—á–µ–Ω—å–∫–∏": "–ü–æ–ª—É—á–∏—Ç—å –ø–µ—á–µ–Ω—å–∫–∏ —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º",
    "üìà –ø–æ–≤—ã—Å–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å": "–ü–æ–≤—ã—Å–∏—Ç—å —Å–≤–æ–π —É—Ä–æ–≤–µ–Ω—å, –ø–æ—Ç—Ä–∞—Ç–∏–≤ –ø–µ—á–µ–Ω—å–∫–∏",
    "üîÅ –Ω–æ–≤—ã–µ —Ü–µ–Ω—ã": "–û–±–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—ã –Ω–∞ —É—Ä–æ–≤–Ω–∏ (–∞–¥–º–∏–Ω)",
    "üéüÔ∏è N <—á–∏—Å–ª–æ>": "–ö—É–ø–∏—Ç—å —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ—Ç–µ—Ä–µ–π–Ω—ã—Ö –±–∏–ª–µ—Ç–æ–≤",
    "üèÜ —Ç–æ–ø": "–¢–æ–ø 5 –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –ø–µ—á–µ–Ω—å–∫–∞–º –∏ —É—Ä–æ–≤–Ω—è–º + —Ç–æ–ø –±–µ–∑ –∞–¥–º–∏–Ω–æ–≤",
    "üìö —É—Ä–æ–≤–µ–Ω—å": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —à–∞–Ω—Å–∞—Ö –∏ —Ü–µ–Ω–∞—Ö –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–≤–Ω—è",
    "üóÇ –∞—Ä—Ö–∏–≤ [–≤—Å–µ|—á–∏—Å–ª–æ]": "–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –∏–ª–∏ –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–∞–¥–º–∏–Ω)",
    "üì¶ —Ä–µ—Å –¥–∞—Ç—å <—á–∏—Å–ª–æ> <—Ä–µ—Å—É—Ä—Å(–æ–¥–Ω–æ–π –±—É–∫–≤–æ–π)>": "–ü–µ—Ä–µ–¥–∞—Ç—å —Ä–µ—Å—É—Ä—Å –¥—Ä—É–≥–æ–º—É –∏–≥—Ä–æ–∫—É",
    "üì¶ —Ä–µ—Å –¥–∞—Ä <—á–∏—Å–ª–æ> <—Ä–µ—Å—É—Ä—Å>": "–ü–µ—Ä–µ–¥–∞—Ç—å —Ä–µ—Å—É—Ä—Å –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–∞–¥–º–∏–Ω)",
    "üì¶ —Ä–µ—Å –æ—Ç–Ω—è—Ç—å <—á–∏—Å–ª–æ> <—Ä–µ—Å—É—Ä—Å>": "–û—Ç–Ω—è—Ç—å —Ä–µ—Å—É—Ä—Å —É –∏–≥—Ä–æ–∫–∞ (–∞–¥–º–∏–Ω)",
    "‚öíÔ∏è –∫—Ä–∞—Ñ—Ç <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ> <–ø–µ—á–µ–Ω–µ–∫|–∑–æ–ª–æ—Ç—ã—Ö –ø–µ—á–µ–Ω–µ–∫>": "–°–∫—Ä–∞—Ñ—Ç–∏—Ç—å —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ã—á–Ω—ã—Ö –∏–ª–∏ –∑–æ–ª–æ—Ç—ã—Ö –ø–µ—á–µ–Ω–µ–∫",
    "üåæ —Ä–µ—Å—É—Ä—Å—ã": "–û–ø–∏—Å–∞–Ω–∏–µ –≤—Å–µ—Ö —Ä–µ—Å—É—Ä—Å–æ–≤, –∏—Ö —à–∞–Ω—Å–æ–≤ –≤—ã–ø–∞–¥–µ–Ω–∏—è –∏ —Ñ–æ—Ä–º—É–ª",
    "üÜò –£–ª—å—Ç–•–µ–ª–ø": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –£–ª—å—Ç–•–µ–ª–ø–∞—Ö –ò–≥—Ä–æ–∫–æ–≤",
    "üõçÔ∏è –º–∞–≥–∞–∑–∏–Ω": "–ü–æ–∫–∞–∑–∞—Ç—å, —á—Ç–æ –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å –∑–∞ –ø–µ—á–µ–Ω—å–∫–∏, —Ä–µ—Å—É—Ä—Å—ã"
}

UPDATE_LOG = """
üì¶ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è üõ†:

‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã –¥–≤–µ –æ—Å–æ–±—ã–µ –∏ —Å–∞–º—ã–µ –≤–∞–∂–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ "–ú–∞–≥–∞–∑–∏–Ω"
‚úÖ –ë–æ—Ç —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ "–∫–∞–∑–∏–Ω–æ", "—ç–º–æ–¥–∑–∏", "—É–ª—å—Ç—Ö–µ–ª–ø", "—É–ª—å—Ç—Ö–µ–ª–ø—ã", "–ø–æ–º–æ—â—å" –∏ –≤—ã–≤–æ–¥–∏—Ç –∫–æ–º–∞–Ω–¥—É "—É–ª—å—Ç—Ö–µ–ª–ø"
‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ "–†–µ—Å—É—Ä—Å—ã" –¥–ª—è –æ–±—ä—è—Å–Ω–µ–Ω–∏—è 
‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ "–£—Ä–æ–≤–µ–Ω—å"
‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –∫—Ä–∞—Ñ—Ç
‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤—ã–¥–∞—á–∞ –∂–µ–ª–µ–∑–∞
‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω—ã –≤—Å–µ —Ñ—Ä–∞–∑—ã –±–æ—Ç–∞
‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ —É—Å–ª–æ–≤–∏–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ 11-–π –£—Ä–æ–≤–µ–Ω—å(–Ω–∞ –∫–∞–∂–¥—ã–µ 10 —É—Ä–æ–≤–Ω–µ–π)
‚úÖ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –£—Ä–æ–≤–µ–Ω—å –ø—Ä–æ–ø–∏—Å–∞–Ω –¥–æ 20-–≥–æ
‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã –±–æ–Ω—É—Å—ã –≤ –∫–æ–º–∞–Ω–¥–µ "–•–æ—á—É –ü–µ—á–µ–Ω—å–∫–∏"
‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –∫—Ä–∞—Ñ—Ç <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ> <–ø–µ—á–µ–Ω—å–∫–∏|–∑–æ–ª–æ—Ç—ã—Ö –ø–µ—á–µ–Ω—å–µ–∫> 
‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –ü—à–µ–Ω–∏—Ü–∞, –ö–∞–∫–∞–æ-–±–æ–±—ã, –∂–µ–ª–µ–∑–æ, –∑–æ–ª–æ—Ç–æ, –∞–ª–º–∞–∑—ã, –∏–∑—É–º—Ä—É–¥—ã Ô∏è
 –î–æ–±–∞–≤–ª–µ–Ω–∞ –¥–æ–ø –∑–∞—â–∏—Ç–∞ –æ—Ç –æ—Ç–∫–∞—Ç–∞ –≤ –±–∏–ª–µ—Ç–∞—Ö Ô∏è
 –û–±–Ω–æ–≤–ª–µ–Ω–∞  —Ñ—Ä–∞–∑–∞  –≤ –±–∞–ª–∞–Ω—Å–µ Ô∏è
 –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ "N <—á–∏—Å–ª–æ>" ‚Äî –ø–æ–∫—É–ø–∫–∞ –±–∏–ª–µ—Ç–æ–≤ üéüÔ∏è
 –ö–æ–º–∞–Ω–¥–∞ "–±–∞–ª–∞–Ω—Å" —Ç–µ–ø–µ—Ä—å –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏–ª–µ—Ç–æ–≤
 –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –æ—à–∏–±–∫–∞ —Å –ø–æ–∫—É–ø–∫–æ–π 1 –±–∏–ª–µ—Ç–∞
 –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ—Ç–µ—Ä–µ–∏
"""


async def handle_level_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        with open("levels_price.json", "r", encoding="utf-8") as f:
            prices = json.load(f)
    except FileNotFoundError:
        prices = {}

    lines = [
        "üìä *–£—Ä–æ–≤–Ω–∏*",
        "–£—Ä–æ–≤–µ–Ω—å —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Ñ–∞—Ä–º –ø–µ—á–µ–Ω–µ–∫ –∏ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏. "
        "_–î–ª—è –ø—Ä–æ–∫–∞—á–∫–∏ –≤—ã—Å–æ–∫–∏—Ö —É—Ä–æ–≤–Ω–µ–π –ø–æ—Ç—Ä–µ–±—É—é—Ç—Å—è —Ä–µ—Å—É—Ä—Å—ã._\n"
    ]

    for level in range(1, 21):
        min_amt, max_amt, chances = level_config[level]
        chance_str = "/".join(f"{round(p * 100)}" for p in chances)
        price = prices.get(str(level), "üö´" if level == 1 else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        lines.append(f"*{level} —É—Ä*: {min_amt}‚Äì{max_amt} üç™ –≤ –¥–µ–Ω—å | —à–∞–Ω—Å: {chance_str}% | —Ü–µ–Ω–∞: {price}")

    lines.append("\nüìâ *–û—Ç–∫—É–ø –æ—Ç –ø–æ—Ä–∞–∂–µ–Ω–∏—è*")
    lines.append("–î–æ—Å—Ç—É–ø–µ–Ω –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –Ω—É–∂–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è. –¶–µ–Ω–∞ ‚Äî –≤ 2 —Ä–∞–∑–∞ –Ω–∏–∂–µ.\n")
    lines.append("*–§–æ—Ä–º–∞—Ç:* `(–°—Ç—É–ø–µ–Ω—å ‚Äî –≠—Ç–∞–ø) : –£—Ä–æ–≤–µ–Ω—å`")
    lines.append("""
üìå *–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞*
- 1 —Å—Ç. : 2 —É—Ä
- 2 —Å—Ç. : 4 —É—Ä
- 3 —Å—Ç. : 6 —É—Ä
- –§–∏–Ω–∞–ª –ü–≠ : 8 —É—Ä

üìå *–û—Å–Ω–æ–≤–Ω–æ–π —ç—Ç–∞–ø*
- 1 —ç—Ç–∞–ø : 10 —É—Ä
- 2 —ç—Ç–∞–ø : 12 —É—Ä
- 3 —ç—Ç–∞–ø : 14 —É—Ä
- –§–∏–Ω–∞–ª : üö´ –æ—Ç–∫—É–ø –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
""")



    await update.message.reply_text("\n".join(lines), parse_mode="Markdown")
SHOP_INFO = """üõçÔ∏è *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ú–∞–≥–∞–∑–∏–Ω –ü–µ—á–µ–Ω–µ–∫!*
–¢–µ–ø–µ—Ä—å –∑–∞ –ü–µ—á–µ–Ω—å–∫–∏ —Ç–∞–∫–∂–µ –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å:
üç™ 3 —á–∞—Å–∞ —É —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é –Ω–∞ *C++*  
üí∞ –¶–µ–Ω–∞: *4000 –ø–µ—á–µ–Ω–µ–∫*
üç™ 2 —á–∞—Å–∞ —É —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ –ø–æ *C#*  
üí∞ –¶–µ–Ω–∞: *3000 –ø–µ—á–µ–Ω–µ–∫*
üç™ 2 —á–∞—Å–∞ —É —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ –ø–æ *Python*  
üí∞ –¶–µ–Ω–∞: *2000 –ø–µ—á–µ–Ω–µ–∫*
üìà 3 —á–∞—Å–∞ —É —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ –ø–æ *–¶–µ–Ω–Ω—ã–º –ë—É–º–∞–≥–∞–º, –±–∏—Ä–∂–∞–º, —Ç—Ä–µ–π–¥–∏–Ω–≥—É, –∞–∫—Ü–∏—è–º –∏ –∑–∞—Ä–∞–±–æ—Ç–∫—É –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ*  
üí∞ –¶–µ–Ω–∞: *5000 –ø–µ—á–µ–Ω–µ–∫*
üéÅ *–°–∫–∏–¥–∫–∞ 50%* –Ω–∞ —á–∞—Å—ã —É —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞  
üí∞ –¶–µ–Ω–∞: *1 ‚òòÔ∏è* –∏–ª–∏ *5000 –ø–µ—á–µ–Ω–µ–∫*
ü™ú –ú–µ—Å—Ç–æ –Ω–∞ –≤—Ç–æ—Ä–æ–π —Å—Ç—É–ø–µ–Ω–∏ *–±–µ–∑ —Å—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –ø–µ—Ä–≤–æ–π*  
üí∞ –¶–µ–Ω–∞: *100 –ø–µ—á–µ–Ω–µ–∫*
üèÜ –ú–µ—Å—Ç–æ –≤ –§–∏–Ω–∞–ª–µ –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≠—Ç–∞–ø–∞ *–±–µ–∑ —Å—Ä–∞–∂–µ–Ω–∏–π –Ω–∞ —Å—Ç—É–ø–µ–Ω—è—Ö*  
üí∞ –¶–µ–Ω–∞: *200 –ø–µ—á–µ–Ω–µ–∫*
üéØ –ú–µ—Å—Ç–æ –≤ –ü–µ—Ä–≤–æ–º –≠—Ç–∞–ø–µ *–±–µ–∑ —É—á–∞—Å—Ç–∏—è –≤ –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—å–Ω–æ–º*  
üí∞ –¶–µ–Ω–∞: *300 –ø–µ—á–µ–Ω–µ–∫*
üíé –ë–æ–Ω—É—Å-–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ:  
–ü—Ä–æ–¥–∞–º *1 ‚òòÔ∏è* –ø–µ—Ä–≤–æ–º—É –∂–µ–ª–∞—é—â–µ–º—É ‚Äî *–≤—Å–µ–≥–æ –∑–∞ 2 –∏–∑—É–º—Ä—É–¥–∞*!
üì© –î–ª—è –ø–æ–∫—É–ø–∫–∏ –ø–∏—à–∏—Ç–µ *–ê–¥–∏–Ω—É* ‚Äî `@hto_i_taki` (–Ø–≥–∞–º–∏)
"""


TRANSACTION_LOG_FILE = "transactions.json"

def log_transaction(entry: dict):
    try:
        with open(TRANSACTION_LOG_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        data = []

    data.append(entry)

    with open(TRANSACTION_LOG_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

level_config = {
    1: (0, 2, [0.49, 0.5, 0.01]),
    2: (0, 2, [0.19, 0.8, 0.01]),
    3: (0, 2, [0.19, 0.4, 0.41]),
    4: (0, 4, [0.09, 0.25, 0.25, 0.4, 0.01]),
    5: (1, 4, [0.19, 0.3, 0.5,0.01]),
    6: (1, 4, [0.05, 0.4, 0.4, 0.15]),
    7: (2, 4, [0.4, 0.4,0.2]),
    8: (2, 5, [0.2, 0.4,0.3,0.1]),
    9: (2, 5, [0.1, 0.3,0.4,0.2]),
    10: (2, 6, [0.1, 0.2, 0.5, 0.15, 0.05]),
    11: (3, 7, [0.1, 0.2, 0.5, 0.15, 0.05]),
    12: (3, 7, [0.1, 0.15, 0.55, 0.15, 0.05]),
    13: (3, 7, [0.05, 0.2, 0.55, 0.15, 0.05]),
    14: (3, 7, [0.05, 0.15, 0.6, 0.15, 0.05]),
    15: (4, 7, [0.15, 0.6, 0.15, 0.1]),
    16: (4, 7, [0.1, 0.6, 0.2, 0.1]),
    17: (4, 7, [0.05, 0.65, 0.2, 0.1]),
    18: (5, 7, [0.7, 0.2, 0.1]),
    19: (5, 7, [0.6, 0.3, 0.1]),
    20: (5, 7, [0.5, 0.4, 0.1]),

}
if __name__ == '__main__':
    threading.Thread(target=start_dummy_server).start()
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, main_handler))
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

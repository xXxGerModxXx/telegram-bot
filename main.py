
import sys  # <-- –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω—É–∂–µ–Ω –¥–ª—è sys.exit
import logging
from telegram import Update

import threading
from flask import Flask
import os

# üîê –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
logging.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")  # —ç—Ç–æ –±—É–¥–µ—Ç –≤—ã–≤–µ–¥–µ–Ω–æ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
ADMIN_CHAT_ID = 844673891  # –¢–≤–æ–π chat_id

if "RUNNING" in os.environ:
    logging.error("–ü–æ—Ö–æ–∂–µ, –±–æ—Ç —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç. –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å.")
    sys.exit(1)
os.environ["RUNNING"] = "true"

# ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# üìâ –û—Ç–∫–ª—é—á–∞–µ–º –ª–∏—à–Ω–∏–µ –ª–æ–≥–∏
logging.getLogger("httpx").setLevel(logging.WARNING)
logging.getLogger("asyncio").setLevel(logging.WARNING)

# üîë –ö–æ–Ω—Ñ–∏–≥–∏
TOKEN = "7604409638:AAHFrSALESjELw4y5aA-L3fAs8jwdQyzYuo"
BALANCE_FILE = '–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ/balances.json'
ADMIN_USERNAME = "hto_i_taki"  # –±–µ–∑ @

# ... –¥–∞–ª—å—à–µ —Ç–≤–æ–π –∫–æ–¥



CURRENCIES = {
    "–ø–µ—á–µ–Ω—å–∫–∏": "üç™",
    "—Ç—Ä–∏–ª–∏—Å—Ç–Ω–∏–∫–∏": "‚òòÔ∏è",
    "—á–µ—Ç—ã—Ä—ë—Ö–ª–∏—Å—Ç–Ω–∏–∫–∏": "üçÄ"
}
LOTTERY_FILE = '–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ/lottery.json'
# Flask-–∑–∞–≥–ª—É—à–∫–∞
flask_app = Flask(__name__)

@flask_app.route("/")
def home():
    return "OK"

def start_dummy_server():
    flask_app.run(host="0.0.0.0", port=10000)

# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===



LEVELS_PRICE_FILE = '–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ/levels_price.json'

from telegram.ext import ApplicationBuilder, MessageHandler, CommandHandler, ContextTypes, filters


async def handle_level_up(update: Update, context: ContextTypes.DEFAULT_TYPE):
    username = get_username_from_message(update.message)
    user_balances = load_balance(username)

    if user_balances is None:
        await update.message.reply_text("–¢—ã –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ. –ü–æ–ª—É—á–∏ —Å–Ω–∞—á–∞–ª–∞ –ø–µ—á–µ–Ω—å–∫–∏!")
        return

    current_level = user_balances.get("—É—Ä–æ–≤–µ–Ω—å", 1)
    if current_level >= 20:
        await update.message.reply_text("–¢—ã —É–∂–µ –¥–æ—Å—Ç–∏–≥ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è!")
        return

    # ‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å —Ü–µ–Ω–∞–º–∏
    levels_price = {}
    docs = db.collection("levels_price").stream()
    for doc in docs:
        levels_price[doc.id] = doc.to_dict().get("—Ü–µ–Ω–∞")

    next_level = str(current_level + 1)
    price = levels_price.get(next_level)
    if price is None:
        await update.message.reply_text("–ù–µ –º–æ–≥—É –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ü–µ–Ω—É –ø–æ–≤—ã—à–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è.")
        return

    # –ù–∞–≤—ã–∫ "–°—Ç—Ä–∞—Ç–µ–≥" ‚Äî —Å–∫–∏–¥–∫–∞ –Ω–∞ —Ü–µ–Ω—É –ø–µ—á–µ–Ω–µ–∫
    strategy_level = user_balances.get("–Ω–∞–≤—ã–∫–∏", {}).get("–°—Ç—Ä–∞—Ç–µ–≥", 0)
    discount_percent = min(strategy_level * 5, 50)  # –º–∞–∫—Å–∏–º—É–º 50%
    discounted_price = int(price * (100 - discount_percent) / 100)

    current_cookies = user_balances.get("–ø–µ—á–µ–Ω—å–∫–∏", 0)
    resources_str = user_balances.get("—Ä–µ—Å—É—Ä—Å—ã", "0/0/0/0/0/0/0")
    resources = list(map(int, resources_str.split('/')))

    gold_cookies_index = list(RESOURCES.keys()).index("—Ä")
    diamonds_index = list(RESOURCES.keys()).index("–∞")

    required_gold_cookies = 10 * (current_level - 9) if current_level >= 10 else 0
    required_diamonds = 10 * (current_level - 9) if current_level >= 10 else 0

    if current_level >= 10:
        if resources[gold_cookies_index] < required_gold_cookies:
            await update.message.reply_text(
                f"‚ùó –î–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –¥–æ {next_level} —É—Ä–æ–≤–Ω—è –Ω—É–∂–Ω–æ {required_gold_cookies} –∑–æ–ª–æ—Ç—ã—Ö –ø–µ—á–µ–Ω–µ–∫.")
            return
        if resources[diamonds_index] < required_diamonds:
            await update.message.reply_text(
                f"‚ùó –î–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –¥–æ {next_level} —É—Ä–æ–≤–Ω—è –Ω—É–∂–Ω–æ {required_diamonds} –∞–ª–º–∞–∑–æ–≤.")
            return

    if current_cookies < discounted_price:
        await update.message.reply_text(
            f"‚ùó –î–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –¥–æ {next_level} —É—Ä–æ–≤–Ω—è –Ω—É–∂–Ω–æ {discounted_price} üç™ –ø–µ—á–µ–Ω–µ–∫ (—Å —É—á—ë—Ç–æ–º —Å–∫–∏–¥–∫–∏ –°—Ç—Ä–∞—Ç–µ–≥–∞).")
        return

    user_balances["–ø–µ—á–µ–Ω—å–∫–∏"] = current_cookies - discounted_price
    if current_level >= 10:
        resources[gold_cookies_index] -= required_gold_cookies
        resources[diamonds_index] -= required_diamonds

    user_balances["—É—Ä–æ–≤–µ–Ω—å"] = current_level + 1
    user_balances["—Ä–µ—Å—É—Ä—Å—ã"] = "/".join(map(str, resources))
    save_balance(username, user_balances)

    try:
        log_transaction({
            "timestamp": datetime.datetime.now(datetime.UTC).isoformat(),
            "type": "–ø–æ–≤—ã—Å–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å",
            "username": username,
            "from_level": current_level,
            "to_level": current_level + 1,
            "cookies_spent": discounted_price,
            "gold_cookies_spent": required_gold_cookies,
            "diamonds_spent": required_diamonds
        })
    except Exception as e:
        print(f"[–õ–æ–≥ –æ—à–∏–±–∫–∞] –£—Ä–æ–≤–µ–Ω—å: {e}")

    await update.message.reply_text(
        f"üéâ {username}, —Ç—ã –ø–æ–≤—ã—Å–∏–ª —É—Ä–æ–≤–µ–Ω—å –¥–æ {next_level}!\n"
        f"–¢—ã –ø–æ—Ç—Ä–∞—Ç–∏–ª {discounted_price} üç™ –ø–µ—á–µ–Ω–µ–∫"
        + (f", {required_gold_cookies} –∑–æ–ª–æ—Ç—ã—Ö –ø–µ—á–µ–Ω–µ–∫ –∏ {required_diamonds} –∞–ª–º–∞–∑–æ–≤!" if current_level >= 10 else "!")
    )


def load_levels_price():
    if not os.path.exists(LEVELS_PRICE_FILE):
        # –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞–¥–∏–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ —Ü–µ–Ω—ã (10 –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–≤–Ω—è —Å 2 –ø–æ 10)
        default_prices = {str(i): 10 for i in range(2, 11)}
        save_levels_price(default_prices)
        return default_prices
    with open(LEVELS_PRICE_FILE, 'r', encoding='utf-8') as f:
        return json.load(f)




def save_levels_price(data):
    with open(LEVELS_PRICE_FILE, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

async def handle_update_prices(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.from_user.username != ADMIN_USERNAME:
        await update.message.reply_text("–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    text = update.message.text.strip()
    parts = text.split(maxsplit=2)
    if len(parts) < 3:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –Ω–æ–≤—ã–µ —Ü–µ–Ω—ã 10/10/10/10/10/10/10/10/10")
        return

    prices_str = parts[2]
    prices_list = prices_str.split('/')
    if len(prices_list) != 9:
        await update.message.reply_text("–î–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–æ–≤–Ω–æ 9 —Ü–µ–Ω –¥–ª—è —É—Ä–æ–≤–Ω–µ–π 2-10.")
        return

    try:
        prices = [int(p) for p in prices_list]
    except ValueError:
        await update.message.reply_text("–í—Å–µ —Ü–µ–Ω—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ü–µ–ª—ã–º–∏ —á–∏—Å–ª–∞–º–∏.")
        return

    new_prices = {str(level): price for level, price in zip(range(2, 11), prices)}
    db.collection("levels_price").document("data").set(new_prices)

    await update.message.reply_text(f"–¶–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {prices_str}")

lottery_lock = threading.Lock()




import threading
import datetime
from telegram import Message, Update


import firebase_admin
from firebase_admin import credentials, firestore

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è (–æ–¥–∏–Ω —Ä–∞–∑)
cred = credentials.Certificate("firebase-key.json")
firebase_admin.initialize_app(cred)
db = firestore.client()
balances_ref = db.collection("balances")

def load_balance(username: str) -> dict | None:
    doc = balances_ref.document(username).get()
    return doc.to_dict() if doc.exists else None

def save_balance(username: str, data: dict):
    balances_ref.document(username).set(data, merge=True)




def get_username_from_message(msg: Message) -> str:
    return f"@{msg.from_user.username}" if msg.from_user.username else f"id{msg.from_user.id}"

def get_currency_from_text(text: str) -> str:
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–∞–ª—é—Ç—É –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É –≤ —Ç–µ–∫—Å—Ç–µ, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ - –ø–µ—á–µ–Ω—å–∫–∏
    for curr in CURRENCIES.keys():
        if curr in text:
            return curr
    return "–ø–µ—á–µ–Ω—å–∫–∏"

async def handle_balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    username = get_username_from_message(update.message)
    user_balances = load_balance(username)

    if user_balances is None:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–æ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞
        user_balances = {
            "—É—Ä–æ–≤–µ–Ω—å": 1,
            **{curr: 0 for curr in CURRENCIES},
            "—Ä–µ—Å—É—Ä—Å—ã": "0/0/0/0/0/0/0"
        }
        save_balance(username, user_balances)

    level = user_balances.get("—É—Ä–æ–≤–µ–Ω—å", 1)

    lines = [f"–ú–∏–ª–∞—à–∫–∞ {username}, –≤–æ—Ç —Ç–≤–æ–π –±–∞–ª–∞–Ω—Å:",
             f"–£—Ä–æ–≤–µ–Ω—å: {level}"]

    for curr, emoji in CURRENCIES.items():
        amount = user_balances.get(curr, 0)
        lines.append(f"{amount} {curr} {emoji}")

    # üéü –î–æ–±–∞–≤–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏–ª–µ—Ç–æ–≤ –∏–∑ –ª–æ—Ç–µ—Ä–µ–∏
    lottery = load_lottery_firestore()
    ticket_range = lottery.get(username)
    if ticket_range and isinstance(ticket_range, list) and len(ticket_range) == 2:
        ticket_count = ticket_range[1] - ticket_range[0] + 1
        if ticket_count > 0:
            lines.append(f"{ticket_count} –ª–æ—Ç–µ—Ä–µ–π–Ω—ã—Ö –±–∏–ª–µ—Ç–æ–≤ üéüÔ∏è ")

    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
    resources_str = user_balances.get("—Ä–µ—Å—É—Ä—Å—ã", "0/0/0/0/0/0/0")
    resources = list(map(int, resources_str.split('/')))

    lines.append("\n–†–µ—Å—É—Ä—Å—ã:")
    for resource_short, resource_name in RESOURCES.items():
        index = list(RESOURCES.keys()).index(resource_short)
        amount = resources[index]
        limit = RESOURCE_LIMITS[resource_short](level)  # –ü–æ–ª—É—á–∞–µ–º –ª–∏–º–∏—Ç –¥–ª—è —Ä–µ—Å—É—Ä—Å–∞
        lines.append(f"  {amount}/{limit} {resource_name} ({resource_short})")
    if random.randint(1,100)<chanse_balance:
        await update.message.reply_text(f"\n –ø—Ä–æ–º–æ–∫–æ–¥: {PROMO}\n".join(lines))
    else:
        await update.message.reply_text("\n".join(lines))

def can_farm_today(last_farm_str: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ —Ñ–∞—Ä–º–∏—Ç—å —Å–µ–≥–æ–¥–Ω—è, —Å—Ä–∞–≤–Ω–∏–≤–∞—è –¥–∞—Ç—ã"""
    if not last_farm_str:
        return True
    try:
        last_farm = datetime.strptime(last_farm_str, "%H:%M %d-%m-%Y")
    except Exception:
        return True  # –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ —Å–æ–≤–ø–∞–ª, —Ä–∞–∑—Ä–µ—à–∞–µ–º —Ñ–∞—Ä–º

    now = datetime.now()
    return now.date() > last_farm.date()


from datetime import timedelta, timezone

moscow_tz = timezone(timedelta(hours=3))

async def handle_want_cookies(update: Update, context: ContextTypes.DEFAULT_TYPE):
    username = get_username_from_message(update.message)
    user_balances = load_balance(username)

    if user_balances is None:
        user_balances = {
            "—É—Ä–æ–≤–µ–Ω—å": 1,
            **{curr: 0 for curr in CURRENCIES},
            "—Ä–µ—Å—É—Ä—Å—ã": "0/0/0/0/0/0/0",
            "–ø–æ—Å–ª–µ–¥–Ω–∏–π —Ñ–∞—Ä–º": ""
        }
        save_balance(username, user_balances)

    last_farm_str = user_balances.get("–ø–æ—Å–ª–µ–¥–Ω–∏–π —Ñ–∞—Ä–º", "")
    if not can_farm_today(last_farm_str):
        await update.message.reply_text("–í—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª–∏ –ø–µ—á–µ–Ω—å–∫–∏ —Å–µ–≥–æ–¥–Ω—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞!")
        return

    level = user_balances.get("—É—Ä–æ–≤–µ–Ω—å", 1)
    resources_str = user_balances.get("—Ä–µ—Å—É—Ä—Å—ã", "0/0/0/0/0/0/0")
    resources = list(map(int, resources_str.split('/')))
    messages = []

    def try_add_resource(index: int, amount: int, resource_code: str, message_text: str):
        limit = RESOURCE_LIMITS[resource_code](level)
        before = resources[index]
        after = min(before + amount, limit)
        added = after - before
        if added > 0:
            resources[index] = after
            messages.append(message_text.replace("{count}", str(added)))

    # === –†–∞—Å—á—ë—Ç –ø–µ—á–µ–Ω–µ–∫ —Å —É—á—ë—Ç–æ–º –Ω–∞–≤—ã–∫–∞ "–õ—É–¥–æ–º–∞–Ω" ===
    cookies = get_cookies_by_level(level, user_balances)

    level_ludoman = user_balances.get("–Ω–∞–≤—ã–∫–∏", {}).get("–õ—É–¥–æ–º–∞–Ω", 0)
    if level_ludoman > 0:
        fluctuation_percent = 2 * level_ludoman
        min_multiplier = 100 - fluctuation_percent
        max_multiplier = 100 + fluctuation_percent
        multiplier = random.randint(min_multiplier, max_multiplier) / 100
        cookies = int(cookies * multiplier)

    user_balances["–ø–µ—á–µ–Ω—å–∫–∏"] = user_balances.get("–ø–µ—á–µ–Ω—å–∫–∏", 0) + cookies

    # === –ù–∞–≤—ã–∫ "–ë–µ—Å–∫–æ–Ω–µ—á–Ω–æ–µ –ü–µ—á–µ–Ω—å–µ" ===
    level_infinite_cookies = user_balances.get("–Ω–∞–≤—ã–∫–∏", {}).get("–ë–µ—Å–∫–æ–Ω–µ—á–Ω–æ–µ –ü–µ—á–µ–Ω—å–µ", 0)
    if level_infinite_cookies > 0:
        guaranteed_cookies = min(level_infinite_cookies, 10)
        user_balances["–ø–µ—á–µ–Ω—å–∫–∏"] += guaranteed_cookies
        messages.append(f"üç™ –ù–∞–≤—ã–∫ '–ë–µ—Å–∫–æ–Ω–µ—á–Ω–æ–µ –ü–µ—á–µ–Ω—å–µ' –ø–æ–¥–∞—Ä–∏–ª —Ç–µ–±–µ {guaranteed_cookies} –ø–µ—á–µ–Ω–µ–∫!")

    # === –ù–∞–≤—ã–∫ "–ñ–µ–ª–µ–∑–Ω—ã–π –ì–æ–ª–µ–º" ===
    level_iron_golem = user_balances.get("–Ω–∞–≤—ã–∫–∏", {}).get("–ñ–µ–ª–µ–∑–Ω—ã–π –ì–æ–ª–µ–º", 0)
    if level_iron_golem > 0:
        extra_chance = level_iron_golem * 10
        iron_bonus = extra_chance // 100
        iron_remainder = extra_chance % 100
        if iron_bonus > 0:
            try_add_resource(2, iron_bonus, "–∂", f"üí™ –ñ–µ–ª–µ–∑–Ω—ã–π –ì–æ–ª–µ–º —Å—Ä–∞–±–æ—Ç–∞–ª! +{iron_bonus} –∂–µ–ª–µ–∑–∞.")
        if random.randint(1, 100) <= iron_remainder:
            try_add_resource(2, 1, "–∂", "üí™ –ñ–µ–ª–µ–∑–Ω—ã–π –ì–æ–ª–µ–º —Å—Ä–∞–±–æ—Ç–∞–ª! +1 –∂–µ–ª–µ–∑–æ.")

    # === –ù–∞–≤—ã–∫ "–î–∞—Ä –ø—Ä–∏—Ä–æ–¥—ã" ===
    level_nature_gift = user_balances.get("–Ω–∞–≤—ã–∫–∏", {}).get("–î–∞—Ä –ø—Ä–∏—Ä–æ–¥—ã", 0)
    if level_nature_gift > 0:
        chance = 15 * level_nature_gift
        guaranteed = chance // 100
        remainder = chance % 100
        if guaranteed > 0:
            try_add_resource(1, guaranteed, "–ø", f"üåø –î–∞—Ä –ø—Ä–∏—Ä–æ–¥—ã —Å—Ä–∞–±–æ—Ç–∞–ª! +{guaranteed} –ø—à–µ–Ω–∏—Ü.")
        if random.randint(1, 100) <= remainder:
            try_add_resource(1, 1, "–ø", f"üåø –î–∞—Ä –ø—Ä–∏—Ä–æ–¥—ã —Å—Ä–∞–±–æ—Ç–∞–ª! +1 –ø—à–µ–Ω–∏—Ü–∞.")

    # === –ù–∞–≤—ã–∫ "–ì–ª–∞–∑ –ê–ª–º–∞–∑" ===
    level_eye_diamond = user_balances.get("–Ω–∞–≤—ã–∫–∏", {}).get("–ì–ª–∞–∑ –ê–ª–º–∞–∑", 0)
    if level_eye_diamond > 0:
        chance = level_eye_diamond
        if random.randint(1, 100) <= chance:
            try_add_resource(3, 1, "–∞", f"üíé –ì–ª–∞–∑ –ê–ª–º–∞–∑ —Å—Ä–∞–±–æ—Ç–∞–ª! +1 –∞–ª–º–∞–∑.")

    # === –ù–∞–≤—ã–∫ "–§–∞—Ä–º-–º–∞–Ω—å—è–∫" ===
    level_farm_maniac = user_balances.get("–Ω–∞–≤—ã–∫–∏", {}).get("–§–∞—Ä–º-–º–∞–Ω—å—è–∫", 0)
    if level_farm_maniac > 0:
        chance = 10 + level_farm_maniac * 5
        possible_resources = [0, 1, 2, 3, 4]
        if random.randint(1, 100) <= chance:
            res_index = random.choice(possible_resources)
            resource_code = list(RESOURCES.keys())[res_index]
            try_add_resource(res_index, 1, resource_code,
                             f"üî• –§–∞—Ä–º-–º–∞–Ω—å—è–∫ —Å—Ä–∞–±–æ—Ç–∞–ª! +1 {RESOURCES[resource_code]}. (–®–∞–Ω—Å: {chance}%)")

    # === –ù–∞–≤—ã–∫ "–£–¥–∞—á–ª–∏–≤—ã–π" ===
    level_lucky = user_balances.get("–Ω–∞–≤—ã–∫–∏", {}).get("–£–¥–∞—á–ª–∏–≤—ã–π", 0)
    if level_lucky > 0:
        chance = (level_lucky // 5) + 2
        amount = (level_lucky // 5) + 1
        if random.randint(1, 100) <= chance:
            try_add_resource(5, amount, "–∏", f"üçÄ –ù–∞–≤—ã–∫ '–£–¥–∞—á–ª–∏–≤—ã–π' —Å—Ä–∞–±–æ—Ç–∞–ª! +{amount} –∏–∑—É–º—Ä—É–¥–∞(–æ–≤).")

    # === –®–∞–Ω—Å—ã –Ω–∞ —Ä–µ—Å—É—Ä—Å—ã –ø–æ —É—Ä–æ–≤–Ω—é ===
    if level >= 2:
        gold_chance = max(0, 25 - 5 * level)
        if random.randint(1, 100) <= gold_chance:
            try_add_resource(4, 1, "–∑", f"–í—ã –ø–æ–ª—É—á–∏–ª–∏ {{count}} –∑–æ–ª–æ—Ç–æ! (–®–∞–Ω—Å: {gold_chance}%)")

    iron_chance_total = 20 + 5 * level
    iron_count = iron_chance_total // 100
    if random.randint(1, 100) <= (iron_chance_total % 100):
        iron_count += 1
    if iron_count > 0:
        try_add_resource(2, iron_count, "–∂", f"–í—ã –ø–æ–ª—É—á–∏–ª–∏ {{count}} –∂–µ–ª–µ–∑–∞! (–®–∞–Ω—Å: {iron_chance_total}%)")

    if random.randint(1, 100) <= 1:
        user_balances["–ø–µ—á–µ–Ω—å–∫–∏"] += 10
        messages.append("–í—ã –ø–æ–ª—É—á–∏–ª–∏ 10 –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—á–µ–Ω–µ–∫! (–®–∞–Ω—Å: 1%)")

    wheat_chance = max(0, 50 - 5 * level)
    if random.randint(1, 100) <= wheat_chance:
        try_add_resource(1, 1, "–ø", f"–í—ã –ø–æ–ª—É—á–∏–ª–∏ {{count}} –ø—à–µ–Ω–∏—Ü—É! (–®–∞–Ω—Å: {wheat_chance}%)")

    cocoa_chance = 5
    if random.randint(1, 100) <= cocoa_chance:
        try_add_resource(0, 1, "–∫", f"–í—ã –ø–æ–ª—É—á–∏–ª–∏ {{count}} –∫–∞–∫–∞–æ-–±–æ–±! (–®–∞–Ω—Å: {cocoa_chance}%)")

    if 2 <= level <= 5:
        diamond_chance = max(0, 30 - 5 * level)
        if random.randint(1, 100) <= diamond_chance:
            try_add_resource(3, 1, "–∞", f"–í—ã –ø–æ–ª—É—á–∏–ª–∏ {{count}} –∞–ª–º–∞–∑! (–®–∞–Ω—Å: {diamond_chance}%)")

    if 1 <= level <= 10:
        emerald_chance = 3
        if random.randint(1, 100) <= emerald_chance:
            try_add_resource(5, 1, "–∏", f"–í—ã –ø–æ–ª—É—á–∏–ª–∏ {{count}} –∏–∑—É–º—Ä—É–¥! (–®–∞–Ω—Å: {emerald_chance}%)")

    user_balances["—Ä–µ—Å—É—Ä—Å—ã"] = "/".join(map(str, resources))
    level_eternal_farm = user_balances.get("–Ω–∞–≤—ã–∫–∏", {}).get("–í–µ—á–Ω—ã–π –§–∞—Ä–º", 0)
    chance_eternal = min(level_eternal_farm, 20)

    if level_eternal_farm > 0 and random.randint(1, 100) <= chance_eternal:
        messages.append(f"‚ú® –ù–∞–≤—ã–∫ '–í–µ—á–Ω—ã–π –§–∞—Ä–º' —Å—Ä–∞–±–æ—Ç–∞–ª! –í—ã –º–æ–∂–µ—Ç–µ —Ñ–∞—Ä–º–∏—Ç—å –µ—â—ë —Ä–∞–∑ —Å–µ–≥–æ–¥–Ω—è.")
    else:
        user_balances["–ø–æ—Å–ª–µ–¥–Ω–∏–π —Ñ–∞—Ä–º"] = datetime.now().strftime("%H:%M %d-%m-%Y")

    save_balance(username, user_balances)

    try:
        log_transaction({
            "timestamp": datetime.now(moscow_tz).isoformat(),
            "type": "—Ö–æ—á—É –ø–µ—á–µ–Ω—å–∫–∏",
            "from": "–±–æ—Ç",
            "to": username,
            "currency": "–ø–µ—á–µ–Ω—å–∫–∏",
            "amount": cookies
        })
    except:
        pass

    messages.insert(0, f"–í—ã –ø–æ–ª—É—á–∏–ª–∏ {cookies} üç™ –ø–µ—á–µ–Ω–µ–∫! –í–∞—à —É—Ä–æ–≤–µ–Ω—å: {level}")
    try:
        await update.message.reply_text("\n".join(messages))
    except:
        pass


async def handle_give(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.message
    text = msg.text.strip()
    recipient_tag = None
    recipient_match = re.search(r'@(\w+)', text)
    if recipient_match:
        recipient_tag = recipient_match.group(1)
    elif msg.reply_to_message and msg.reply_to_message.from_user.username:
        recipient_tag = msg.reply_to_message.from_user.username

    await debug_log_text(
        f"[GIVE] –æ—Ç {msg.from_user.username} –¥–∞—ë—Ç {text} ‚Üí {recipient_tag or '‚ùì–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}",
        context
    )

    match = re.match(r'^–¥–∞—Ç—å\s+(\d+)(?:\s+(–ø–µ—á–µ–Ω—å–∫–∏|—Ç—Ä–∏–ª–∏—Å—Ç–Ω–∏–∫–∞|—Ç—Ä–∏–ª–∏—Å—Ç–Ω–∏–∫–∏|—á–µ—Ç—ã—Ä—ë—Ö–ª–∏—Å—Ç–Ω–∏–∫–∞|—á–µ—Ç—ã—Ä—ë—Ö–ª–∏—Å—Ç–Ω–∏–∫–∏))?\b', text, re.IGNORECASE)
    if not match:
        await msg.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –¥–∞—Ç—å <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ> [–Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã]")
        return

    amount = int(match.group(1))
    if amount <= 0:
        await msg.reply_text("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
        return

    currency_text = match.group(2)
    currency = "–ø–µ—á–µ–Ω—å–∫–∏"
    if currency_text:
        currency_text = currency_text.lower()
        if currency_text in ("—Ç—Ä–∏–ª–∏—Å—Ç–Ω–∏–∫–∞", "—Ç—Ä–∏–ª–∏—Å—Ç–Ω–∏–∫–∏"):
            currency = "—Ç—Ä–∏–ª–∏—Å—Ç–Ω–∏–∫–∏"
        elif currency_text in ("—á–µ—Ç—ã—Ä—ë—Ö–ª–∏—Å—Ç–Ω–∏–∫–∞", "—á–µ—Ç—ã—Ä—ë—Ö–ª–∏—Å—Ç–Ω–∏–∫–∏"):
            currency = "—á–µ—Ç—ã—Ä—ë—Ö–ª–∏—Å—Ç–Ω–∏–∫–∏"

    recipient_tag = None
    recipient_match = re.search(r'@(\w+)', text)
    if recipient_match:
        recipient_tag = recipient_match.group(1)
    elif msg.reply_to_message and msg.reply_to_message.from_user.username:
        recipient_tag = msg.reply_to_message.from_user.username

    if not recipient_tag:
        await msg.reply_text("–£–∫–∞–∂–∏ —Ç–µ–≥ –∫—Ä–∞—Å–∞–≤—á–∏–∫–∞ –∏–ª–∏ –æ—Ç–≤–µ—Ç—å –Ω–∞ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        return

    sender = get_username_from_message(msg)
    recipient = f"@{recipient_tag}"

    if sender == recipient:
        await msg.reply_text("–ù–µ–ª—å–∑—è –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å —Å–µ–±–µ!")
        return

    sender_data = load_balance(sender)
    if sender_data is None:
        sender_data = {
            "—É—Ä–æ–≤–µ–Ω—å": 1,
            **{curr: 0 for curr in CURRENCIES},
            "—Ä–µ—Å—É—Ä—Å—ã": "0/0/0/0/0/0/0",
            "–ø–æ—Å–ª–µ–¥–Ω–∏–π —Ñ–∞—Ä–º": ""
        }
        save_balance(sender, sender_data)

    recipient_data = load_balance(recipient)
    if recipient_data is None:
        recipient_data = {
            "—É—Ä–æ–≤–µ–Ω—å": 1,
            **{curr: 0 for curr in CURRENCIES},
            "—Ä–µ—Å—É—Ä—Å—ã": "0/0/0/0/0/0/0",
            "–ø–æ—Å–ª–µ–¥–Ω–∏–π —Ñ–∞—Ä–º": ""
        }
        save_balance(recipient, recipient_data)
    sender_balances = load_balance(sender)
    recipient_balances = load_balance(recipient)

    if sender_balances.get(currency, 0) < amount:
        await msg.reply_text(f"–ö–∞–∂–µ—Ç—Å—è, –≤ –º–µ—à–æ—á–∫–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç {currency}.")
        return

    sender_balances[currency] -= amount
    recipient_balances[currency] += amount

    save_balance(sender, sender_balances)
    save_balance(recipient, recipient_balances)

    try:
        log_transaction({
            "timestamp": datetime.now(timezone(timedelta(hours=3))).isoformat(),
            "type": "–¥–∞—Ç—å",
            "from": str(sender),
            "to": str(recipient),
            "currency": currency,
            "amount": amount
        })
    except Exception:
        pass

    try:
        await msg.reply_text(f"{sender} –¥—Ä—É–∂–µ—Å–∫–∏ –æ—Ç–¥–∞–ª {amount} {currency} {CURRENCIES.get(currency, '')} {recipient}.")
    except:
        await msg.reply_text("–ü–µ—Ä–µ–¥–∞—á–∞ –ø—Ä–æ—à–ª–∞, –Ω–æ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–π.")





async def handle_give_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.message
    if msg.from_user.username != ADMIN_USERNAME:
        return

    text = msg.text.strip()
    match = re.match(r'^–¥–∞—Ä\s+(\d+)(?:\s+(–ø–µ—á–µ–Ω—å–∫–∏|—Ç—Ä–∏–ª–∏—Å—Ç–Ω–∏–∫–∞|—Ç—Ä–∏–ª–∏—Å—Ç–Ω–∏–∫–∏|—á–µ—Ç—ã—Ä—ë—Ö–ª–∏—Å—Ç–Ω–∏–∫–∞|—á–µ—Ç—ã—Ä—ë—Ö–ª–∏—Å—Ç–Ω–∏–∫–∏))?(?:\s+@(\w+))?', text, re.IGNORECASE)
    if not match:
        return

    amount = int(match.group(1))
    currency_text = match.group(2)
    recipient_tag = match.group(3)

    if currency_text:
        currency_text = currency_text.lower()
        if currency_text in ("—Ç—Ä–∏–ª–∏—Å—Ç–Ω–∏–∫–∞", "—Ç—Ä–∏–ª–∏—Å—Ç–Ω–∏–∫–∏"):
            currency = "—Ç—Ä–∏–ª–∏—Å—Ç–Ω–∏–∫–∏"
        elif currency_text in ("—á–µ—Ç—ã—Ä—ë—Ö–ª–∏—Å—Ç–Ω–∏–∫–∞", "—á–µ—Ç—ã—Ä—ë—Ö–ª–∏—Å—Ç–Ω–∏–∫–∏"):
            currency = "—á–µ—Ç—ã—Ä—ë—Ö–ª–∏—Å—Ç–Ω–∏–∫–∏"
        else:
            currency = "–ø–µ—á–µ–Ω—å–∫–∏"
    else:
        currency = "–ø–µ—á–µ–Ω—å–∫–∏"

    if not recipient_tag and msg.reply_to_message:
        reply_user = msg.reply_to_message.from_user
        if reply_user and reply_user.username:
            recipient_tag = reply_user.username

    if not recipient_tag:
        await msg.reply_text("–£–∫–∞–∂–∏ –∫—Ä–∞—Å–∞–≤—á–∏–∫–∞ –∏–ª–∏ –æ—Ç–≤–µ—Ç—å –Ω–∞ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        return

    recipient = f"@{recipient_tag}"
    recipient_balances = load_balance(recipient)

    if recipient_balances is None:
        recipient_balances = {curr: 0 for curr in CURRENCIES}

    recipient_balances[currency] = recipient_balances.get(currency, 0) + amount

    save_balance(recipient, recipient_balances)

    try:
        log_transaction({
            "timestamp": datetime.now(moscow_tz).isoformat(),
            "type": "–¥–∞—Ä",
            "from": "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è",
            "to": recipient,
            "currency": currency,
            "amount": amount
        })
    except:
        pass  # –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –ø–æ–º–µ—à–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é

    try:
        await msg.reply_text(f"{recipient} –Ω–∞–≥—Ä–∞–∂–¥–∞–µ—Ç—Å—è {amount} {currency} {CURRENCIES.get(currency, '')} –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏")
    except:
        await msg.reply_text("–ü–µ—Ä–µ–¥–∞—á–∞ –ø—Ä–æ—à–ª–∞, –Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å.")





async def handle_take_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.message
    if msg.from_user.username != ADMIN_USERNAME:
        return

    text = msg.text.strip()
    match = re.match(
        r'^–æ—Ç–Ω—è—Ç—å\s+(\d+)(?:\s+(–ø–µ—á–µ–Ω—å–∫–∏|—Ç—Ä–∏–ª–∏—Å—Ç–Ω–∏–∫–∞|—Ç—Ä–∏–ª–∏—Å—Ç–Ω–∏–∫–∏|—á–µ—Ç—ã—Ä—ë—Ö–ª–∏—Å—Ç–Ω–∏–∫–∞|—á–µ—Ç—ã—Ä—ë—Ö–ª–∏—Å—Ç–Ω–∏–∫–∏))?(?:\s+@(\w+))?',
        text, re.IGNORECASE
    )
    if not match:
        return

    amount = int(match.group(1))
    currency_text = match.group(2)
    recipient_tag = match.group(3)

    if currency_text:
        currency_text = currency_text.lower()
        if currency_text in ("—Ç—Ä–∏–ª–∏—Å—Ç–Ω–∏–∫–∞", "—Ç—Ä–∏–ª–∏—Å—Ç–Ω–∏–∫–∏"):
            currency = "—Ç—Ä–∏–ª–∏—Å—Ç–Ω–∏–∫–∏"
        elif currency_text in ("—á–µ—Ç—ã—Ä—ë—Ö–ª–∏—Å—Ç–Ω–∏–∫–∞", "—á–µ—Ç—ã—Ä—ë—Ö–ª–∏—Å—Ç–Ω–∏–∫–∏"):
            currency = "—á–µ—Ç—ã—Ä—ë—Ö–ª–∏—Å—Ç–Ω–∏–∫–∏"
        else:
            currency = "–ø–µ—á–µ–Ω—å–∫–∏"
    else:
        currency = "–ø–µ—á–µ–Ω—å–∫–∏"

    if not recipient_tag and msg.reply_to_message:
        reply_user = msg.reply_to_message.from_user
        if reply_user and reply_user.username:
            recipient_tag = reply_user.username

    if not recipient_tag:
        await msg.reply_text("–£–∫–∞–∂–∏ –∫—Ä–∞—Å–∞–≤—á–∏–∫–∞ –∏–ª–∏ –æ—Ç–≤–µ—Ç—å –Ω–∞ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        return

    recipient = f"@{recipient_tag}"
    recipient_balances = load_balance(recipient)

    if recipient_balances is None:
        recipient_balances = {curr: 0 for curr in CURRENCIES}

    current = recipient_balances.get(currency, 0)
    recipient_balances[currency] = max(0, current - amount)

    save_balance(recipient, recipient_balances)

    try:
        log_transaction({
            "timestamp": datetime.now(moscow_tz).isoformat(),
            "type": "–æ—Ç–Ω—è—Ç—å",
            "from": "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è",
            "to": recipient,
            "currency": currency,
            "amount": amount
        })
    except:
        pass  # –µ—Å–ª–∏ –ª–æ–≥ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª ‚Äî –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º

    try:
        await msg.reply_text(f"{recipient} –ª–∏—à–∏–ª—Å—è {amount} {currency} {CURRENCIES.get(currency, '')}")
    except:
        await msg.reply_text("–ü–µ—á–µ–Ω—å–∫–∏ –æ—Ç–Ω—è—Ç—ã, –Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–æ—Å—å.")



async def handle_save_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if get_username_from_message(update.message) != f"@{ADMIN_USERNAME}":
        return

    admin_chat_id = 844673891

    try:
        # üîÑ –ë–∞–ª–∞–Ω—Å
        all_docs = balances_ref.stream()
        balances = {doc.id: doc.to_dict() for doc in all_docs}
        balance_content = json.dumps(balances, ensure_ascii=False, indent=2)

        # üìà –¶–µ–Ω—ã —É—Ä–æ–≤–Ω–µ–π
        levels_collection = db.collection("levels_price").stream()
        levels_dict = {doc.id: doc.to_dict().get("—Ü–µ–Ω–∞") for doc in levels_collection}
        levels_content = json.dumps(levels_dict, ensure_ascii=False, indent=2)

        # üéüÔ∏è –õ–æ—Ç–µ—Ä–µ—è
        lottery = load_lottery_firestore()
        lottery_content = json.dumps(lottery, ensure_ascii=False, indent=2)

        # üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        for title, content in [("–ë–∞–ª–∞–Ω—Å", balance_content), ("–¶–µ–Ω—ã —É—Ä–æ–≤–Ω–µ–π", levels_content),
                               ("–õ–æ—Ç–µ—Ä–µ—è", lottery_content)]:
            if len(content) <= 4000:
                await context.bot.send_message(
                    chat_id=admin_chat_id,
                    text=f"üìÇ *{title}*\n```json\n{content}\n```",
                    parse_mode="Markdown"
                )
            else:
                temp_path = f"{title}.json"
                with open(temp_path, "w", encoding="utf-8") as f:
                    f.write(content)
                await context.bot.send_document(chat_id=admin_chat_id, document=open(temp_path, "rb"))
                os.remove(temp_path)

    except Exception as e:
        await context.bot.send_message(chat_id=admin_chat_id, text=f"‚ùå –û—à–∏–±–∫–∞: {e}")




async def handle_clear_lottery(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if get_username_from_message(update.message) != f"@{ADMIN_USERNAME}":
        await update.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞.")
        return

    docs = db.collection("lottery").stream()
    for doc in docs:
        db.collection("lottery").document(doc.id).delete()

    await update.message.reply_text("üéüÔ∏è –í—Å–µ –±–∏–ª–µ—Ç—ã –ª–æ—Ç–µ—Ä–µ–∏ –æ—á–∏—â–µ–Ω—ã.")



async def handle_average_cookies(update: Update, context: ContextTypes.DEFAULT_TYPE):
    all_docs = balances_ref.stream()
    balances = {doc.id: doc.to_dict() for doc in all_docs}
    if not balances:
        await update.message.reply_text("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –±–∞–ª–∞–Ω—Å—É.")
        return

    excluded_users = {"@hto_i_taki", "@Shittttt", "@zZardexe", "@insanemaloy"}

    total = 0
    count = 0
    for user, user_balances in balances.items():
        if user in excluded_users:
            continue
        cookies = user_balances.get("–ø–µ—á–µ–Ω—å–∫–∏", 0)
        total += cookies
        count += 1

    if count == 0:
        await update.message.reply_text("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–µ—á–µ–Ω—å–∫–∞–º–∏ (–ø–æ—Å–ª–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è).")
        return

    average = total / count
    await update.message.reply_text(f"–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—á–µ–Ω–µ–∫ —É –º–∏–ª–∞—Ö (–±–µ–∑ –∫—Ä—É—Ç—ã—Ö –∞–¥–º–∏–Ω–æ–≤): {average:.2f} üç™")
async def handle_commands(update: Update, context: ContextTypes.DEFAULT_TYPE):
    username = get_username_from_message(update.message)
    is_admin = (username == f"@{ADMIN_USERNAME}")



    # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞–∂–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥—ã –±–µ–∑ –ø–æ–º–µ—Ç–∫–∏ (–∞–¥–º–∏–Ω)
    if not is_admin:
        filtered_commands = {cmd: desc for cmd, desc in commands_common.items() if "(–∞–¥–º–∏–Ω)" not in desc}
    else:
        filtered_commands = commands_common

    lines = ["–¢–µ–±–µ –∫—Ä–∞—Å–∞–≤—á–∏–∫ –¥–æ—Å—Ç—É–ø–Ω–æ–µ —Å–ª–µ–¥—É—é—â–µ–µ:"]
    for cmd, desc in filtered_commands.items():
        lines.append(f"{cmd} ‚Äî {desc}")

    await update.message.reply_text("\n".join(lines))
async def handle_commands_not_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    filtered_commands = {cmd: desc for cmd, desc in commands_common.items() if "(–∞–¥–º–∏–Ω)" not in desc}
    lines = ["–¢–µ–±–µ –∫—Ä–∞—Å–∞–≤—á–∏–∫ –¥–æ—Å—Ç—É–ø–Ω–æ–µ —Å–ª–µ–¥—É—é—â–µ–µ:"]
    for cmd, desc in filtered_commands.items():
        lines.append(f"{cmd} ‚Äî {desc}")
    await update.message.reply_text("\n".join(lines))
async def handle_commands_all(update: Update, context: ContextTypes.DEFAULT_TYPE):
    username = get_username_from_message(update.message)
    if username != f"@{ADMIN_USERNAME}":
        return  # –ú–æ–ª—á–∏–º, –µ—Å–ª–∏ –Ω–µ –∞–¥–º–∏–Ω

    lines = ["üìã –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ (–≤–∫–ª—é—á–∞—è –∞–¥–º–∏–Ω—Å–∫–∏–µ):"]
    for cmd, desc in commands_common.items():
        lines.append(f"{cmd} ‚Äî {desc}")
    await update.message.reply_text("\n".join(lines))

def get_cookies_by_level(level: int, user_balances: dict) -> int:
    fortune_level = user_balances.get("–Ω–∞–≤—ã–∫–∏", {}).get("–§–æ—Ä—Ç—É–Ω–∞", 0)
    cfg = level_config.get(level, (0, 1, [0.5, 0.5]))
    min_val, max_val, weights = cfg
    values = list(range(min_val, max_val + 1))
    cookies = random.choices(values, weights=weights, k=1)[0]

    if fortune_level > 0:
        chance = 3 * fortune_level
        if random.randint(1, 100) <= chance:
            cookies *= 2

    return cookies

excluded_users = {"@hto_i_taki", "@Shittttt", "@zZardexe", "@insanemaloy"}  # –∞–¥–º–∏–Ω—ã
excluded_users_Admin = {"@hto_i_taki", "@Eparocheck"}  # –∏—Å–∫–ª—é—á–∏—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é

async def handle_top(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    group_username = "@WardShield3"

    try:
        member = await context.bot.get_chat_member(group_username, user_id)
        if member.status not in ("member", "administrator", "creator"):
            return  # –ù–µ —É—á–∞—Å—Ç–Ω–∏–∫ ‚Äî –º–æ–ª—á–∏–º
    except:
        return  # –û—à–∏–±–∫–∞ ‚Äî —Ç–æ–∂–µ –º–æ–ª—á–∏–º

    all_docs = balances_ref.stream()
    balances = {doc.id: doc.to_dict() for doc in all_docs}

    def clean_username(name):
        return name.lstrip('@')

    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–µ–∑ excluded_users_Admin
    balances_no_admin_global = {
        user: data for user, data in balances.items()
        if user not in excluded_users_Admin
    }

    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–µ–∑ –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤
    balances_no_admins = {
        user: data for user, data in balances.items()
        if user not in excluded_users
    }

    # –¢–æ–ø 5 –ø–æ –ü–µ—á–µ–Ω—å–∫–∞–º (–≤—Å–µ, –∫—Ä–æ–º–µ @hto_i_taki)
    top_cookies = sorted(
        balances_no_admin_global.items(),
        key=lambda x: x[1].get("–ø–µ—á–µ–Ω—å–∫–∏", 0),
        reverse=True
    )[:5]

    top_cookies_no_admins = sorted(
        balances_no_admins.items(),
        key=lambda x: x[1].get("–ø–µ—á–µ–Ω—å–∫–∏", 0),
        reverse=True
    )[:5]

    top_levels = sorted(
        balances_no_admin_global.items(),
        key=lambda x: x[1].get("—É—Ä–æ–≤–µ–Ω—å", 1),
        reverse=True
    )[:5]

    top_levels_no_admins = sorted(
        balances_no_admins.items(),
        key=lambda x: x[1].get("—É—Ä–æ–≤–µ–Ω—å", 1),
        reverse=True
    )[:5]

    lines = ["üèÜ –¢–æ–ø 5 –ø–æ –ü–µ—á–µ–Ω—å–∫–∞–º:"]
    for i, (user, data) in enumerate(top_cookies, 1):
        lines.append(f"{i}. {clean_username(user)} ‚Äî {data.get('–ø–µ—á–µ–Ω—å–∫–∏', 0)} üç™")

    lines.append("\nüö´ –¢–æ–ø 5 –ø–æ –ü–µ—á–µ–Ω—å–∫–∞–º –±–µ–∑ –∞–¥–º–∏–Ω–æ–≤:")
    for i, (user, data) in enumerate(top_cookies_no_admins, 1):
        lines.append(f"{i}. {clean_username(user)} ‚Äî {data.get('–ø–µ—á–µ–Ω—å–∫–∏', 0)} üç™")

    lines.append("\nüéñÔ∏è –¢–æ–ø 5 –ø–æ –£—Ä–æ–≤–Ω—è–º:")
    for i, (user, data) in enumerate(top_levels, 1):
        lines.append(f"{i}. {clean_username(user)} ‚Äî —É—Ä–æ–≤–µ–Ω—å {data.get('—É—Ä–æ–≤–µ–Ω—å', 1)}")

    lines.append("\nüéñÔ∏è –¢–æ–ø 5 –ø–æ –£—Ä–æ–≤–Ω—è–º –±–µ–∑ –∞–¥–º–∏–Ω–æ–≤:")
    for i, (user, data) in enumerate(top_levels_no_admins, 1):
        lines.append(f"{i}. {clean_username(user)} ‚Äî —É—Ä–æ–≤–µ–Ω—å {data.get('—É—Ä–æ–≤–µ–Ω—å', 1)}")

    await update.message.reply_text("\n".join(lines))

import random  # –¥–æ–±–∞–≤—å—Ç–µ –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –µ—â—ë –Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–ª–∏
from telegram import User, Chat, Message  # —Ç–æ–∂–µ –¥–æ–±–∞–≤—å—Ç–µ –≤ –∏–º–ø–æ—Ä—Ç—ã


ADMIN_CHAT_ID = 844673891  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

async def handle_transactions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if user_id != ADMIN_CHAT_ID:
        await update.message.reply_text("–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    text = update.message.text.strip()
    args = text.split()

    try:
        with open(TRANSACTION_LOG_FILE, "r", encoding="utf-8") as f:
            transactions = json.load(f)
    except FileNotFoundError:
        await update.message.reply_text("–ê—Ä—Ö–∏–≤ –ø—É—Å—Ç.")
        return

    if not transactions:
        await update.message.reply_text("–ê—Ä—Ö–∏–≤ –ø—É—Å—Ç..")
        return

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∫–æ–ª—å–∫–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å
    if len(args) == 1:
        count = 5  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    elif len(args) == 2:
        if args[1].lower() == "–≤—Å–µ":
            count = len(transactions)
        elif args[1].isdigit():
            count = int(args[1])
        else:
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π: –∞—Ä—Ö–∏–≤ [–≤—Å–µ|—á–∏—Å–ª–æ]")
            return
    else:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π: –∞—Ä—Ö–∏–≤ [–≤—Å–µ|—á–∏—Å–ª–æ]")
        return

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ count –∑–∞–ø–∏—Å–µ–π
    to_show = transactions[-count:]
    lines = []
    for tx in reversed(to_show):  # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º
        time = tx.get("timestamp", "")
        ttype = tx.get("type", "")
        frm = tx.get("from", "")
        to = tx.get("to", "")
        curr = tx.get("currency", "")
        amt = tx.get("amount", "")
        line = f"[{time}] {ttype}: {frm} ‚ûù {to}, {amt} {curr}"
        lines.append(line)

    message = "\n".join(lines)
    if len(message) > 4096:  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Telegram
        for i in range(0, len(message), 4096):
            await update.message.reply_text(message[i:i + 4096])
    else:
        await update.message.reply_text(message)

GROUP_USERNAME = "@WardShield3"  # –Æ–∑–µ—Ä–Ω–µ–π–º –≥—Ä—É–ø–ø—ã

async def handle_info_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id

    try:
        member = await context.bot.get_chat_member(GROUP_USERNAME, user_id)
        if member.status not in ("member", "administrator", "creator"):
            return  # –ù–µ —É—á–∞—Å—Ç–Ω–∏–∫ ‚Äî –º–æ–ª—á–∏–º
    except:
        return  # –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∏–ª–∏ –±–æ—Ç –Ω–µ –≤ –≥—Ä—É–ø–ø–µ ‚Äî —Ç–æ–∂–µ –º–æ–ª—á–∏–º

    await update.message.reply_text(
        "üìå <b>WardShield Server Info</b>\n\n"
        "üí¨ <b>Telegram —á–∞—Ç:</b> <a href='https://t.me/WardShield3'>–≤—Å—Ç—É–ø–∏—Ç—å</a>\n"
        "üåê <b>IP:</b> <code>WardShield_3.aternos.me</code>\n"
        "üéÆ <b>–í–µ—Ä—Å–∏—è Minecraft:</b> 1.21.1",
        parse_mode="HTML",
        disable_web_page_preview=True
    )


def load_lottery_firestore():
    docs = db.collection("lottery").stream()
    return {doc.id: doc.to_dict().get("–Ω–æ–º–µ—Ä–∞", []) for doc in docs}

def save_lottery_firestore(data: dict):
    lottery_ref = db.collection("lottery")
    for user, ticket_range in data.items():
        lottery_ref.document(user).set({"–Ω–æ–º–µ—Ä–∞": ticket_range})






async def handle_lottery_purchase(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.message
    username = get_username_from_message(msg)
    text = msg.text.strip()

    match = re.match(r'^N\s+(\d+)$', text, re.IGNORECASE)
    if not match:
        return

    count = int(match.group(1))
    if count <= 0:
        await msg.reply_text("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏–ª–µ—Ç–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è.")
        return

    user_data = load_balance(username)
    if user_data is None:
        user_data = {
            "—É—Ä–æ–≤–µ–Ω—å": 1,
            **{curr: 0 for curr in CURRENCIES},
            "—Ä–µ—Å—É—Ä—Å—ã": "0/0/0/0/0/0/0",
            "–ø–æ—Å–ª–µ–¥–Ω–∏–π —Ñ–∞—Ä–º": ""
        }

    current_cookies = user_data.get("–ø–µ—á–µ–Ω—å–∫–∏", 0)
    if current_cookies < count:
        await msg.reply_text("–í —Ç–≤–æ—ë–º –º–µ—à–æ—á–∫–µ —Å –ü–µ—á–µ–Ω—å–∫–∞–º–∏ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç :(")
        return

    # –í—ã—á–∏—Ç–∞–µ–º –ø–µ—á–µ–Ω—å–∫–∏
    user_data["–ø–µ—á–µ–Ω—å–∫–∏"] = current_cookies - count
    save_balance(username, user_data)

    # –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—É—â–∏—Ö –±–∏–ª–µ—Ç–æ–≤
    lottery = load_lottery_firestore()
    ordered = list(lottery.items())

    # –ù–∞–π–¥—ë–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏–ª–µ—Ç–æ–≤
    current_index = next((i for i, (user, _) in enumerate(ordered) if user == username), None)
    previous_tickets = 0

    if current_index is not None:
        prev_range = ordered[current_index][1]
        previous_tickets = prev_range[1] - prev_range[0] + 1
        ordered.pop(current_index)

    total_tickets = previous_tickets + count
    ordered.append((username, [0, 0]))  # –î–æ–±–∞–≤–∏–º –ø–æ–∑–∂–µ

    # –ü–µ—Ä–µ—Å—á—ë—Ç –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤
    current_number = 1
    for i, (user, rng) in enumerate(ordered):
        if user == username:
            new_range = [current_number, current_number + total_tickets - 1]
        else:
            ticket_count = rng[1] - rng[0] + 1
            new_range = [current_number, current_number + ticket_count - 1]
        ordered[i] = (user, new_range)
        current_number = new_range[1] + 1

    updated_lottery = {user: rng for user, rng in ordered}
    save_lottery_firestore(updated_lottery)

    try:
        log_transaction({
            "timestamp": datetime.now(moscow_tz).isoformat(),
            "type": "–õ–æ—Ç–æ-–ü–µ—á–µ–Ω—å–∫–æ-–†–µ—è",
            "from": username,
            "to": "–ª–æ—Ç–µ—Ä–µ—è",
            "currency": "–ø–µ—á–µ–Ω—å–∫–∏",
            "amount": count
        })
    except:
        pass

    try:
        if random.randint(1, 100) < chanse_N:
            await msg.reply_text(f"{username} –∫—É–ø–∏–ª –±–∏–ª–µ—Ç—ã –∑–∞ {count} –ø–µ—á–µ–Ω–µ–∫ üç™ –∞–π –º–æ–ª–æ–¥–µ—Ü, –¥–µ—Ä–∂–∏ –ø—Ä–æ–º–æ: {PROMO}")
        else:
            await msg.reply_text(f"{username} –∫—É–ø–∏–ª –±–∏–ª–µ—Ç—ã –∑–∞ {count} –ø–µ—á–µ–Ω–µ–∫ üç™ –∞–π –º–æ–ª–æ–¥–µ—Ü")
    except:
        pass

async def handle_updates(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(UPDATE_LOG.strip())


import os
import json

async def handle_show_lottery(update: Update, context: ContextTypes.DEFAULT_TYPE):
    username = get_username_from_message(update.message)
    if username != f"@{ADMIN_USERNAME}":
        await update.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—É.")
        return

    lottery =load_lottery_firestore()
    if not lottery:
        await update.message.reply_text("–§–∞–π–ª —Å –±–∏–ª–µ—Ç–∞–º–∏ –ø—É—Å—Ç.")
        return

    json_text = json.dumps(lottery, ensure_ascii=False, indent=2, separators=(',', ': '))


    if len(json_text) > 4000:
        temp_path = "–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ/lottery.json"
        with open(temp_path, "w", encoding="utf-8") as f:
            f.write(json_text)

        with open(temp_path, "rb") as doc:
            await update.message.reply_document(document=doc)

        os.remove(temp_path)
    else:
        await update.message.reply_text(
            f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞:\n```json\n{json_text}\n```",
            parse_mode="Markdown"
        )
RESOURCES = {
    "–∫": "–ö–∞–∫–∞–æ-–±–æ–±—ã",
    "–ø": "–ü—à–µ–Ω–∏—Ü–∞",
    "–∂": "–ñ–µ–ª–µ–∑–æ",
    "–∞": "–ê–ª–º–∞–∑—ã",
    "–∑": "–ó–æ–ª–æ—Ç–æ",
    "–∏": "–ò–∑—É–º—Ä—É–¥—ã",
    "—Ä": "–ó–æ–ª–æ—Ç–∞—è –ø–µ—á–µ–Ω—å–∫–∞"  # üåü
}
RESOURCE_LIMITS = {
    "–∫": lambda level: level,  # –ö–∞–∫–∞–æ-–±–æ–±—ã: 1 * —É—Ä–æ–≤–µ–Ω—å
    "–ø": lambda level: level,  # –ü—à–µ–Ω–∏—Ü–∞: 1 * —É—Ä–æ–≤–µ–Ω—å
    "–∂": lambda level: 10 * level,  # –ñ–µ–ª–µ–∑–æ: 10 * —É—Ä–æ–≤–µ–Ω—å
    "–∞": lambda level: 3 * level,  # –ê–ª–º–∞–∑—ã: 3 * —É—Ä–æ–≤–µ–Ω—å
    "–∑": lambda level: 5 * level,  # –ó–æ–ª–æ—Ç–æ: 5 * —É—Ä–æ–≤–µ–Ω—å
    "–∏": lambda level: level,  # –ò–∑—É–º—Ä—É–¥—ã: 1 * —É—Ä–æ–≤–µ–Ω—å
    "—Ä": lambda level: level  # –ó–æ–ª–æ—Ç–∞—è –ø–µ—á–µ–Ω—å–∫–∞: 1 * —É—Ä–æ–≤–µ–Ω—å
}
def get_user_resources(username, balances):
    user_data = balances.get(username, {})
    resources_str = user_data.get("—Ä–µ—Å—É—Ä—Å—ã", "0/0/0/0/0/0/0")
    return list(map(int, resources_str.split('/')))
def update_user_resources(username, resources):
    user_data = load_balance(username)
    if user_data is None:
        user_data = {
            "—É—Ä–æ–≤–µ–Ω—å": 1,
            **{curr: 0 for curr in CURRENCIES},
            "—Ä–µ—Å—É—Ä—Å—ã": "0/0/0/0/0/0/0",
            "–ø–æ—Å–ª–µ–¥–Ω–∏–π —Ñ–∞—Ä–º": ""
        }

    user_data["—Ä–µ—Å—É—Ä—Å—ã"] = '/'.join(map(str, resources))
    save_balance(username, user_data)
def get_user_resources_from_data(user_data: dict) -> list[int]:
    raw = user_data.get("—Ä–µ—Å—É—Ä—Å—ã", "0/0/0/0/0/0/0")
    return list(map(int, raw.split("/")))

async def handle_give_resources(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.message
    text = msg.text.strip()

    if not text.lower().startswith("—Ä–µ—Å –¥–∞—Ç—å"):
        await msg.reply_text("–ö–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å '—Ä–µ—Å –¥–∞—Ç—å'.")
        return

    command = re.sub(r'^—Ä–µ—Å\s+–¥–∞—Ç—å', '', text, flags=re.IGNORECASE).strip()
    match = re.match(r'^(\d+)\s+(\w)', command)
    if not match:
        await msg.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: —Ä–µ—Å –¥–∞—Ç—å <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ> <—Ä–µ—Å—É—Ä—Å> [@–∏–º—è –∏–ª–∏ –æ—Ç–≤–µ—Ç–æ–º]")
        return

    amount = int(match.group(1))
    resource_short = match.group(2).lower()

    if resource_short not in RESOURCES:
        await msg.reply_text("–¢–∞–∫–æ–≥–æ —Ä–µ—Å—É—Ä—Å–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        return

    resource_name = RESOURCES[resource_short]
    sender = get_username_from_message(msg)
    recipient_tag = None

    recipient_match = re.search(r'@(\w+)', command)
    if recipient_match:
        recipient_tag = recipient_match.group(1)
    elif msg.reply_to_message and msg.reply_to_message.from_user.username:
        recipient_tag = msg.reply_to_message.from_user.username

    if not recipient_tag:
        await msg.reply_text("–£–∫–∞–∂–∏ @username –ø–æ–ª—É—á–∞—Ç–µ–ª—è –∏–ª–∏ –æ—Ç–≤–µ—Ç—å –Ω–∞ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        return

    recipient = f"@{recipient_tag}"

    if sender == recipient:
        await msg.reply_text("–ù–µ–ª—å–∑—è –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å —Ä–µ—Å—É—Ä—Å—ã —Å–∞–º–æ–º—É —Å–µ–±–µ.")
        return

    # –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–ª–∞–Ω—Å–æ–≤
    sender_data = load_balance(sender)
    recipient_data = load_balance(recipient)

    if sender_data is None or recipient_data is None:
        await msg.reply_text("–û–¥–∏–Ω –∏–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")
        return

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
    sender_resources = get_user_resources_from_data(sender_data)
    recipient_resources = get_user_resources_from_data(recipient_data)

    resource_index = list(RESOURCES.keys()).index(resource_short)
    sender_level = sender_data.get("—É—Ä–æ–≤–µ–Ω—å", 1)
    recipient_level = recipient_data.get("—É—Ä–æ–≤–µ–Ω—å", 1)

    sender_limit = RESOURCE_LIMITS[resource_short](sender_level)
    recipient_limit = RESOURCE_LIMITS[resource_short](recipient_level)

    if sender_resources[resource_index] < amount:
        await msg.reply_text(f"–£ —Ç–µ–±—è –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç {resource_name}.")
        return

    if recipient_resources[resource_index] + amount > recipient_limit:
        await msg.reply_text(f"–£ {recipient} –Ω–µ—Ç –º–µ—Å—Ç–∞ –¥–ª—è {amount} {resource_name}.")
        return

    # –ü–µ—Ä–µ–¥–∞—á–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
    sender_resources[resource_index] -= amount
    recipient_resources[resource_index] += amount

    update_user_resources(sender, sender_resources)
    update_user_resources(recipient, recipient_resources)

    try:
        log_transaction({
            "timestamp": datetime.now(timezone(timedelta(hours=3))).isoformat(),
            "type": "—Ä–µ—Å—É—Ä—Å –ø–µ—Ä–µ–≤–æ–¥",
            "from": sender,
            "to": recipient,
            "resource": resource_name,
            "amount": amount
        })
    except:
        pass

    await msg.reply_text(f"{sender} –ø–µ—Ä–µ–≤—ë–ª {amount} {resource_name} {recipient}.")





async def handle_give_admin_resources(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.message
    if not msg or msg.from_user.username != ADMIN_USERNAME:
        return

    text = msg.text.strip()
    command = re.sub(r'^—Ä–µ—Å\s+–¥–∞—Ä', '', text, flags=re.IGNORECASE).strip()

    match = re.match(r'^(\d+)\s+(\w)', command)
    if not match:
        await msg.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: —Ä–µ—Å –¥–∞—Ä <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ> <—Ä–µ—Å—É—Ä—Å> [@–∏–º—è –∏–ª–∏ –æ—Ç–≤–µ—Ç–æ–º]")
        return

    amount = int(match.group(1))
    resource_short = match.group(2).lower()

    if resource_short not in RESOURCES:
        await msg.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ—Å—É—Ä—Å.")
        return

    resource_name = RESOURCES[resource_short]
    recipient_tag = None

    recipient_match = re.search(r'@(\w+)', command)
    if recipient_match:
        recipient_tag = recipient_match.group(1)
    elif msg.reply_to_message and msg.reply_to_message.from_user.username:
        recipient_tag = msg.reply_to_message.from_user.username

    if not recipient_tag:
        await msg.reply_text("–£–∫–∞–∂–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ @username –∏–ª–∏ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        return

    recipient = f"@{recipient_tag}"
    recipient_data = load_balance(recipient)

    if recipient_data is None:
        await msg.reply_text("–ü–æ–ª—É—á–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")
        return

    recipient_resources = get_user_resources_from_data(recipient_data)
    recipient_level = recipient_data.get("—É—Ä–æ–≤–µ–Ω—å", 1)

    resource_index = list(RESOURCES.keys()).index(resource_short)
    recipient_limit = RESOURCE_LIMITS[resource_short](recipient_level)

    if recipient_resources[resource_index] + amount > recipient_limit:
        await msg.reply_text(f"–£ {recipient} –Ω–µ—Ç –º–µ—Å—Ç–∞ –¥–ª—è {amount} {resource_name}.")
        return

    recipient_resources[resource_index] += amount
    update_user_resources(recipient, recipient_resources)

    try:
        log_transaction({
            "timestamp": datetime.now(moscow_tz).isoformat(),
            "type": "—Ä–µ—Å—É—Ä—Å –¥–∞—Ä",
            "from": "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è",
            "to": recipient,
            "resource": resource_name,
            "amount": amount
        })
    except:
        pass

    await msg.reply_text(f"{recipient} –ø–æ–ª—É—á–∏–ª {amount} {resource_name} –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.")




async def handle_take_admin_resources(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.message
    if not msg or msg.from_user.username != ADMIN_USERNAME:
        return

    text = msg.text.strip()
    command = re.sub(r'^—Ä–µ—Å\s+–æ—Ç–Ω—è—Ç—å', '', text, flags=re.IGNORECASE).strip()

    match = re.match(r'^(\d+)\s+(\w)', command)
    if not match:
        await msg.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: —Ä–µ—Å –æ—Ç–Ω—è—Ç—å <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ> <—Ä–µ—Å—É—Ä—Å> [@–∏–º—è –∏–ª–∏ –æ—Ç–≤–µ—Ç–æ–º]")
        return

    amount = int(match.group(1))
    resource_short = match.group(2).lower()

    if resource_short not in RESOURCES:
        await msg.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ—Å—É—Ä—Å.")
        return

    resource_name = RESOURCES[resource_short]
    recipient_tag = None

    recipient_match = re.search(r'@(\w+)', command)
    if recipient_match:
        recipient_tag = recipient_match.group(1)
    elif msg.reply_to_message and msg.reply_to_message.from_user.username:
        recipient_tag = msg.reply_to_message.from_user.username

    if not recipient_tag:
        await msg.reply_text("–£–∫–∞–∂–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ @username –∏–ª–∏ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        return

    recipient = f"@{recipient_tag}"
    recipient_data = load_balance(recipient)

    if recipient_data is None:
        await msg.reply_text("–ü–æ–ª—É—á–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")
        return

    recipient_resources = get_user_resources_from_data(recipient_data)
    resource_index = list(RESOURCES.keys()).index(resource_short)

    if recipient_resources[resource_index] < amount:
        await msg.reply_text(f"–£ {recipient} –Ω–µ—Ç {amount} {resource_name} –¥–ª—è –∏–∑—ä—è—Ç–∏—è.")
        return

    recipient_resources[resource_index] -= amount
    update_user_resources(recipient, recipient_resources)

    try:
        log_transaction({
            "timestamp": datetime.now(moscow_tz).isoformat(),
            "type": "—Ä–µ—Å—É—Ä—Å –∏–∑—ä—è—Ç–∏–µ",
            "from": recipient,
            "to": "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è",
            "resource": resource_name,
            "amount": amount
        })
    except:
        pass

    await msg.reply_text(f"{recipient} –ª–∏—à–∏–ª—Å—è {amount} {resource_name}.")


import re

from datetime import datetime, timedelta, timezone



async def handle_craft(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.message
    if not msg or not msg.text:
        return

    text = msg.text.strip()
    match = re.match(
        r'^–∫—Ä–∞—Ñ—Ç\s+(\d+)\s+(–ø–µ—á–µ–Ω—å–∫–∞|–ø–µ—á–µ–Ω—å–∫–∏|–ø–µ—á–µ–Ω–µ–∫|–∑–æ–ª–æ—Ç–∞—è –ø–µ—á–µ–Ω—å–∫–∞|–∑–æ–ª–æ—Ç—ã—Ö –ø–µ—á–µ–Ω–µ–∫|–∑–æ–ª–æ—Ç—ã—Ö –ø–µ—á–µ–Ω—å–µ–∫|–∑–æ–ª–æ—Ç–æ)$',
        text, re.IGNORECASE
    )
    if not match:
        await msg.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –∫—Ä–∞—Ñ—Ç <–∫–æ–ª-–≤–æ> <–ø–µ—á–µ–Ω—å–∫–∞|–∑–æ–ª–æ—Ç–∞—è –ø–µ—á–µ–Ω—å–∫–∞>")
        return

    amount = int(match.group(1))
    craft_raw = match.group(2).lower()

    craft_type = "–∑–æ–ª–æ—Ç–∞—è –ø–µ—á–µ–Ω—å–∫–∞" if "–∑–æ–ª–æ—Ç" in craft_raw or craft_raw == "–∑–æ–ª–æ—Ç–æ" else "–ø–µ—á–µ–Ω—å–∫–∞"

    username = get_username_from_message(msg)
    if not username:
        await msg.reply_text("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    user_balances = load_balance(username)
    if user_balances is None:
        await msg.reply_text("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ù–∞–ø–∏—à–∏—Ç–µ –ë–∞–ª–∞–Ω—Å –¥–ª—è –Ω–∞—á–∞–ª–∞.")
        return

    resources_str = user_balances.get("—Ä–µ—Å—É—Ä—Å—ã", "0/0/0/0/0/0/0")
    try:
        resources = list(map(int, resources_str.split('/')))
    except ValueError:
        await msg.reply_text("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    try:
        wheat_index = list(RESOURCES.keys()).index("–ø")
        cocoa_index = list(RESOURCES.keys()).index("–∫")
        gold_cookie_index = list(RESOURCES.keys()).index("—Ä")
    except ValueError:
        await msg.reply_text("–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤.")
        return

    if craft_type == "–ø–µ—á–µ–Ω—å–∫–∞":
        econ_level = user_balances.get("–Ω–∞–≤—ã–∫–∏", {}).get("–≠–∫–æ–Ω–æ–º–∏—Å—Ç", 0)
        level = user_balances.get("—É—Ä–æ–≤–µ–Ω—å", 1)

        required_wheat = 2 * amount
        required_cocoa = 1 * amount
        bonus_cookies = 0

        if econ_level > 0:
            if 2 <= level < 5:
                required_wheat = max(0, required_wheat - 1 * amount)
            elif 5 <= level < 10:
                required_wheat = max(0, required_wheat - 2 * amount)
            elif level >= 10:
                required_wheat = 0
                bonus_cookies = 2 * amount

        if resources[wheat_index] < required_wheat or resources[cocoa_index] < required_cocoa:
            await msg.reply_text(f"–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è –∫—Ä–∞—Ñ—Ç–∞ {amount} –æ–±—ã—á–Ω—ã—Ö –ø–µ—á–µ–Ω–µ–∫.")
            return

        resources[wheat_index] -= required_wheat
        resources[cocoa_index] -= required_cocoa

        skill_level = user_balances.get("–Ω–∞–≤—ã–∫–∏", {}).get("–ü–µ–∫–∞—Ä—å", 0)
        baked_cookies = amount + bonus_cookies
        if skill_level > 0:
            chance = 10 * skill_level
            extra_bonus = sum(1 for _ in range(amount) if random.randint(1, 100) <= chance)
            baked_cookies += extra_bonus

        user_balances["–ø–µ—á–µ–Ω—å–∫–∏"] = user_balances.get("–ø–µ—á–µ–Ω—å–∫–∏", 0) + baked_cookies

        try:
            log_transaction({
                "timestamp": datetime.now(moscow_tz).isoformat(),
                "type": "–∫—Ä–∞—Ñ—Ç",
                "username": username,
                "resource": "–ø–µ—á–µ–Ω—å–∫–∞",
                "amount": baked_cookies
            })
        except:
            pass

        await msg.reply_text(
            f"–í—ã —Å–∫—Ä–∞—Ñ—Ç–∏–ª–∏ {baked_cookies} –æ–±—ã—á–Ω—ã—Ö –ø–µ—á–µ–Ω–µ–∫ (–≤–∫–ª—é—á–∞—è –±–æ–Ω—É—Å {bonus_cookies} –æ—Ç –Ω–∞–≤—ã–∫–∞ '–ü–µ–∫–∞—Ä—å')."
        )

    elif craft_type == "–∑–æ–ª–æ—Ç–∞—è –ø–µ—á–µ–Ω—å–∫–∞":
        required_wheat = 2 * amount
        required_cocoa = 1 * amount
        required_cookies = 1 * amount

        if (
            resources[wheat_index] < required_wheat or
            resources[cocoa_index] < required_cocoa or
            user_balances.get("–ø–µ—á–µ–Ω—å–∫–∏", 0) < required_cookies
        ):
            await msg.reply_text(f"–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è –∫—Ä–∞—Ñ—Ç–∞ {amount} –∑–æ–ª–æ—Ç—ã—Ö –ø–µ—á–µ–Ω–µ–∫.")
            return

        skill_level = user_balances.get("–Ω–∞–≤—ã–∫–∏", {}).get("–Æ–≤–µ–ª–∏—Ä", 0)
        chance = 10 * skill_level

        def deduct_with_chance(total_needed, resource_index):
            spent = 0
            for _ in range(total_needed):
                if skill_level > 0 and random.randint(1, 100) <= chance:
                    continue
                resources[resource_index] -= 1
                spent += 1
            return spent

        spent_wheat = deduct_with_chance(required_wheat, wheat_index)
        spent_cocoa = deduct_with_chance(required_cocoa, cocoa_index)

        spent_cookies = 0
        for _ in range(required_cookies):
            if skill_level > 0 and random.randint(1, 100) <= chance:
                continue
            user_balances["–ø–µ—á–µ–Ω—å–∫–∏"] -= 1
            spent_cookies += 1

        resources[gold_cookie_index] += amount

        ilon_level = user_balances.get("–Ω–∞–≤—ã–∫–∏", {}).get("–ò–ª–æ–Ω –ú–∞—Å–∫", 0)
        if ilon_level > 0 and amount >= 3:
            bonus_cookies = 3 * ilon_level
            user_balances["–ø–µ—á–µ–Ω—å–∫–∏"] += bonus_cookies
            await msg.reply_text(f"üöÄ –ù–∞–≤—ã–∫ '–ò–ª–æ–Ω –ú–∞—Å–∫' —Å—Ä–∞–±–æ—Ç–∞–ª! –í—ã –ø–æ–ª—É—á–∏–ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ {bonus_cookies} –æ–±—ã—á–Ω—ã—Ö –ø–µ—á–µ–Ω–µ–∫.")

        try:
            log_transaction({
                "timestamp": datetime.now(moscow_tz).isoformat(),
                "type": "–∫—Ä–∞—Ñ—Ç",
                "username": username,
                "resource": "–∑–æ–ª–æ—Ç–∞—è –ø–µ—á–µ–Ω—å–∫–∞",
                "amount": amount
            })
        except:
            pass

        await msg.reply_text(
            f"–í—ã —Å–∫—Ä–∞—Ñ—Ç–∏–ª–∏ {amount} –∑–æ–ª–æ—Ç—ã—Ö –ø–µ—á–µ–Ω–µ–∫! "
            f"–ü–æ—Ç—Ä–∞—á–µ–Ω–æ: –ø—à–µ–Ω–∏—Ü—ã {spent_wheat}, –∫–∞–∫–∞–æ-–±–æ–±–æ–≤ {spent_cocoa}, –ø–µ—á–µ–Ω–µ–∫ {spent_cookies} "
            f"(–Ω–∞–≤—ã–∫ '–Æ–≤–µ–ª–∏—Ä' —Å—Ä–∞–±–æ—Ç–∞–ª —Å —à–∞–Ω—Å–æ–º {chance}%)"
        )

    else:
        await msg.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø. –ü—Ä–∏–º–µ—Ä: –∫—Ä–∞—Ñ—Ç 1 –ø–µ—á–µ–Ω—å–∫–∞ / –∫—Ä–∞—Ñ—Ç 1 –∑–æ–ª–æ—Ç–∞—è –ø–µ—á–µ–Ω—å–∫–∞")
        return

    # ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    user_balances["—Ä–µ—Å—É—Ä—Å—ã"] = "/".join(map(str, resources))
    save_balance(username, user_balances)

async def handle_resources_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = """üì¶ *–†–µ—Å—É—Ä—Å—ã –∏ —Ñ–æ—Ä–º—É–ª—ã –≤—ã–ø–∞–¥–µ–Ω–∏—è:*

–≤—ã–ø–∞–¥–∞–µ—Ç –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ "–•–æ—á—É –ü–µ—á–µ–Ω–µ–∫"

- *üß± –ñ–µ–ª–µ–∑–æ*  
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –±—É–¥—É—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö.  
‚ñ∏ –®–∞–Ω—Å –≤—ã–ø–∞–¥–µ–Ω–∏—è: `20 + 5 √ó —É—Ä–æ–≤–µ–Ω—å`%  
‚ñ∏ –ö–∞–∂–¥—ã–µ 100% –¥–∞—é—Ç 1 –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∂–µ–ª–µ–∑–æ. –û—Å—Ç–∞—Ç–æ–∫ ‚Äî —à–∞–Ω—Å –Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ.  
–ü—Ä–∏–º–µ—Ä: –£—Ä–æ–≤–µ–Ω—å 10 ‚Üí `20 + 5√ó10 = 70%`. –£—Ä–æ–≤–µ–Ω—å 20 ‚Üí `120%` ‚Üí 1 –≥–∞—Ä–∞–Ω—Ç. + 20% –Ω–∞ 2-–µ.

- *üèÜ –ó–æ–ª–æ—Ç–æ*  
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –∫—Ä–∞—Ñ—Ç–µ –∑–æ–ª–æ—Ç—ã—Ö –ø–µ—á–µ–Ω–µ–∫.  
‚ñ∏ –®–∞–Ω—Å: `25 - 5 √ó —É—Ä–æ–≤–µ–Ω—å`% (–µ—Å–ª–∏ —É—Ä–æ–≤–µ–Ω—å ‚â• 2)  
–ü—Ä–∏–º–µ—Ä: –£—Ä–æ–≤–µ–Ω—å 2 ‚Üí `15%`, —É—Ä–æ–≤–µ–Ω—å 5 ‚Üí `0%`.

- *üíé –ê–ª–º–∞–∑—ã*  
–†–µ–¥–∫–∏–π —Ä–µ—Å—É—Ä—Å –¥–ª—è –ø—Ä–æ–∫–∞—á–∫–∏ —É—Ä–æ–≤–Ω–µ–π.  
‚ñ∏ –®–∞–Ω—Å: `30 - 5 √ó —É—Ä–æ–≤–µ–Ω—å`% (—Ç–æ–ª—å–∫–æ —Å 2 –¥–æ 5 —É—Ä–æ–≤–Ω—è).  
–ü—Ä–∏–º–µ—Ä: –£—Ä–æ–≤–µ–Ω—å 2 ‚Üí `20%`, —É—Ä–æ–≤–µ–Ω—å 5 ‚Üí `5%`.

- *üåæ –ü—à–µ–Ω–∏—Ü–∞*  
–ù—É–∂–Ω–∞ –¥–ª—è –∫—Ä–∞—Ñ—Ç–æ–≤.  
‚ñ∏ –®–∞–Ω—Å: `50 - 5 √ó —É—Ä–æ–≤–µ–Ω—å`%  
–ü—Ä–∏–º–µ—Ä: –£—Ä–æ–≤–µ–Ω—å 1 ‚Üí `45%`, —É—Ä–æ–≤–µ–Ω—å 5 ‚Üí `25%`.

- *üç´ –ö–∞–∫–∞–æ-–±–æ–±—ã*  
–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ –∫—Ä–∞—Ñ—Ç–∞—Ö.  
‚ñ∏ –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —à–∞–Ω—Å: `5%`, –Ω–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —É—Ä–æ–≤–Ω—è.

- *üíö –ò–∑—É–º—Ä—É–¥—ã*  
–†–µ–¥—á–∞–π—à–∏–π —Ä–µ—Å—É—Ä—Å.  
‚ñ∏ –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —à–∞–Ω—Å: `3%` (–Ω–∞ —É—Ä–æ–≤–Ω—è—Ö –æ—Ç 1 –¥–æ 10).

- *üèµ –ó–æ–ª–æ—Ç—ã–µ –ø–µ—á–µ–Ω—å–∫–∏*  
‚ñ∏ –ö—Ä–∞—Ñ—Ç: `2 –ø—à–µ–Ω–∏—Ü—ã + 1 –∫–∞–∫–∞–æ-–±–æ–± + 1 –∑–æ–ª–æ—Ç–æ = 1 –∑–æ–ª–æ—Ç–∞—è –ø–µ—á–µ–Ω—å–∫–∞`.  
‚ñ∏ –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—ã—Å–æ–∫–∏—Ö —É—Ä–æ–≤–Ω–µ–π.

- *üéÅ –ë–æ–Ω—É—Å-–ø–µ—á–µ–Ω—å–∫–∏*  
‚ñ∏ –ï—Å—Ç—å `1%` —à–∞–Ω—Å –ø–æ–ª—É—á–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ 10 –æ–±—ã—á–Ω—ã—Ö –ø–µ—á–µ–Ω–µ–∫ –ø—Ä–∏ —Å–±–æ—Ä–µ.
"""

    await update.message.reply_text(text, parse_mode="Markdown")

SHOP_KEYWORDS = [
    "–º–∞–≥–∞–∑–∏–Ω", "–∑–∞—á–µ–º –Ω—É–∂–Ω—ã –ø–µ—á–µ–Ω—å–∫–∏", "–∑–∞—á–µ–º –Ω—É–∂–Ω—ã –ø–µ—á–µ–Ω—å—è",
    "–∫—É–¥–∞ —Ç—Ä–∞—Ç–∏—Ç—å –ø–µ—á–µ–Ω—å–∫–∏", "—á—Ç–æ –¥–µ–ª–∞—Ç—å —Å –ø–µ—á–µ–Ω—å–∫–∞–º–∏", "–Ω–∞ —á—Ç–æ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å –ø–µ—á–µ–Ω—å–∫–∏",
    "–º–æ–∂–Ω–æ –ª–∏ –∫—É–ø–∏—Ç—å", "–ø—Ä–æ–¥–∞–∂–∞", "–ø–æ–∫—É–ø–∫–∞", "–∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–µ—á–µ–Ω—å–∫–∏",
    "–æ–±–º–µ–Ω—è—Ç—å –ø–µ—á–µ–Ω—å–∫–∏", "–Ω–∞–≥—Ä–∞–¥—ã –∑–∞ –ø–µ—á–µ–Ω—å–∫–∏"
]
MOSCOW_TZ = timezone(timedelta(hours=3))
import traceback
async def notify_admin_on_error(context, where: str, exception: Exception):
    time_str = datetime.now(MOSCOW_TZ).strftime("%Y-%m-%d %H:%M:%S")
    tb = ''.join(traceback.format_exception(type(exception), exception, exception.__traceback__))

    message = (
        f"‚ö†Ô∏è *–û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ!*\n"
        f"*–ì–¥–µ:* `{where}`\n"
        f"*–ö–æ–≥–¥–∞:* `{time_str}`\n"
        f"*–¢–∏–ø:* `{type(exception).__name__}`\n"
        f"*–°–æ–æ–±—â–µ–Ω–∏–µ:* `{str(exception)}`\n"
        f"*Traceback:* ```{tb[-900:]}```"
    )

    try:
        await context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=message, parse_mode="Markdown")
    except Exception as e:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É:", e)
async def handle_random_giveaway(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.message
    if msg.from_user.username != ADMIN_USERNAME:
        return

    text = msg.text.strip()
    match = re.match(r'^—Ä–∞–∑–¥–∞—á–∞\s+(\d+)\s+(\d+)\s+(\d+)\s+(\d+)', text, re.IGNORECASE)
    if not match:
        await msg.reply_text("–§–æ—Ä–º–∞—Ç: —Ä–∞–∑–¥–∞—á–∞ <min_—É—Ä–æ–≤–µ–Ω—å> <max_—É—Ä–æ–≤–µ–Ω—å> <–∫–æ–ª-–≤–æ –∏–≥—Ä–æ–∫–æ–≤> <—Å—É–º–º–∞>")
        return

    min_level = int(match.group(1))
    max_level = int(match.group(2))
    player_count = int(match.group(3))
    amount = int(match.group(4))

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ Firestore
    all_docs = balances_ref.stream()
    all_balances = {doc.id: doc.to_dict() for doc in all_docs}

    # –§–∏–ª—å—Ç—Ä—É–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
    if min_level == 0 and max_level == 0:
        candidates = [
            user for user, data in all_balances.items()
            if user not in excluded_users_Admin and isinstance(data, dict)
        ]
    else:
        candidates = [
            user for user, data in all_balances.items()
            if user not in excluded_users_Admin and isinstance(data, dict)
               and min_level <= data.get("—É—Ä–æ–≤–µ–Ω—å", 1) <= max_level
        ]

    if len(candidates) < player_count:
        await msg.reply_text(
            f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–≥—Ä–æ–∫–æ–≤ —É—Ä–æ–≤–Ω—è –æ—Ç {min_level} –¥–æ {max_level}. –ù–∞—à–ª–∏ —Ç–æ–ª—å–∫–æ: {len(candidates)}"
        )
        return

    selected_users = random.sample(candidates, player_count)

    for user in selected_users:
        user_data = all_balances.get(user)
        if user_data is None or not isinstance(user_data, dict):
            user_data = {
                "—É—Ä–æ–≤–µ–Ω—å": 1,
                **{curr: 0 for curr in CURRENCIES},
                "—Ä–µ—Å—É—Ä—Å—ã": "0/0/0/0/0/0/0",
                "–ø–æ—Å–ª–µ–¥–Ω–∏–π —Ñ–∞—Ä–º": ""
            }

        user_data["–ø–µ—á–µ–Ω—å–∫–∏"] = user_data.get("–ø–µ—á–µ–Ω—å–∫–∏", 0) + amount
        save_balance(user, user_data)

        try:
            log_transaction({
                "timestamp": datetime.now(moscow_tz).isoformat(),
                "type": "—Ä–∞–∑–¥–∞—á–∞",
                "from": "–±–æ—Ç",
                "to": user,
                "currency": "–ø–µ—á–µ–Ω—å–∫–∏",
                "amount": amount
            })
        except:
            pass

    names = ', '.join(selected_users)
    await msg.reply_text(
        f"üéâ {amount} üç™ –≤—ã–¥–∞–Ω—ã {player_count} –∏–≥—Ä–æ–∫–∞–º —É—Ä–æ–≤–Ω—è {min_level}‚Äì{max_level}: {names}"
    )



async def handle_ultrahelp_keywords(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text.lower()
    group_username = "@WardShield3"
    keywords = ["–∫–∞–∑–∏–Ω–æ", "—ç–º–æ–¥–∑–∏", "—É–ª—å—Ç—Ö–µ–ª–ø", "—É–ª—å—Ç—Ö–µ–ª–ø—ã", "–ø–æ–º–æ—â—å"]

    try:
        member = await context.bot.get_chat_member(group_username, user_id)
        if member.status not in ("member", "administrator", "creator"):
            return  # –ù–µ —É—á–∞—Å—Ç–Ω–∏–∫ ‚Äî –º–æ–ª—á–∏–º
    except:
        return  # –û—à–∏–±–∫–∞ ‚Äî –º–æ–ª—á–∏–º

    if any(keyword in text for keyword in keywords):
        await update.message.reply_text(ULTRAHELP_INFO, parse_mode="Markdown")
async def handle_set_promo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global PROMO
    username = get_username_from_message(update.message)

    if username != f"@{ADMIN_USERNAME}":
        return  # –ú–æ–ª—á–∏–º, –µ—Å–ª–∏ –Ω–µ –∞–¥–º–∏–Ω

    args = update.message.text.strip().split(maxsplit=1)
    if len(args) < 2:
        await update.message.reply_text("–£–∫–∞–∂–∏ —Ç–µ–∫—Å—Ç –ø—Ä–æ–º–æ. –ü—Ä–∏–º–µ—Ä: `–ø—Ä–æ–º–æ –ü–µ—á–µ–Ω—å–∫–∏ –≤—Å–µ–º`")
        return

    PROMO = args[1].strip()
    await update.message.reply_text(f"‚úÖ –ü—Ä–æ–º–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {PROMO}")
async def debug_log_text(text: str, context: ContextTypes.DEFAULT_TYPE):
    await context.bot.send_message(chat_id=844673891, text=text)

async def handle_skill_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    username = get_username_from_message(update.message)
    user = load_balance(username)

    if not user:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ!")
        return

    skills = user.get("–Ω–∞–≤—ã–∫–∏", {})
    if not skills:
        await update.message.reply_text("–£ —Ç–µ–±—è –µ—â—ë –Ω–µ—Ç –Ω–∞–≤—ã–∫–æ–≤. –ü–æ–ª—É—á–∏ –∏—Ö —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É '–ø–æ–ª—É—á–∏—Ç—å –Ω–∞–≤—ã–∫'")
        return

    lines = ["üéì –¢–≤–æ–∏ –Ω–∞–≤—ã–∫–∏:\n"]
    for name, lvl in skills.items():
        max_lvl = SKILLS.get(name, 10)
        effective_lvl = min(lvl, max_lvl)

        desc = "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ"

        if name == "–ó–æ–ª–æ—Ç—ã–µ –†—É–∫–∏":
            chance = 10 * effective_lvl
            desc = f"–ò–∑ 2 –ø—à–µ–Ω–∏—Ü—ã, 1 –∫–∞–∫–∞–æ –∏ 1 –∑–æ–ª–æ—Ç–∞ —Å–æ–∑–¥–∞—ë—Ç 2 –∑–æ–ª–æ—Ç—ã–µ –ø–µ—á–µ–Ω—å–∫–∏ —Å —à–∞–Ω—Å–æ–º {chance}%"

        elif name == "–ñ–µ–ª–µ–∑–Ω—ã–π –ì–æ–ª–µ–º":
            chance = 10 * effective_lvl
            desc = f"+{chance}% —à–∞–Ω—Å–∞ –Ω–∞ –∂–µ–ª–µ–∑–æ. –ü—Ä–∏ 100% ‚Äî –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ, –æ—Å—Ç–∞—Ç–æ–∫ –∫–∞–∫ —à–∞–Ω—Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ"

        elif name == "–ë–µ—Å–∫–æ–Ω–µ—á–Ω–æ–µ –ü–µ—á–µ–Ω—å–µ":
            desc = f"–ï–∂–µ–¥–Ω–µ–≤–Ω–æ –¥–∞—ë—Ç {effective_lvl} –ø–µ—á–µ–Ω–µ–∫"

        elif name == "–õ—É–¥–æ–º–∞–Ω":
            desc = f"–°–±–æ—Ä –ø–µ—á–µ–Ω–µ–∫ –∫–æ–ª–µ–±–ª–µ—Ç—Å—è –æ—Ç -{2*effective_lvl}% –¥–æ +{2*effective_lvl}%"

        elif name == "–ó–æ–ª–æ—Ç–æ–∏—Å–∫–∞—Ç–µ–ª—å":
            cost = max(1, 30 - effective_lvl)
            desc = f"–û–±–º–µ–Ω {cost} –∂–µ–ª–µ–∑–∞ –Ω–∞ 1 –∑–æ–ª–æ—Ç–æ"

        elif name == "–í–µ–ª–∏–∫–∏–π –®–∞—Ö—Ç—ë—Ä":
            chance = 20 * effective_lvl
            desc = f"+1 –∂–µ–ª–µ–∑–æ –≤ –¥–µ–Ω—å —Å —à–∞–Ω—Å–æ–º {chance}%"

        elif name == "–ü–µ–∫–∞—Ä—å":
            desc = f"{10 * effective_lvl}% —à–∞–Ω—Å –ø–æ–ª—É—á–∏—Ç—å +1 –ø–µ—á–µ–Ω—å–∫—É –ø—Ä–∏ –∫—Ä–∞—Ñ—Ç–µ"

        elif name == "–Æ–≤–µ–ª–∏—Ä":
            desc = f"{10 * effective_lvl}% —à–∞–Ω—Å –Ω–µ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å —Ä–µ—Å—É—Ä—Å –ø—Ä–∏ –∫—Ä–∞—Ñ—Ç–µ –∑–æ–ª–æ—Ç–æ–π –ø–µ—á–µ–Ω—å–∫–∏"

        elif name == "–î–∞—Ä –ø—Ä–∏—Ä–æ–¥—ã":
            desc = f"+{15 * effective_lvl}% —à–∞–Ω—Å –Ω–∞ –ø—à–µ–Ω–∏—Ü—É –ø—Ä–∏ —Ñ–∞—Ä–º–µ"

        elif name == "–ì–ª–∞–∑ –ê–ª–º–∞–∑":
            desc = f"+{1 * effective_lvl}% —à–∞–Ω—Å –Ω–∞ –∞–ª–º–∞–∑ –ø—Ä–∏ —Ñ–∞—Ä–º–µ"

        elif name == "–°–µ–ª—è–Ω–∏–Ω":
            gold = effective_lvl // 3
            iron = 10 + effective_lvl
            desc = f"–û–±–º–µ–Ω 1 –∏–∑—É–º—Ä—É–¥–∞ –Ω–∞ {gold} –∑–æ–ª–æ—Ç–∞ –∏ {iron} –∂–µ–ª–µ–∑–∞ (—Ä–∞–∑ –≤ –¥–µ–Ω—å)"

        elif name == "–§–∞—Ä–º-–º–∞–Ω—å—è–∫":
            chance = 10 + effective_lvl * 5
            desc = f"{chance}% —à–∞–Ω—Å –¥–æ–ø. —Ä–µ—Å—É—Ä—Å–∞ –ø—Ä–∏ —Ñ–∞—Ä–º–µ"

        elif name == "–≠–∫–æ–Ω–æ–º–∏—Å—Ç":
            reduction = (2 + effective_lvl) // 3
            desc = f"–°–Ω–∏–∂–∞–µ—Ç —Ç—Ä–∞—Ç—É –ø—à–µ–Ω–∏—Ü—ã –Ω–∞ {reduction} –ø—Ä–∏ –∫—Ä–∞—Ñ—Ç–µ"

        elif name == "–°—Ç—Ä–∞—Ç–µ–≥":
            desc = f"–°–Ω–∏–∂–∞–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å –ü–µ—á–µ–Ω–µ–∫ –Ω–∞ {5 * effective_lvl}%"

        elif name == "–£–¥–∞—á–ª–∏–≤—ã–π":
            chance = effective_lvl // 5 + 2
            amount = effective_lvl // 5 + 1
            desc = f"–®–∞–Ω—Å {chance}% –ø–æ–ª—É—á–∏—Ç—å {amount} –∏–∑—É–º—Ä—É–¥–∞ –ø—Ä–∏ —Ñ–∞—Ä–º–µ"

        elif name == "–ò–ª–æ–Ω –ú–∞—Å–∫":
            bonus = 3 * effective_lvl
            desc = f"–ü—Ä–∏ –∫—Ä–∞—Ñ—Ç–µ 3+ –∑–æ–ª–æ—Ç—ã—Ö –ø–µ—á–µ–Ω–µ–∫ ‚Äî {bonus} –æ–±—ã—á–Ω—ã—Ö –≤ –ø–æ–¥–∞—Ä–æ–∫"

        elif name == "–≤–µ—á–Ω—ã–π —Ñ–∞—Ä–º":
            desc = f"–®–∞–Ω—Å {effective_lvl}% –ø–æ–ª—É—á–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ñ–∞—Ä–º –≤ –¥–µ–Ω—å"

        elif name == "–ö–æ–ø–∞—Ç–µ–ª—å":
            bonus = effective_lvl // 2 + 1
            threshold = 10 * effective_lvl
            desc = f"+{bonus} –∂–µ–ª–µ–∑–∞ –≤ –¥–µ–Ω—å, –µ—Å–ª–∏ —É —Ç–µ–±—è ‚â•{threshold} —Ä–µ—Å—É—Ä—Å–æ–≤"

        elif name == "–§–æ—Ä—Ç—É–Ω–∞":
            desc = f"–®–∞–Ω—Å {3 * effective_lvl}% —É–¥–≤–æ–∏—Ç—å —Ñ–∞—Ä–º"

        elif name == "–†–∞–∑—Ä—É—à–∏—Ç–µ–ª—å":
            desc = f"–£–¥–∞–ª—è–µ—Ç {effective_lvl} –∂–µ–ª–µ–∑–∞ —É –¥—Ä—É–≥–æ–≥–æ –∏–≥—Ä–æ–∫–∞ (1 —Ä–∞–∑ –≤ –¥–µ–Ω—å)"

        elif name == "–ê–ª—Ö–∏–º–∏–∫":
            desc = f"{5 * effective_lvl}% —à–∞–Ω—Å —É–ª—É—á—à–∏—Ç—å —Ä–µ—Å—É—Ä—Å (–∂‚Üí–ø‚Üí–∞‚Üí–∏)"

        elif name == "–¢–æ—Ä–≥–æ–≤–µ—Ü":
            prices = {
                1: {"–ø": (10, 10), "–∫": (5, 10), "–∂": (20, 10), "–∑": (10, 10), "–∞": (2, 10), "–∏": (2, 10)},
                2: {"–ø": (9, 10), "–∫": (5, 11), "–∂": (18, 11), "–∑": (9, 11), "–∞": (2, 11), "–∏": (2, 11)},
                3: {"–ø": (8, 11), "–∫": (5, 12), "–∂": (17, 12), "–∑": (8, 12), "–∞": (2, 12), "–∏": (2, 12)},
                4: {"–ø": (7, 12), "–∫": (4, 12), "–∂": (15, 12), "–∑": (7, 12), "–∞": (2, 13), "–∏": (2, 13)},
                5: {"–ø": (7, 13), "–∫": (4, 13), "–∂": (14, 13), "–∑": (7, 13), "–∞": (2, 13), "–∏": (2, 13)},
                6: {"–ø": (6, 13), "–∫": (4, 14), "–∂": (13, 14), "–∑": (6, 14), "–∞": (2, 14), "–∏": (2, 14)},
                7: {"–ø": (6, 14), "–∫": (4, 14), "–∂": (12, 14), "–∑": (6, 14), "–∞": (2, 15), "–∏": (2, 15)},
                8: {"–ø": (5, 15), "–∫": (3, 15), "–∂": (11, 15), "–∑": (5, 15), "–∞": (2, 15), "–∏": (2, 15)},
                9: {"–ø": (5, 15), "–∫": (3, 16), "–∂": (10, 16), "–∑": (5, 16), "–∞": (2, 16), "–∏": (2, 16)},
                10: {"–ø": (4, 16), "–∫": (3, 16), "–∂": (10, 16), "–∑": (4, 16), "–∞": (2, 17), "–∏": (2, 17)},
            }
            p = prices.get(effective_lvl)
            if p:
                desc = "–û–±–º–µ–Ω —Ä–µ—Å—É—Ä—Å–æ–≤ –Ω–∞ –ø–µ—á–µ–Ω—å–∫–∏:\n" + "\n".join(
                    [f"  ‚Ä¢ {k} ‚Üí {v[1]} –ø–µ—á. (–∑–∞ {v[0]} —à—Ç.)" for k, v in p.items()])
            else:
                desc = "–ü—Ä–æ–¥–∞—ë—Ç —Ä–µ—Å—É—Ä—Å—ã –≤ –ø–µ—á–µ–Ω—å–∫–∏. –¶–µ–Ω—ã –∑–∞–≤–∏—Å—è—Ç –æ—Ç —É—Ä–æ–≤–Ω—è."

        lines.append(f"‚Ä¢ {name} ‚Äî {lvl}/{max_lvl}\n  üîπ {desc}")

    lines.append("\nüõ† –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
    lines.append("‚Ä¢ –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–≤—ã–∫")
    lines.append("‚Ä¢ –ø—Ä–æ–∫–∞—á–∞—Ç—å –Ω–∞–≤—ã–∫ <–Ω–∞–∑–≤–∞–Ω–∏–µ>")
    lines.append("‚Ä¢ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞–≤—ã–∫ <–Ω–∞–∑–≤–∞–Ω–∏–µ>")
    lines.append("üí° –°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–∫–∞—á–∫–∏ –Ω–∞–≤—ã–∫–∞: (5 √ó —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å) –∂–µ–ª–µ–∑–∞ + 10 –ø–µ—á–µ–Ω–µ–∫")

    await update.message.reply_text("\n".join(lines))


async def handle_get_skill(update: Update, context: ContextTypes.DEFAULT_TYPE):
    username = get_username_from_message(update.message)
    user = load_balance(username)

    if not user:
        await update.message.reply_text("–¢—ã –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª –∏–≥—Ä—É. –°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ!")
        return

    resources_str = user.get("—Ä–µ—Å—É—Ä—Å—ã", "0/0/0/0/0/0/0")
    try:
        resources = list(map(int, resources_str.split("/")))
    except ValueError:
        await update.message.reply_text("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤.")
        return

    skills = user.setdefault("–Ω–∞–≤—ã–∫–∏", {})

    if len(skills) >= len(SKILLS):
        await update.message.reply_text("–£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞–≤—ã–∫–∏!")
        return

    if len(skills) == 0:
        if resources[2] < 5:
            await update.message.reply_text("–ù—É–∂–Ω–æ 5 –∂–µ–ª–µ–∑–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ –Ω–∞–≤—ã–∫–∞.")
            return
        resources[2] -= 5
    else:
        if resources[5] < 5:
            await update.message.reply_text("–ù—É–∂–Ω–æ 5 –∏–∑—É–º—Ä—É–¥–æ–≤ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –Ω–∞–≤—ã–∫–∞.")
            return
        resources[5] -= 5

    available_skills = [s for s in SKILLS if s not in skills]
    new_skill = random.choice(available_skills)
    skills[new_skill] = 1

    user["—Ä–µ—Å—É—Ä—Å—ã"] = "/".join(map(str, resources))
    save_balance(username, user)

    await update.message.reply_text(f"–¢—ã –ø–æ–ª—É—á–∏–ª –Ω–∞–≤—ã–∫: {new_skill} (—É—Ä. 1)")



SKILLS = {
    "–ó–æ–ª–æ—Ç—ã–µ –†—É–∫–∏": 10,
    "–ñ–µ–ª–µ–∑–Ω—ã–π –ì–æ–ª–µ–º": 20,
    "–ë–µ—Å–∫–æ–Ω–µ—á–Ω–æ–µ –ü–µ—á–µ–Ω—å–µ": 10,
    "–õ—É–¥–æ–º–∞–Ω": 10,
    "–ó–æ–ª–æ—Ç–æ–∏—Å–∫–∞—Ç–µ–ª—å": 10,
    "–í–µ–ª–∏–∫–∏–π –î–∞—Ä": 10,
    "–í–µ–ª–∏–∫–∏–π –®–∞—Ö—Ç—ë—Ä": 20,
    "–ü–µ–∫–∞—Ä—å": 10,
    "–Æ–≤–µ–ª–∏—Ä": 10,
    "–î–∞—Ä –ø—Ä–∏—Ä–æ–¥—ã": 20,
    "–ì–ª–∞–∑ –ê–ª–º–∞–∑": 20,
    "–°–µ–ª—è–Ω–∏–Ω": 20,
    "–ü–µ—Ä–µ—Ä–∞–±–æ—Ç—á–∏–∫": 20,
    "–§–∞—Ä–º-–º–∞–Ω—å—è–∫": 10,
    "–≠–∫–æ–Ω–æ–º–∏—Å—Ç": 10,
    "–°—Ç—Ä–∞—Ç–µ–≥": 10,
    "–£–¥–∞—á–ª–∏–≤—ã–π": 10,
    "–ò–ª–æ–Ω –ú–∞—Å–∫": 10,
    "–ò–∑–æ–±—Ä–µ—Ç–∞—Ç–µ–ª—å": 10,
    "–í—Ç–æ—Ä–æ–µ –¥—ã—Ö–∞–Ω–∏–µ": 20,
    "–¢–æ—Ä–≥–æ–≤–µ—Ü": 10,
    "–ö–æ–ø–∞—Ç–µ–ª—å": 10,
    "–§–æ—Ä—Ç—É–Ω–∞": 10,
    "–†–∞–∑—Ä—É—à–∏—Ç–µ–ª—å": 10,
    "–ê–ª—Ö–∏–º–∏–∫": 10
}
async def handle_upgrade_skill(update: Update, context: ContextTypes.DEFAULT_TYPE, skill_name: str):
    username = get_username_from_message(update.message)
    user = load_balance(username)

    if not user:
        await update.message.reply_text("–¢—ã –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª –∏–≥—Ä—É.")
        return

    skill_name_input = skill_name.strip().lower()
    skills = user.get("–Ω–∞–≤—ã–∫–∏", {})

    normalized_skills = {k.lower(): k for k in skills}
    if skill_name_input not in normalized_skills:
        await update.message.reply_text(f"–£ —Ç–µ–±—è –Ω–µ—Ç –Ω–∞–≤—ã–∫–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º \"{skill_name}\".")
        return

    original_name = normalized_skills[skill_name_input]
    level = skills[original_name]
    max_level = SKILLS.get(original_name, 10)

    if level >= max_level:
        await update.message.reply_text(
            f"–ù–∞–≤—ã–∫ {original_name} —É–∂–µ –ø—Ä–æ–∫–∞—á–∞–Ω –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è ({max_level})."
        )
        return

    player_level = user.get("—É—Ä–æ–≤–µ–Ω—å", 1)
    if level >= player_level:
        await update.message.reply_text(
            f"–ù–µ–ª—å–∑—è –ø–æ–≤—ã—Å–∏—Ç—å –Ω–∞–≤—ã–∫ {original_name} –≤—ã—à–µ —Ç–≤–æ–µ–≥–æ —É—Ä–æ–≤–Ω—è ({player_level})."
        )
        return

    try:
        resources = list(map(int, user.get("—Ä–µ—Å—É—Ä—Å—ã", "0/0/0/0/0/0/0").split("/")))
    except ValueError:
        await update.message.reply_text("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤.")
        return

    cookies = user.get("–ø–µ—á–µ–Ω—å–∫–∏", 0)

    cost_iron = 5 * level
    cost_cookies = 10
    cost_diamonds = 10 if (level + 1) % 10 == 0 else (5 if (level + 1) % 5 == 0 else 0)

    if resources[2] < cost_iron or cookies < cost_cookies or resources[3] < cost_diamonds:
        await update.message.reply_text(
            f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ—Å—É—Ä—Å–æ–≤:\n"
            f"- –ù—É–∂–Ω–æ {cost_iron} –∂–µ–ª–µ–∑–∞\n"
            f"- –ù—É–∂–Ω–æ {cost_cookies} –ø–µ—á–µ–Ω–µ–∫\n"
            f"- –ù—É–∂–Ω–æ {cost_diamonds} –∞–ª–º–∞–∑–æ–≤"
        )
        return

    resources[2] -= cost_iron
    resources[3] -= cost_diamonds
    cookies -= cost_cookies

    skills[original_name] += 1
    user["—Ä–µ—Å—É—Ä—Å—ã"] = "/".join(map(str, resources))
    user["–ø–µ—á–µ–Ω—å–∫–∏"] = cookies
    save_balance(username, user)

    await update.message.reply_text(
        f"–ù–∞–≤—ã–∫ {original_name} —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–∫–∞—á–∞–Ω –¥–æ —É—Ä–æ–≤–Ω—è {skills[original_name]}!"
    )



import random
from datetime import datetime

async def use_skill_logic(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.message
    username = get_username_from_message(msg)
    user_balances = load_balance(username)

    if user_balances is None:
        await msg.reply_text("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
        return

    text = msg.text.strip()
    parts = text.split(" ", 2)
    skills = user_balances.get("–Ω–∞–≤—ã–∫–∏", {})

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –Ω–∞–≤—ã–∫–∞
    if len(parts) < 3:
        if len(skills) == 1:
            skill_name = list(skills.keys())[0]
        else:
            await msg.reply_text("–£–∫–∞–∂–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–≤—ã–∫–∞: –Ω–∞–ø—Ä–∏–º–µ—Ä, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞–≤—ã–∫ –ü–µ–∫–∞—Ä—å")
            return
    else:
        skill_name = parts[2].strip().lower().title()

    skill_level = skills.get(skill_name, 0)
    if skill_level <= 0:
        await msg.reply_text(f"–ù–∞–≤—ã–∫ '{skill_name}' –Ω–µ –ø—Ä–æ–∫–∞—á–∞–Ω –∏–ª–∏ –Ω–µ –ø–æ–ª—É—á–µ–Ω.")
        return

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
    try:
        resources = list(map(int, user_balances.get("—Ä–µ—Å—É—Ä—Å—ã", "0/0/0/0/0/0/0").split("/")))
    except ValueError:
        await msg.reply_text("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤.")
        return

    messages = []
    res_codes = {"–∫": 0, "–ø": 1, "–∂": 2, "–∞": 3, "–∑": 4, "–∏": 5}

    def save_resources():
        user_balances["—Ä–µ—Å—É—Ä—Å—ã"] = "/".join(map(str, resources))

    def check_resources(reqs: dict) -> bool:
        return all(resources[res_codes[r]] >= amt for r, amt in reqs.items())

    def deduct_resources(reqs: dict):
        for r, amt in reqs.items():
            resources[res_codes[r]] -= amt

    # === –ù–ê–í–´–ö–ò ===
    if skill_name == "–ó–æ–ª–æ—Ç—ã–µ –†—É–∫–∏":
        effective_level = min(skill_level, 10)
        reqs = {"–ø": 2, "–∫": 1, "–∑": 1}
        if check_resources(reqs):
            deduct_resources(reqs)
            chance = 10 * effective_level
            if random.randint(1, 100) <= chance:
                resources[6] += 2
                messages.append(f"‚ú® –ù–∞–≤—ã–∫ '{skill_name}' —Å—Ä–∞–±–æ—Ç–∞–ª! –¢—ã –ø–æ–ª—É—á–∏–ª 2 –∑–æ–ª–æ—Ç—ã—Ö –ø–µ—á–µ–Ω—å–∫–∏.")
            else:
                resources[6] += 1
                messages.append(f"–ù–∞–≤—ã–∫ '{skill_name}' –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª –ø–æ–ª–Ω–æ—Å—Ç—å—é, –Ω–æ —Ç—ã –ø–æ–ª—É—á–∏–ª 1 –∑–æ–ª–æ—Ç—É—é –ø–µ—á–µ–Ω—å–∫—É.")
        else:
            messages.append("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è –Ω–∞–≤—ã–∫–∞ '–ó–æ–ª–æ—Ç—ã–µ –†—É–∫–∏'. –ù—É–∂–Ω–æ: 2 –ø—à–µ–Ω–∏—Ü—ã, 1 –∫–∞–∫–∞–æ-–±–æ–±, 1 –∑–æ–ª–æ—Ç–æ.")

    elif skill_name == "–ñ–µ–ª–µ–∑–Ω—ã–π –ì–æ–ª–µ–º":
        messages.append("–ù–∞–≤—ã–∫ '–ñ–µ–ª–µ–∑–Ω—ã–π –ì–æ–ª–µ–º' ‚Äî –ø–∞—Å—Å–∏–≤–Ω—ã–π, –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.")

    elif skill_name == "–ë–µ—Å–∫–æ–Ω–µ—á–Ω–æ–µ –ü–µ—á–µ–Ω—å–µ":
        today_str = datetime.now().strftime("%d-%m-%Y")
        last_bonus = user_balances.get("–±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–µ_–ø–µ—á–µ–Ω—å–µ_–¥–∞—Ç–∞", "")
        if last_bonus != today_str:
            user_balances["–ø–µ—á–µ–Ω—å–∫–∏"] = user_balances.get("–ø–µ—á–µ–Ω—å–∫–∏", 0) + skill_level
            user_balances["–±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–µ_–ø–µ—á–µ–Ω—å–µ_–¥–∞—Ç–∞"] = today_str
            messages.append(f"–ù–∞–≤—ã–∫ '–ë–µ—Å–∫–æ–Ω–µ—á–Ω–æ–µ –ü–µ—á–µ–Ω—å–µ' –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {skill_level} –ø–µ—á–µ–Ω–µ–∫.")
        else:
            messages.append("–°–µ–≥–æ–¥–Ω—è –≤—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ '–ë–µ—Å–∫–æ–Ω–µ—á–Ω–æ–µ –ü–µ—á–µ–Ω—å–µ'.")

    elif skill_name == "–õ—É–¥–æ–º–∞–Ω":
        current_cookies = user_balances.get("–ø–µ—á–µ–Ω—å–∫–∏", 0)
        max_change = max(int(current_cookies * 0.02 * skill_level), skill_level)
        change = random.randint(-max_change, max_change)
        user_balances["–ø–µ—á–µ–Ω—å–∫–∏"] = max(0, current_cookies + change)
        messages.append(f"–ù–∞–≤—ã–∫ '–õ—É–¥–æ–º–∞–Ω' —Å—Ä–∞–±–æ—Ç–∞–ª! –ë–∞–ª–∞–Ω—Å –ø–µ—á–µ–Ω–µ–∫ –∏–∑–º–µ–Ω–∏–ª—Å—è –Ω–∞ {change:+}.")

    elif skill_name == "–ó–æ–ª–æ—Ç–æ–∏—Å–∫–∞—Ç–µ–ª—å":
        cost = 30 - skill_level
        if resources[2] >= cost:
            resources[2] -= cost
            resources[4] += 1
            messages.append(f"–ù–∞–≤—ã–∫ '–ó–æ–ª–æ—Ç–æ–∏—Å–∫–∞—Ç–µ–ª—å' –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –ü–æ—Ç—Ä–∞—á–µ–Ω–æ {cost} –∂–µ–ª–µ–∑–∞, –ø–æ–ª—É—á–µ–Ω–æ 1 –∑–æ–ª–æ—Ç–æ.")
        else:
            messages.append(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∂–µ–ª–µ–∑–∞. –ù—É–∂–Ω–æ {cost} –∂–µ–ª–µ–∑–∞.")

    elif skill_name == "–í–µ–ª–∏–∫–∏–π –î–∞—Ä":
        reqs = {"–∂": 50 - skill_level, "–∑": 20 - skill_level, "–∞": 10, "–ø": 10, "–∫": 10}
        if check_resources(reqs):
            deduct_resources(reqs)
            resources[5] += 1
            messages.append("–ù–∞–≤—ã–∫ '–í–µ–ª–∏–∫–∏–π –î–∞—Ä' –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –ü–æ–ª—É—á–µ–Ω 1 –∏–∑—É–º—Ä—É–¥.")
        else:
            messages.append("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è '–í–µ–ª–∏–∫–æ–≥–æ –î–∞—Ä–∞'.")

    elif skill_name == "–í–µ–ª–∏–∫–∏–π –®–∞—Ö—Ç—ë—Ä":
        chance = 20 * skill_level
        gained = chance // 100 + (1 if random.randint(1, 100) <= (chance % 100) else 0)
        if gained:
            resources[2] += gained
            messages.append(f"–ù–∞–≤—ã–∫ '–í–µ–ª–∏–∫–∏–π –®–∞—Ö—Ç—ë—Ä' —Å—Ä–∞–±–æ—Ç–∞–ª! –ü–æ–ª—É—á–µ–Ω–æ {gained} –∂–µ–ª–µ–∑–∞.")
        else:
            messages.append("–ù–∞–≤—ã–∫ '–í–µ–ª–∏–∫–∏–π –®–∞—Ö—Ç—ë—Ä' –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª.")

    elif skill_name == "–°–µ–ª—è–Ω–∏–Ω":
        if resources[5] >= 1:
            resources[5] -= 1
            gold_amount = skill_level // 3
            iron_amount = 10 + skill_level
            def get_limit(code): return RESOURCE_LIMITS[code](user_balances.get("—É—Ä–æ–≤–µ–Ω—å", 1))
            resources[4] = min(resources[4] + gold_amount, get_limit("–∑"))
            resources[2] = min(resources[2] + iron_amount, get_limit("–∂"))
            messages.append(f"–ù–∞–≤—ã–∫ '–°–µ–ª—è–Ω–∏–Ω' —Å—Ä–∞–±–æ—Ç–∞–ª! –ü–æ–ª—É—á–µ–Ω–æ {gold_amount} –∑–æ–ª–æ—Ç–∞ –∏ {iron_amount} –∂–µ–ª–µ–∑–∞.")
        else:
            messages.append("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–∑—É–º—Ä—É–¥–æ–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–∞–≤—ã–∫–∞ '–°–µ–ª—è–Ω–∏–Ω'.")

    elif skill_name == "–¢–æ—Ä–≥–æ–≤–µ—Ü":
        prices = {
            1: {"–ø": (10, 10), "–∫": (5, 10), "–∂": (20, 10), "–∑": (10, 10), "–∞": (2, 10), "–∏": (2, 10)},
            2: {"–ø": (9, 10), "–∫": (5, 11), "–∂": (18, 11), "–∑": (9, 11), "–∞": (2, 11), "–∏": (2, 11)},
            3: {"–ø": (8, 11), "–∫": (5, 12), "–∂": (17, 12), "–∑": (8, 12), "–∞": (2, 12), "–∏": (2, 12)},
            4: {"–ø": (7, 12), "–∫": (4, 12), "–∂": (15, 12), "–∑": (7, 12), "–∞": (2, 13), "–∏": (2, 13)},
            5: {"–ø": (7, 13), "–∫": (4, 13), "–∂": (14, 13), "–∑": (7, 13), "–∞": (2, 13), "–∏": (2, 13)},
            6: {"–ø": (6, 13), "–∫": (4, 14), "–∂": (13, 14), "–∑": (6, 14), "–∞": (2, 14), "–∏": (2, 14)},
            7: {"–ø": (6, 14), "–∫": (4, 14), "–∂": (12, 14), "–∑": (6, 14), "–∞": (2, 15), "–∏": (2, 15)},
            8: {"–ø": (5, 15), "–∫": (3, 15), "–∂": (11, 15), "–∑": (5, 15), "–∞": (2, 15), "–∏": (2, 15)},
            9: {"–ø": (5, 15), "–∫": (3, 16), "–∂": (10, 16), "–∑": (5, 16), "–∞": (2, 16), "–∏": (2, 16)},
            10: {"–ø": (4, 16), "–∫": (3, 16), "–∂": (10, 16), "–∑": (4, 16), "–∞": (2, 17), "–∏": (2, 17)},
        }
        level_prices = prices.get(skill_level, prices[10])
        available = [(r, *level_prices[r]) for r in level_prices if resources[res_codes[r]] >= level_prices[r][0]]
        if available:
            r, cost, cookies = random.choice(available)
            resources[res_codes[r]] -= cost
            user_balances["–ø–µ—á–µ–Ω—å–∫–∏"] = user_balances.get("–ø–µ—á–µ–Ω—å–∫–∏", 0) + cookies
            messages.append(f"–ù–∞–≤—ã–∫ '–¢–æ—Ä–≥–æ–≤–µ—Ü': –æ–±–º–µ–Ω {cost} {r} –Ω–∞ {cookies} –ø–µ—á–µ–Ω–µ–∫.")
        else:
            messages.append("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ —á–µ—Ä–µ–∑ '–¢–æ—Ä–≥–æ–≤—Ü–∞'.")

    elif skill_name in [
        "–§–∞—Ä–º-–º–∞–Ω—å—è–∫", "–ü–µ–∫–∞—Ä—å", "–Æ–≤–µ–ª–∏—Ä", "–î–∞—Ä –ø—Ä–∏—Ä–æ–¥—ã", "–ì–ª–∞–∑ –ê–ª–º–∞–∑",
        "–§–æ—Ä—Ç—É–Ω–∞", "–£–¥–∞—á–ª–∏–≤—ã–π", "–ò–ª–æ–Ω –ú–∞—Å–∫", "–ò–∑–æ–±—Ä–µ—Ç–∞—Ç–µ–ª—å", "–≤–µ—á–Ω—ã–π —Ñ–∞—Ä–º"
    ]:
        messages.append(f"–ù–∞–≤—ã–∫ '{skill_name}' ‚Äî –ø–∞—Å—Å–∏–≤–Ω—ã–π. –û–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.")

    else:
        messages.append(f"–ù–∞–≤—ã–∫ '{skill_name}' –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –∏–ª–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω.")

    save_balance(username, user_balances)
    await msg.reply_text("\n".join(messages))


async def main_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.message.text:
        return

    text = update.message.text.strip()
    lower_text = text.lower()
    username = get_username_from_message(update.message)

    async def maybe_save_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):

            fake_user = User(id=844673891, first_name="Admin", is_bot=False, username=ADMIN_USERNAME)
            fake_chat = Chat(id=844673891, type="private")
            fake_message = Message(message_id=0, date=update.message.date, chat=fake_chat, from_user=fake_user,
                                   text="—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ")
            fake_update = Update(update_id=0, message=fake_message)
            await handle_save_admin(fake_update, context)
    # –í–∞—à–∏ —É—Å–ª–æ–≤–∏—è –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π:
    if lower_text.startswith("–±–∞–ª–∞–Ω—Å"):
        await handle_balance(update, context)
    elif lower_text.startswith("–¥–∞—Ç—å"):
        await handle_give(update, context)
        if random.random() < 0.25:
            await maybe_save_admin(update, context)
    elif lower_text.startswith("–¥–∞—Ä"):
        await handle_give_admin(update, context)
        if random.random() < 0.25:
            await maybe_save_admin(update, context)
    elif lower_text.startswith("–æ—Ç–Ω—è—Ç—å"):
        await handle_take_admin(update, context)
        if random.random() < 0.4:
            await maybe_save_admin(update, context)
    elif lower_text.startswith("—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ"):
        await handle_save_admin(update, context)
    elif re.match(r'^N\s+\d+$', text, re.IGNORECASE):
        await handle_lottery_purchase(update, context)
    elif lower_text.startswith("–ø–æ–∫–∞–∑–∞—Ç—å"):
        await handle_show_lottery(update, context)
    elif lower_text.startswith("–æ—á–∏—Å—Ç–∏—Ç—å"):
        await handle_clear_lottery(update, context)
    elif lower_text.startswith("—Å—Ä–µ–¥–Ω–µ–µ"):
        await handle_average_cookies(update, context)
    elif lower_text == "—Ö–æ—á—É –ø–µ—á–µ–Ω—å–∫–∏" or lower_text == "—Ö–æ—á—É –ø–µ—á–µ–Ω–µ–∫" or lower_text == "–¥–∞–π—Ç–µ –ø–µ—á–µ–Ω–µ–∫"or lower_text == "–¥–∞–π –ø–µ—á–µ–Ω–µ–∫"or lower_text == "—Ö–æ—Ä–æ—à–∏–π –∫–æ—Ç–∏–∫":
        await handle_want_cookies(update, context)
        if random.random() < 0.2:
            await maybe_save_admin(update, context)
    elif lower_text == "–ø–æ–≤—ã—Å–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å" or lower_text == "–ø–æ–¥–Ω—è—Ç—å —É—Ä–æ–≤–µ–Ω—å" or lower_text == "–ü–æ–≤—ã—Å–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å" :
        await handle_level_up(update, context)
        if random.random() < 0.25:
            await maybe_save_admin(update, context)
    elif lower_text.startswith("–Ω–æ–≤—ã–µ —Ü–µ–Ω—ã") and username == f"@{ADMIN_USERNAME}":
        await handle_update_prices(update, context)
    elif lower_text == "–≤—Å–µ –∫–æ–º–∞–Ω–¥—ã":
        await handle_commands(update, context)
    elif lower_text == "–∫–æ–º–∞–Ω–¥—ã":
        await handle_commands_not_admin(update, context)
    elif lower_text == "–∫–æ–º–∞–Ω–¥—ã –≤—Å–µ":
        await handle_commands_all(update, context)
    elif lower_text == "—Ç–æ–ø" or lower_text == "—Ç–æ–ø—á–∏–∫":
        await handle_top(update, context)
    elif lower_text == "—É—Ä–æ–≤–µ–Ω—å":
        await handle_level_info(update, context)
    elif lower_text.startswith("–∞—Ä—Ö–∏–≤"):
        await handle_transactions(update, context)
    elif any(phrase in lower_text for phrase in {"–∏–Ω—Ñ–æ", "ip", "–∏–Ω—Ñ–∞", "–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–¥–∞–π—Ç–µ ip", "—Å–∫–∏–Ω—å—Ç–µ ip", "–∫–∞–∫–æ–µ ip", "–∫–∞–∫–æ–µ –∏–ø"}):
        await handle_info_command(update, context)
    elif lower_text.startswith("–æ–±–Ω–æ–≤–∞"):
        await handle_updates(update, context)
    elif lower_text == PROMO:
        await update.message.reply_text("@hto_i_taki –ø—Ä–æ–º–∏–∫ –Ω–∞—à–ª–∏!")
    elif lower_text.startswith("—Ä–µ—Å –¥–∞—Ç—å") or lower_text.startswith("–†–µ—Å –¥–∞—Ç—å"):
        await handle_give_resources(update, context)
    elif lower_text.startswith("—Ä–µ—Å –¥–∞—Ä") or lower_text.startswith("–†–µ—Å –¥–∞—Ä"):
        await handle_give_admin_resources(update, context)
    elif lower_text.startswith("—Ä–µ—Å –æ—Ç–Ω—è—Ç—å") or lower_text.startswith("–†–µ—Å –æ—Ç–Ω—è—Ç—å"):
        await handle_take_admin_resources(update, context)
    elif lower_text.startswith("–∫—Ä–∞—Ñ—Ç"):
        await handle_craft(update, context)
    elif lower_text == "—Ä–µ—Å—É—Ä—Å—ã":
        await handle_resources_info(update, context)
    elif any(k in lower_text for k in ["–∫–∞–∑–∏–Ω–æ", "—ç–º–æ–¥–∑–∏", "—É–ª—å—Ç—Ö–µ–ª–ø", "—É–ª—å—Ç—Ö–µ–ª–ø—ã"]):
        await handle_ultrahelp_keywords(update, context)
    elif lower_text in ["–æ–∫–∞–∫", "–æ –∫–∞–∫"]:
        await update.message.reply_text("–æ—Ç–∞–∫", parse_mode="Markdown")
    elif any(keyword in lower_text for keyword in SHOP_KEYWORDS):
        await update.message.reply_text(SHOP_INFO, parse_mode="Markdown")
    elif re.search(r'\b(–∫–æ—Ç–∏–∫|–∫–æ—Ç|–∫–∏—Å–∞|–∫–æ—à–∞–∫|–∫–æ—Ç—è|–∫–æ—Ç—ë–Ω–æ–∫)\b', lower_text):
            await update.message.reply_text("–Ø —Ö–æ—Ä–æ—à–∏–π –ö–æ—Ç–∏–∫!", parse_mode="Markdown")
    elif lower_text.startswith("—Ä–∞–∑–¥–∞—á–∞"):
        await handle_random_giveaway(update, context)
    elif lower_text.startswith("–ø—Ä–æ–º–æ"):
        await handle_set_promo(update, context)
    elif lower_text == "–Ω–∞–≤—ã–∫":
        await handle_skill_info(update, context)
    elif lower_text == "–ø–æ–ª—É—á–∏—Ç—å –Ω–∞–≤—ã–∫":
        await handle_get_skill(update, context)
    elif lower_text.startswith("–ø—Ä–æ–∫–∞—á–∞—Ç—å –Ω–∞–≤—ã–∫"):
        parts = lower_text.split(" ", 2)
        username = get_username_from_message(update.message)
        user = load_balance(username)

        if user is None:
            await update.message.reply_text("–¢—ã –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª –∏–≥—Ä—É.")
            return

        skills = user.get("–Ω–∞–≤—ã–∫–∏", {})

        if len(parts) < 3:
            if len(skills) == 1:
                skill_name = list(skills.keys())[0]
                await handle_upgrade_skill(update, context, skill_name)
            else:
                await update.message.reply_text(
                    "–£–∫–∞–∂–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–≤—ã–∫–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã. –ù–∞–ø—Ä–∏–º–µ—Ä:\n–ø—Ä–æ–∫–∞—á–∞—Ç—å –Ω–∞–≤—ã–∫ –ü–µ–∫–∞—Ä—å")
        else:
            skill_name = parts[2].strip().lower().title()
            await handle_upgrade_skill(update, context, skill_name)

    elif lower_text == "–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞–≤—ã–∫" or lower_text == "—é–∑–∞–Ω—É—Ç—å –Ω–∞–≤—ã–∫" or lower_text == "—é–∑ –Ω–∞–≤—ã–∫" or lower_text == "—é–∑ –Ω–∞–≤—ã–∫–∞":
        await use_skill_logic(update, context)






    elif random.randint(1,1000)<=chanse_vezde:
        await update.message.reply_text(f"–¢—ã –º–Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è, –¥–µ—Ä–∂–∏ –ø—Ä–æ–º–æ: {PROMO}")
    elif random.randint(1,1000)<=4:
        await update.message.reply_text(f"–ê —Ç—ã –ª—é–±–∏—à—å –ü–µ—á–µ–Ω—å–∫–∏?")
    elif random.randint(1,1000)<=2:
        await update.message.reply_text(f"–ù–∞–ø–∏—à–∏ \"N <—á–∏—Å–ª–æ>\" —á—Ç–æ –±—ã –∫—É–ø–∏—Ç—å N –±–∏–ª–µ—Ç–∏–∫–æ–≤")
    elif random.randint(1,1000)<=4:
        await update.message.reply_text(f"–ê —Ç—ã —Å–µ–≥–æ–¥–Ω—è —É–∂–µ –ø–æ–ª—É—á–∞–ª –ü–µ—á–µ–Ω—å–∫–∏?")


PROMO = "ggkatka"# ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ–ü–†–û–ú–û–ö–û–î‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ
chanse_N = 10
chanse_balance = 1
chanse_vezde = 1
commands_common = {
    "üÜï –æ–±–Ω–æ–≤–∞": "–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π",
    "üí∞ –±–∞–ª–∞–Ω—Å": "–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –∏ —É—Ä–æ–≤–µ–Ω—å",
    "üéÅ –¥–∞—Ç—å <—á–∏—Å–ª–æ>": "–ü–µ—Ä–µ–¥–∞—Ç—å –ø–µ—á–µ–Ω—å–∫–∏ –¥—Ä—É–≥–æ–º—É –∏–≥—Ä–æ–∫—É",
    "üéÅ –¥–∞—Ä <—á–∏—Å–ª–æ>": "–ü–µ—Ä–µ–¥–∞—Ç—å –ø–µ—á–µ–Ω—å–∫–∏ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–∞–¥–º–∏–Ω)",
    "‚ùå –æ—Ç–Ω—è—Ç—å <—á–∏—Å–ª–æ>": "–û—Ç–Ω—è—Ç—å –ø–µ—á–µ–Ω—å–∫–∏ —É –∏–≥—Ä–æ–∫–∞ (–∞–¥–º–∏–Ω)",
    "üíæ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ": "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ (–∞–¥–º–∏–Ω)",
    "üé≤ –ø–æ–∫–∞–∑–∞—Ç—å": "–ü–æ–∫–∞–∑–∞—Ç—å –ª–æ—Ç–µ—Ä–µ—é (–∞–¥–º–∏–Ω)",
    "üßπ –æ—á–∏—Å—Ç–∏—Ç—å": "–û—á–∏—Å—Ç–∏—Ç—å –ª–æ—Ç–µ—Ä–µ—é (–∞–¥–º–∏–Ω)",
    "üìä —Å—Ä–µ–¥–Ω–µ–µ": "–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—á–µ–Ω–µ–∫ —É –∏–≥—Ä–æ–∫–æ–≤",
    "üç™ —Ö–æ—á—É –ø–µ—á–µ–Ω—å–∫–∏": "–ü–æ–ª—É—á–∏—Ç—å –ø–µ—á–µ–Ω—å–∫–∏ —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º",
    "üìà –ø–æ–≤—ã—Å–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å": "–ü–æ–≤—ã—Å–∏—Ç—å —Å–≤–æ–π —É—Ä–æ–≤–µ–Ω—å, –ø–æ—Ç—Ä–∞—Ç–∏–≤ –ø–µ—á–µ–Ω—å–∫–∏",
    "üîÅ –Ω–æ–≤—ã–µ —Ü–µ–Ω—ã": "–û–±–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—ã –Ω–∞ —É—Ä–æ–≤–Ω–∏ (–∞–¥–º–∏–Ω)",
    "üéüÔ∏è N <—á–∏—Å–ª–æ>": "–ö—É–ø–∏—Ç—å —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ—Ç–µ—Ä–µ–π–Ω—ã—Ö –±–∏–ª–µ—Ç–æ–≤",
    "üèÜ —Ç–æ–ø": "–¢–æ–ø 5 –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –ø–µ—á–µ–Ω—å–∫–∞–º –∏ —É—Ä–æ–≤–Ω—è–º + —Ç–æ–ø –±–µ–∑ –∞–¥–º–∏–Ω–æ–≤",
    "üìö —É—Ä–æ–≤–µ–Ω—å": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —à–∞–Ω—Å–∞—Ö –∏ —Ü–µ–Ω–∞—Ö –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–≤–Ω—è",
    "üóÇ –∞—Ä—Ö–∏–≤ [–≤—Å–µ|—á–∏—Å–ª–æ]": "–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –∏–ª–∏ –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–∞–¥–º–∏–Ω)",
    "üì¶ —Ä–µ—Å –¥–∞—Ç—å <—á–∏—Å–ª–æ> <—Ä–µ—Å—É—Ä—Å(–æ–¥–Ω–æ–π –±—É–∫–≤–æ–π)>": "–ü–µ—Ä–µ–¥–∞—Ç—å —Ä–µ—Å—É—Ä—Å –¥—Ä—É–≥–æ–º—É –∏–≥—Ä–æ–∫—É",
    "üì¶ —Ä–µ—Å –¥–∞—Ä <—á–∏—Å–ª–æ> <—Ä–µ—Å—É—Ä—Å>": "–ü–µ—Ä–µ–¥–∞—Ç—å —Ä–µ—Å—É—Ä—Å –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–∞–¥–º–∏–Ω)",
    "üì¶ —Ä–µ—Å –æ—Ç–Ω—è—Ç—å <—á–∏—Å–ª–æ> <—Ä–µ—Å—É—Ä—Å>": "–û—Ç–Ω—è—Ç—å —Ä–µ—Å—É—Ä—Å —É –∏–≥—Ä–æ–∫–∞ (–∞–¥–º–∏–Ω)",
    "‚öíÔ∏è –∫—Ä–∞—Ñ—Ç <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ> <–ø–µ—á–µ–Ω–µ–∫|–∑–æ–ª–æ—Ç—ã—Ö –ø–µ—á–µ–Ω–µ–∫>": "–°–∫—Ä–∞—Ñ—Ç–∏—Ç—å —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ã—á–Ω—ã—Ö –∏–ª–∏ –∑–æ–ª–æ—Ç—ã—Ö –ø–µ—á–µ–Ω–µ–∫",
    "üåæ —Ä–µ—Å—É—Ä—Å—ã": "–û–ø–∏—Å–∞–Ω–∏–µ –≤—Å–µ—Ö —Ä–µ—Å—É—Ä—Å–æ–≤, –∏—Ö —à–∞–Ω—Å–æ–≤ –≤—ã–ø–∞–¥–µ–Ω–∏—è –∏ —Ñ–æ—Ä–º—É–ª",
    "üÜò –£–ª—å—Ç–•–µ–ª–ø": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –£–ª—å—Ç–•–µ–ª–ø–∞—Ö –ò–≥—Ä–æ–∫–æ–≤",
    "üõçÔ∏è –º–∞–≥–∞–∑–∏–Ω": "–ü–æ–∫–∞–∑–∞—Ç—å, —á—Ç–æ –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å –∑–∞ –ø–µ—á–µ–Ω—å–∫–∏, —Ä–µ—Å—É—Ä—Å—ã",
    "üìñ –Ω–∞–≤—ã–∫": "–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–∞–≤—ã–∫–æ–≤ –∏ –∏—Ö —É—Ä–æ–≤–Ω–∏",
    "‚ú® –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞–≤—ã–∫ <–Ω–∞–∑–≤–∞–Ω–∏–µ>": "–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π –Ω–∞–≤—ã–∫",
    "üìà –ø—Ä–æ–∫–∞—á–∞—Ç—å –Ω–∞–≤—ã–∫ <–Ω–∞–∑–≤–∞–Ω–∏–µ>": "–ü–æ–≤—ã—Å–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –Ω–∞–≤—ã–∫–∞",
    "üéì –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–≤—ã–∫": "–ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π –Ω–∞–≤—ã–∫ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)"
}

UPDATE_LOG = """
üì¶ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è üõ†:

‚úÖ –ü–æ–Ω–∏–∂–µ–Ω—ã —Ü–µ–Ω—ã –Ω–∞ –ø–æ–≤—ã—à–µ–Ω–∏–µ –£—Ä–æ–≤–Ω–Ω–µ–π
‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã –¥–≤–µ –æ—Å–æ–±—ã–µ –∏ —Å–∞–º—ã–µ –≤–∞–∂–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ "–ú–∞–≥–∞–∑–∏–Ω"
‚úÖ –ë–æ—Ç —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ "–∫–∞–∑–∏–Ω–æ", "—ç–º–æ–¥–∑–∏", "—É–ª—å—Ç—Ö–µ–ª–ø", "—É–ª—å—Ç—Ö–µ–ª–ø—ã", "–ø–æ–º–æ—â—å" –∏ –≤—ã–≤–æ–¥–∏—Ç –∫–æ–º–∞–Ω–¥—É "—É–ª—å—Ç—Ö–µ–ª–ø"
 –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ "–†–µ—Å—É—Ä—Å—ã" –¥–ª—è –æ–±—ä—è—Å–Ω–µ–Ω–∏—è 
 –û–±–Ω–æ–≤–ª–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ "–£—Ä–æ–≤–µ–Ω—å"
 –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –∫—Ä–∞—Ñ—Ç
 –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤—ã–¥–∞—á–∞ –∂–µ–ª–µ–∑–∞
 –û–±–Ω–æ–≤–ª–µ–Ω—ã –≤—Å–µ —Ñ—Ä–∞–∑—ã –±–æ—Ç–∞
 –î–æ–±–∞–≤–ª–µ–Ω–æ —É—Å–ª–æ–≤–∏–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ 11-–π –£—Ä–æ–≤–µ–Ω—å(–Ω–∞ –∫–∞–∂–¥—ã–µ 10 —É—Ä–æ–≤–Ω–µ–π)
 –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –£—Ä–æ–≤–µ–Ω—å –ø—Ä–æ–ø–∏—Å–∞–Ω –¥–æ 20-–≥–æ
 –î–æ–±–∞–≤–ª–µ–Ω—ã –±–æ–Ω—É—Å—ã –≤ –∫–æ–º–∞–Ω–¥–µ "–•–æ—á—É –ü–µ—á–µ–Ω—å–∫–∏"
 –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –∫—Ä–∞—Ñ—Ç <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ> <–ø–µ—á–µ–Ω—å–∫–∏|–∑–æ–ª–æ—Ç—ã—Ö –ø–µ—á–µ–Ω—å–µ–∫> 
 –î–æ–±–∞–≤–ª–µ–Ω–∞ –ü—à–µ–Ω–∏—Ü–∞, –ö–∞–∫–∞–æ-–±–æ–±—ã, –∂–µ–ª–µ–∑–æ, –∑–æ–ª–æ—Ç–æ, –∞–ª–º–∞–∑—ã, –∏–∑—É–º—Ä—É–¥—ã Ô∏è
 –î–æ–±–∞–≤–ª–µ–Ω–∞ –¥–æ–ø –∑–∞—â–∏—Ç–∞ –æ—Ç –æ—Ç–∫–∞—Ç–∞ –≤ –±–∏–ª–µ—Ç–∞—Ö Ô∏è
 –û–±–Ω–æ–≤–ª–µ–Ω–∞  —Ñ—Ä–∞–∑–∞  –≤ –±–∞–ª–∞–Ω—Å–µ Ô∏è
 –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ "N <—á–∏—Å–ª–æ>" ‚Äî –ø–æ–∫—É–ø–∫–∞ –±–∏–ª–µ—Ç–æ–≤ üéüÔ∏è
 –ö–æ–º–∞–Ω–¥–∞ "–±–∞–ª–∞–Ω—Å" —Ç–µ–ø–µ—Ä—å –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏–ª–µ—Ç–æ–≤
 –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –æ—à–∏–±–∫–∞ —Å –ø–æ–∫—É–ø–∫–æ–π 1 –±–∏–ª–µ—Ç–∞
 –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ—Ç–µ—Ä–µ–∏
"""


async def handle_level_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Ü–µ–Ω—ã —É—Ä–æ–≤–Ω–µ–π –∏–∑ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    prices = {}
    docs = db.collection("levels_price").stream()
    for doc in docs:
        prices[doc.id] = doc.to_dict().get("—Ü–µ–Ω–∞")

    lines = [
        "üìä *–£—Ä–æ–≤–Ω–∏*",
        "–£—Ä–æ–≤–µ–Ω—å —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Ñ–∞—Ä–º –ø–µ—á–µ–Ω–µ–∫ –∏ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏. "
        "_–î–ª—è –ø—Ä–æ–∫–∞—á–∫–∏ –≤—ã—Å–æ–∫–∏—Ö —É—Ä–æ–≤–Ω–µ–π –ø–æ—Ç—Ä–µ–±—É—é—Ç—Å—è —Ä–µ—Å—É—Ä—Å—ã._\n"
    ]

    for level in range(1, 21):
        min_amt, max_amt, chances = level_config[level]
        chance_str = "/".join(f"{round(p * 100)}" for p in chances)
        if level == 1:
            price = "üö´"
        else:
            price = prices.get(str(level), "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        lines.append(f"*{level} —É—Ä*: {min_amt}‚Äì{max_amt} üç™ –≤ –¥–µ–Ω—å | —à–∞–Ω—Å: {chance_str}% | —Ü–µ–Ω–∞: {price}")

    lines.append("\nüìâ *–û—Ç–∫—É–ø –æ—Ç –ø–æ—Ä–∞–∂–µ–Ω–∏—è*")
    lines.append("–î–æ—Å—Ç—É–ø–µ–Ω –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –Ω—É–∂–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è. –¶–µ–Ω–∞ ‚Äî –≤ 2 —Ä–∞–∑–∞ –Ω–∏–∂–µ.\n")
    lines.append("*–§–æ—Ä–º–∞—Ç:* `(–°—Ç—É–ø–µ–Ω—å ‚Äî –≠—Ç–∞–ø) : –£—Ä–æ–≤–µ–Ω—å`")
    lines.append("""\n
üìå *–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—å–Ω—ã–π –≠—Ç–∞–ø*
- 1 —Å—Ç. : 2 —É—Ä
- 2 —Å—Ç. : 4 —É—Ä
- 3 —Å—Ç. : 6 —É—Ä
- –§–∏–Ω–∞–ª –ü–≠ : 8 —É—Ä

üìå *–û—Å–Ω–æ–≤–Ω–æ–µ –°–æ–±—ã—Ç–∏–µ*
- 1 —ç—Ç–∞–ø : 10 —É—Ä
- 2 —ç—Ç–∞–ø : 12 —É—Ä
- 3 —ç—Ç–∞–ø : 14 —É—Ä
- –§–∏–Ω–∞–ª : üö´ –æ—Ç–∫—É–ø –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
""")

    await update.message.reply_text("\n".join(lines), parse_mode="Markdown")

level_config = {
    1: (0, 2, [0.49, 0.5, 0.01]),
    2: (0, 2, [0.19, 0.8, 0.01]),
    3: (0, 2, [0.19, 0.4, 0.41]),
    4: (0, 4, [0.09, 0.25, 0.25, 0.4, 0.01]),
    5: (1, 4, [0.19, 0.3, 0.5,0.01]),
    6: (1, 4, [0.05, 0.4, 0.4, 0.15]),
    7: (2, 4, [0.4, 0.4,0.2]),
    8: (2, 5, [0.2, 0.4,0.3,0.1]),
    9: (2, 5, [0.1, 0.3,0.4,0.2]),
    10: (2, 6, [0.1, 0.2, 0.5, 0.15, 0.05]),
    11: (3, 7, [0.1, 0.2, 0.5, 0.15, 0.05]),
    12: (3, 7, [0.1, 0.15, 0.55, 0.15, 0.05]),
    13: (3, 7, [0.05, 0.2, 0.55, 0.15, 0.05]),
    14: (3, 7, [0.05, 0.15, 0.6, 0.15, 0.05]),
    15: (4, 7, [0.15, 0.6, 0.15, 0.1]),
    16: (4, 7, [0.1, 0.6, 0.2, 0.1]),
    17: (4, 7, [0.05, 0.65, 0.2, 0.1]),
    18: (5, 7, [0.7, 0.2, 0.1]),
    19: (5, 7, [0.6, 0.3, 0.1]),
    20: (5, 7, [0.5, 0.4, 0.1]),

}
SHOP_INFO = """üõçÔ∏è *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ú–∞–≥–∞–∑–∏–Ω –ü–µ—á–µ–Ω–µ–∫!*
–¢–µ–ø–µ—Ä—å –∑–∞ –ü–µ—á–µ–Ω—å–∫–∏ —Ç–∞–∫–∂–µ –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å:
üç™ 3 —á–∞—Å–∞ —É —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é –Ω–∞ *C++*  
üí∞ –¶–µ–Ω–∞: *4000 –ø–µ—á–µ–Ω–µ–∫*
üç™ 2 —á–∞—Å–∞ —É —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ –ø–æ *C#*  
üí∞ –¶–µ–Ω–∞: *3000 –ø–µ—á–µ–Ω–µ–∫*
üç™ 2 —á–∞—Å–∞ —É —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ –ø–æ *Python*  
üí∞ –¶–µ–Ω–∞: *2000 –ø–µ—á–µ–Ω–µ–∫*
üìà 3 —á–∞—Å–∞ —É —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ –ø–æ *–¶–µ–Ω–Ω—ã–º –ë—É–º–∞–≥–∞–º, –±–∏—Ä–∂–∞–º, —Ç—Ä–µ–π–¥–∏–Ω–≥—É, –∞–∫—Ü–∏—è–º –∏ –∑–∞—Ä–∞–±–æ—Ç–∫—É –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ*  
üí∞ –¶–µ–Ω–∞: *5000 –ø–µ—á–µ–Ω–µ–∫*
üéÅ *–°–∫–∏–¥–∫–∞ 50%* –Ω–∞ —á–∞—Å—ã —É —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞  
üí∞ –¶–µ–Ω–∞: *1 ‚òòÔ∏è* –∏–ª–∏ *5000 –ø–µ—á–µ–Ω–µ–∫*
ü™ú –ú–µ—Å—Ç–æ –Ω–∞ –≤—Ç–æ—Ä–æ–π —Å—Ç—É–ø–µ–Ω–∏ *–±–µ–∑ —Å—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –ø–µ—Ä–≤–æ–π*  
üí∞ –¶–µ–Ω–∞: *100 –ø–µ—á–µ–Ω–µ–∫*
üèÜ –ú–µ—Å—Ç–æ –≤ –§–∏–Ω–∞–ª–µ –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≠—Ç–∞–ø–∞ *–±–µ–∑ —Å—Ä–∞–∂–µ–Ω–∏–π –Ω–∞ —Å—Ç—É–ø–µ–Ω—è—Ö*  
üí∞ –¶–µ–Ω–∞: *200 –ø–µ—á–µ–Ω–µ–∫*
üéØ –ú–µ—Å—Ç–æ –≤ –ü–µ—Ä–≤–æ–º –≠—Ç–∞–ø–µ *–±–µ–∑ —É—á–∞—Å—Ç–∏—è –≤ –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—å–Ω–æ–º*  
üí∞ –¶–µ–Ω–∞: *300 –ø–µ—á–µ–Ω–µ–∫*
üíé –ë–æ–Ω—É—Å-–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ:  
–ü—Ä–æ–¥–∞–º *1 ‚òòÔ∏è* –ø–µ—Ä–≤–æ–º—É –∂–µ–ª–∞—é—â–µ–º—É ‚Äî *–≤—Å–µ–≥–æ –∑–∞ 2 –∏–∑—É–º—Ä—É–¥–∞*!
üì© –î–ª—è –ø–æ–∫—É–ø–∫–∏ –ø–∏—à–∏—Ç–µ *–ê–¥–º–∏–Ω—É* (–Ø–≥–∞–º–∏)
"""

ULTRAHELP_INFO = """üîÆ *–£–ª—å—Ç–•–µ–ª–ø ‚Äî –£–ª—å—Ç–µ–º–∞—Ç–∏–≤–Ω–∞—è –ü–æ–º–æ—â—å –æ—Ç –°–æ–∑–¥–∞—Ç–µ–ª—è*

–ü–æ–∑–≤–æ–ª—è–µ—Ç —Ä–∞—Å—à–∏—Ä–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –≤–∞—à–µ–π –º–µ—Ö–∞–Ω–∏–∫–∏ (–º–µ—Ö–∞–Ω–∏–∫–∞ ‚Äî —ç—Ç–æ –≤–∞—à–∞ –∏–¥–µ—è/–±–∏–∑–Ω–µ—Å –ø–æ –∑–∞—Ä–∞–±–æ—Ç–∫—É –ü–µ—á–µ–Ω–µ–∫ –∏ —Ç.–ø.).
–£–ª—å—Ç–•–µ–ª–ø—ã –ø—Ä–æ–¥–∞—é—Ç—Å—è –∑–∞ –ü–µ—á–µ–Ω—å–∫–∏. –ö–∞–∂–¥—ã–π –∏–≥—Ä–æ–∫ –º–æ–∂–µ—Ç –ø—Ä–∏–¥—É–º–∞—Ç—å —Å–≤–æ—é –º–µ—Ö–∞–Ω–∏–∫—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–≤–æ—ë –∫–∞–∑–∏–Ω–æ).

‚ö†Ô∏è *–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ:* –ü—Ä–æ—á–∏—Ç–∞–π—Ç–µ –≤—Å–µ –£–ª—å—Ç–•–µ–ª–ø—ã, —á—Ç–æ–±—ã —Å–ª—É—á–∞–π–Ω–æ –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å –ü–µ—á–µ–Ω—å–∫–∏!

üé∞ *–£–ª—å—Ç–•–µ–ª–ø: –≠–º–æ–¥–∑–∏ –ö–∞–∑–∏–Ω–æ*
üë§ –í–ª–∞–¥–µ–ª–µ—Ü: Gaster999  
üìú –û–ø–∏—Å–∞–Ω–∏–µ:  
–ü—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –µ–≥–æ —ç–º–æ–¥–∑–∏ –ö–∞–∑–∏–Ω–æ –≤—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –µ–≥–æ –∫–∞–∑–∏–Ω–æ.  
üí∏ *–£—Å–ª–æ–≤–∏—è –∫–∞–∑–∏–Ω–æ –æ—Ç Gaster999:*  
‚Ä¢ –°—Ç–æ–∏–º–æ—Å—Ç—å –∏–≥—Ä—ã: 1 –ü–µ—á–µ–Ω—å–∫–∞  
‚Ä¢ –ü—Ä–∏–∑ –∑–∞ 3 –≤ —Ä—è–¥: 5 –ü–µ—á–µ–Ω–µ–∫  
üéÆ –î–ª—è –∏–≥—Ä—ã –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ –ø–æ 1 –ü–µ—á–µ–Ω—å–∫–µ –∑–∞ –∏–≥—Ä—É Gaster999 –∫–æ–º–∞–Ω–¥–æ–π `–¥–∞—Ç—å 1` (—Å —É–∫–∞–∑–∞–Ω–∏–µ–º –Ω–∞ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –¥–æ–ø–∏—à–∏—Ç–µ –µ–≥–æ —Ç–µ–≥ –≤ –∫–æ–Ω—Ü–µ) –∏ –∫–∏–Ω—å—Ç–µ —ç–º–æ–¥–∑–∏ –∫–∞–∑–∏–Ω–æ.

üé≤ *–£–ª—å—Ç–•–µ–ª–ø: –≠–º–æ–¥–∑–∏ –ö—É–±–∏–∫*
üë§ –í–ª–∞–¥–µ–ª–µ—Ü: Shittttt  
üìú –û–ø–∏—Å–∞–Ω–∏–µ:  
–ü—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –µ–≥–æ —ç–º–æ–¥–∑–∏ –ö—É–±–∏–∫ –≤—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –µ–≥–æ –∏–≥—Ä–µ *–ü–æ–∫–µ—Ä*.

üé≥ *–£–ª—å—Ç–•–µ–ª–ø: –≠–º–æ–¥–∑–∏ –ë–æ—É–ª–∏–Ω–≥*
üë§ –í–ª–∞–¥–µ–ª–µ—Ü: nastysh3cka  
üìú –û–ø–∏—Å–∞–Ω–∏–µ:  
–ü—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –µ—ë —ç–º–æ–¥–∑–∏ –ë–æ—É–ª–∏–Ω–≥ –≤—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –µ—ë –∫–∞–∑–∏–Ω–æ.  
üí∏ *–£—Å–ª–æ–≤–∏—è –∫–∞–∑–∏–Ω–æ –æ—Ç nastysh3cka:*  
‚Ä¢ –°—Ç–æ–∏–º–æ—Å—Ç—å –∏–≥—Ä—ã: 3 –ü–µ—á–µ–Ω—å–∫–∏  
‚Ä¢ –ü—Ä–∏–∑ –∑–∞ —Å—Ç—Ä–∞–π–∫: 6 –ü–µ—á–µ–Ω–µ–∫  
üéÆ –î–ª—è –∏–≥—Ä—ã –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ –ø–æ 3 –ü–µ—á–µ–Ω—å–∫–∏ –∑–∞ –∏–≥—Ä—É nastysh3cka –∫–æ–º–∞–Ω–¥–æ–π `–¥–∞—Ç—å 3` (—Å —É–∫–∞–∑–∞–Ω–∏–µ–º –Ω–∞ –µ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –¥–æ–ø–∏—à–∏—Ç–µ –µ—ë —Ç–µ–≥ –≤ –∫–æ–Ω—Ü–µ) –∏ –∫–∏–Ω—å—Ç–µ —ç–º–æ–¥–∑–∏ –±–æ—É–ª–∏–Ω–≥.  
–ï—Å–ª–∏ –≤—ã –ø—Ä–æ—Å—Ç–æ –∫–∏–Ω–µ—Ç–µ —ç–º–æ–¥–∑–∏ –ë–æ—É–ª–∏–Ω–≥ ‚Äî –≤—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å –Ω–∞ –æ–ø–ª–∞—Ç—É –∏–≥—Ä—ã –≤ –∫–∞–∑–∏–Ω–æ.
"""


TRANSACTION_LOG_FILE = "transactions.json"

def log_transaction(entry: dict):
    try:
        with open(TRANSACTION_LOG_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        data = []

    data.append(entry)

    with open(TRANSACTION_LOG_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)


if __name__ == '__main__':
    # –ó–∞–≥–ª—É—à–∫–∞ Flask ‚Äî –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ
    threading.Thread(target=start_dummy_server, daemon=True).start()

    # –ë–æ—Ç ‚Äî –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, main_handler))
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()
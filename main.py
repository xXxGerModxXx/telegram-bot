import json
import os
import re
import logging
from telegram import Update, Message
from telegram.ext import ApplicationBuilder, ContextTypes, MessageHandler, filters

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –û—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏ INFO –¥–ª—è httpx (Telegram Bot API –∫–ª–∏–µ–Ω—Ç)
logging.getLogger("httpx").setLevel(logging.WARNING)
logging.getLogger("asyncio").setLevel(logging.WARNING)

TOKEN = "7604409638:AAFRrmzPflnsGj_a7q2fMd99w3x_GuNJ78c"
BALANCE_FILE = 'balances.json'
ADMIN_USERNAME = "hto_i_taki"  # –±–µ–∑ @

# ... –¥–∞–ª—å—à–µ —Ç–≤–æ–π –∫–æ–¥


CURRENCIES = {
    "–ø–µ—á–µ–Ω—å–∫–∏": "üç™",
    "—Ç—Ä–∏–ª–∏—Å—Ç–Ω–∏–∫–∏": "‚òòÔ∏è",
    "—á–µ—Ç—ã—Ä—ë—Ö–ª–∏—Å—Ç–Ω–∏–∫–∏": "üçÄ"
}
LOTTERY_FILE = 'lottery.json'

def load_lottery():
    if not os.path.exists(LOTTERY_FILE):
        return {}
    with open(LOTTERY_FILE, 'r', encoding='utf-8') as f:
        return json.load(f)

def save_lottery(data):
    with open(LOTTERY_FILE, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def load_balances():
    if not os.path.exists(BALANCE_FILE):
        return {}
    with open(BALANCE_FILE, 'r', encoding='utf-8') as f:
        return json.load(f)

def save_balances(balances):
    with open(BALANCE_FILE, 'w', encoding='utf-8') as f:
        json.dump(balances, f, ensure_ascii=False, indent=2)

def get_username_from_message(msg: Message) -> str:
    return f"@{msg.from_user.username}" if msg.from_user.username else f"id{msg.from_user.id}"

def get_currency_from_text(text: str) -> str:
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–∞–ª—é—Ç—É –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É –≤ —Ç–µ–∫—Å—Ç–µ, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ - –ø–µ—á–µ–Ω—å–∫–∏
    for curr in CURRENCIES.keys():
        if curr in text:
            return curr
    return "–ø–µ—á–µ–Ω—å–∫–∏"

async def handle_balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    username = get_username_from_message(update.message)
    balances = load_balances()
    user_balances = balances.get(username, {})
    if not user_balances:
        user_balances = {curr: 0 for curr in CURRENCIES}
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –±–∞–ª–∞–Ω—Å–æ–º –ø–æ –≤—Å–µ–º –≤–∞–ª—é—Ç–∞–º
    lines = [f"{username}, —Ç–≤–æ–π –±–∞–ª–∞–Ω—Å:"]
    for curr, emoji in CURRENCIES.items():
        amount = user_balances.get(curr, 0)
        lines.append(f"{amount} {curr} {emoji}")
    await update.message.reply_text("\n".join(lines))

async def handle_give(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.message
    text = msg.text.strip()

    # –†–µ–≥—É–ª—è—Ä–∫–∞ —Ç–µ–ø–µ—Ä—å –∏—â–µ—Ç: "–¥–∞—Ç—å N [–Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã]"
    match = re.match(r'^–¥–∞—Ç—å\s+(\d+)(?:\s+(–ø–µ—á–µ–Ω—å–∫–∏|—Ç—Ä–∏–ª–∏—Å—Ç–Ω–∏–∫–∞|—Ç—Ä–∏–ª–∏—Å—Ç–Ω–∏–∫–∏|—á–µ—Ç—ã—Ä—ë—Ö–ª–∏—Å—Ç–Ω–∏–∫–∞|—á–µ—Ç—ã—Ä—ë—Ö–ª–∏—Å—Ç–Ω–∏–∫–∏))?', text, re.IGNORECASE)
    if not match:
        return

    amount = int(match.group(1))
    currency_text = match.group(2)

    # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É –∫–ª—é—á—É –≤–∞–ª—é—Ç—ã
    if currency_text:
        currency_text = currency_text.lower()
        # –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã
        if currency_text in ("—Ç—Ä–∏–ª–∏—Å—Ç–Ω–∏–∫–∞", "—Ç—Ä–∏–ª–∏—Å—Ç–Ω–∏–∫–∏"):
            currency = "—Ç—Ä–∏–ª–∏—Å—Ç–Ω–∏–∫–∏"
        elif currency_text in ("—á–µ—Ç—ã—Ä—ë—Ö–ª–∏—Å—Ç–Ω–∏–∫–∞", "—á–µ—Ç—ã—Ä—ë—Ö–ª–∏—Å—Ç–Ω–∏–∫–∏"):
            currency = "—á–µ—Ç—ã—Ä—ë—Ö–ª–∏—Å—Ç–Ω–∏–∫–∏"
        else:
            currency = "–ø–µ—á–µ–Ω—å–∫–∏"
    else:
        currency = "–ø–µ—á–µ–Ω—å–∫–∏"

    recipient_tag = None
    # –ò—â–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è: –ª–∏–±–æ —á–µ—Ä–µ–∑ @, –ª–∏–±–æ –≤ –æ—Ç–≤–µ—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
    # –ü—Ä–∏–º–µ—Ä: "–¥–∞—Ç—å 10 —Ç—Ä–∏–ª–∏—Å—Ç–Ω–∏–∫–∞ @username"
    recipient_match = re.search(r'@(\w+)', text)
    if recipient_match:
        recipient_tag = recipient_match.group(1)
    elif msg.reply_to_message:
        recipient_tag = msg.reply_to_message.from_user.username

    if not recipient_tag:
        await msg.reply_text("–£–∫–∞–∂–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –∏–ª–∏ –æ—Ç–≤–µ—Ç—å –Ω–∞ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        return

    sender = get_username_from_message(msg)
    recipient = f"@{recipient_tag}"

    if sender == recipient:
        await msg.reply_text("–ù–µ–ª—å–∑—è –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å —Å–µ–±–µ –≤–∞–ª—é—Ç—É!")
        return

    balances = load_balances()
    sender_balances = balances.get(sender, {curr: 0 for curr in CURRENCIES})

    if sender_balances.get(currency, 0) < amount:
        await msg.reply_text(f"–£ —Ç–µ–±—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ {currency}.")
        return

    # –°–ø–∏—Å—ã–≤–∞–µ–º –∏ –Ω–∞—á–∏—Å–ª—è–µ–º
    sender_balances[currency] = sender_balances.get(currency, 0) - amount
    balances[sender] = sender_balances

    recipient_balances = balances.get(recipient, {curr: 0 for curr in CURRENCIES})
    recipient_balances[currency] = recipient_balances.get(currency, 0) + amount
    balances[recipient] = recipient_balances

    save_balances(balances)

    await msg.reply_text(
        f"{sender} –ø–µ—Ä–µ–≤—ë–ª {amount} {currency} {CURRENCIES[currency]} {recipient}.\n"

    )

async def handle_give_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.message
    if msg.from_user.username != ADMIN_USERNAME:
        return

    text = msg.text.strip()
    match = re.match(r'^–¥–∞—Ä\s+(\d+)(?:\s+(–ø–µ—á–µ–Ω—å–∫–∏|—Ç—Ä–∏–ª–∏—Å—Ç–Ω–∏–∫–∞|—Ç—Ä–∏–ª–∏—Å—Ç–Ω–∏–∫–∏|—á–µ—Ç—ã—Ä—ë—Ö–ª–∏—Å—Ç–Ω–∏–∫–∞|—á–µ—Ç—ã—Ä—ë—Ö–ª–∏—Å—Ç–Ω–∏–∫–∏))?(?:\s+@(\w+))?', text, re.IGNORECASE)
    if not match:
        return

    amount = int(match.group(1))
    currency_text = match.group(2)
    recipient_tag = match.group(3)

    if currency_text:
        currency_text = currency_text.lower()
        if currency_text in ("—Ç—Ä–∏–ª–∏—Å—Ç–Ω–∏–∫–∞", "—Ç—Ä–∏–ª–∏—Å—Ç–Ω–∏–∫–∏"):
            currency = "—Ç—Ä–∏–ª–∏—Å—Ç–Ω–∏–∫–∏"
        elif currency_text in ("—á–µ—Ç—ã—Ä—ë—Ö–ª–∏—Å—Ç–Ω–∏–∫–∞", "—á–µ—Ç—ã—Ä—ë—Ö–ª–∏—Å—Ç–Ω–∏–∫–∏"):
            currency = "—á–µ—Ç—ã—Ä—ë—Ö–ª–∏—Å—Ç–Ω–∏–∫–∏"
        else:
            currency = "–ø–µ—á–µ–Ω—å–∫–∏"
    else:
        currency = "–ø–µ—á–µ–Ω—å–∫–∏"

    if not recipient_tag and msg.reply_to_message:
        recipient_tag = msg.reply_to_message.from_user.username

    if not recipient_tag:
        await msg.reply_text("–£–∫–∞–∂–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –∏–ª–∏ –æ—Ç–≤–µ—Ç—å –Ω–∞ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        return

    recipient = f"@{recipient_tag}"
    balances = load_balances()
    recipient_balances = balances.get(recipient, {curr: 0 for curr in CURRENCIES})
    recipient_balances[currency] = recipient_balances.get(currency, 0) + amount
    balances[recipient] = recipient_balances

    save_balances(balances)
    await msg.reply_text(f"{recipient} –ø–æ–ª—É—á–∏–ª {amount} {currency} {CURRENCIES[currency]} –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏")

async def handle_take_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.message
    if msg.from_user.username != ADMIN_USERNAME:
        return

    text = msg.text.strip()
    match = re.match(r'^–æ—Ç–Ω—è—Ç—å\s+(\d+)(?:\s+(–ø–µ—á–µ–Ω—å–∫–∏|—Ç—Ä–∏–ª–∏—Å—Ç–Ω–∏–∫–∞|—Ç—Ä–∏–ª–∏—Å—Ç–Ω–∏–∫–∏|—á–µ—Ç—ã—Ä—ë—Ö–ª–∏—Å—Ç–Ω–∏–∫–∞|—á–µ—Ç—ã—Ä—ë—Ö–ª–∏—Å—Ç–Ω–∏–∫–∏))?(?:\s+@(\w+))?', text, re.IGNORECASE)
    if not match:
        return

    amount = int(match.group(1))
    currency_text = match.group(2)
    recipient_tag = match.group(3)

    if currency_text:
        currency_text = currency_text.lower()
        if currency_text in ("—Ç—Ä–∏–ª–∏—Å—Ç–Ω–∏–∫–∞", "—Ç—Ä–∏–ª–∏—Å—Ç–Ω–∏–∫–∏"):
            currency = "—Ç—Ä–∏–ª–∏—Å—Ç–Ω–∏–∫–∏"
        elif currency_text in ("—á–µ—Ç—ã—Ä—ë—Ö–ª–∏—Å—Ç–Ω–∏–∫–∞", "—á–µ—Ç—ã—Ä—ë—Ö–ª–∏—Å—Ç–Ω–∏–∫–∏"):
            currency = "—á–µ—Ç—ã—Ä—ë—Ö–ª–∏—Å—Ç–Ω–∏–∫–∏"
        else:
            currency = "–ø–µ—á–µ–Ω—å–∫–∏"
    else:
        currency = "–ø–µ—á–µ–Ω—å–∫–∏"

    if not recipient_tag and msg.reply_to_message:
        recipient_tag = msg.reply_to_message.from_user.username

    if not recipient_tag:
        await msg.reply_text("–£–∫–∞–∂–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –∏–ª–∏ –æ—Ç–≤–µ—Ç—å –Ω–∞ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        return

    recipient = f"@{recipient_tag}"
    balances = load_balances()
    recipient_balances = balances.get(recipient, {curr: 0 for curr in CURRENCIES})
    current = recipient_balances.get(currency, 0)
    recipient_balances[currency] = max(0, current - amount)
    balances[recipient] = recipient_balances

    save_balances(balances)
    await msg.reply_text(f"{recipient} –ª–∏—à–∏–ª—Å—è {amount} {currency} {CURRENCIES[currency]}")
async def handle_save_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.message
    if msg.from_user.username != ADMIN_USERNAME:
        return

    try:
        with open(BALANCE_FILE, 'r', encoding='utf-8') as f:
            content = f.read()
            # Telegram –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç 4096 —Å–∏–º–≤–æ–ª–æ–≤ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if len(content) <= 4096:
                await msg.reply_text(f"```json\n{content}\n```", parse_mode="Markdown")
            else:
                # –ï—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π ‚Äî –æ—Ç–ø—Ä–∞–≤–∏–º –∫–∞–∫ —Ñ–∞–π–ª
                await msg.reply_document(document=open(BALANCE_FILE, 'rb'))
    except Exception as e:
        await msg.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞: {e}")
async def handle_lottery_purchase(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.message
    username = get_username_from_message(msg)
    text = msg.text.strip()

    match = re.match(r'^N\s+(\d+)$', text, re.IGNORECASE)
    if not match:
        return

    count = int(match.group(1))
    if count <= 0:
        await msg.reply_text("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏–ª–µ—Ç–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è.")
        return

    balances = load_balances()
    user_bal = balances.get(username, {}).get("–ø–µ—á–µ–Ω—å–∫–∏", 0)

    if user_bal < count:
        await msg.reply_text(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–µ—á–µ–Ω–µ–∫. –£ —Ç–µ–±—è {user_bal}, –Ω—É–∂–Ω–æ {count}.")
        return

    # –í—ã—á–∏—Ç–∞–µ–º –ø–µ—á–µ–Ω—å–∫–∏
    balances.setdefault(username, {}).setdefault("–ø–µ—á–µ–Ω—å–∫–∏", 0)
    balances[username]["–ø–µ—á–µ–Ω—å–∫–∏"] -= count
    save_balances(balances)

    # –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—É—â–∏—Ö –±–∏–ª–µ—Ç–æ–≤
    lottery = load_lottery()

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ø–∏—Å–æ–∫, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Ä—è–¥–æ–∫
    ordered = list(lottery.items())

    # –ù–∞–π–¥—ë–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
    current_index = next((i for i, (user, _) in enumerate(ordered) if user == username), None)

    if current_index is not None:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å ‚Äî —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –µ–≥–æ –±–∏–ª–µ—Ç—ã
        old_range = ordered[current_index][1]
        new_count = (old_range[1] - old_range[0] + 1) + count
        ordered[current_index] = (username, [0, 0])  # –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω—É–ª–∏, –ø–æ–∑–∂–µ –ø–µ—Ä–µ—Å—á–∏—Ç–∞–µ–º
    else:
        # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        ordered.append((username, [0, 0]))
        current_index = len(ordered) - 1

    # –ü–µ—Ä–µ—Ä–∞—Å—á—ë—Ç –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤ –∑–∞–Ω–æ–≤–æ ‚Äî —Å–ª–µ–≤–∞ –Ω–∞–ø—Ä–∞–≤–æ
    current_number = 1
    for i, (user, rng) in enumerate(ordered):
        if i == current_index:
            ticket_count = count if rng == [0, 0] else (rng[1] - rng[0] + 1)
            new_range = [current_number, current_number + ticket_count - 1]
            ordered[i] = (username, new_range)
        else:
            ticket_count = rng[1] - rng[0] + 1
            new_range = [current_number, current_number + ticket_count - 1]
            ordered[i] = (user, new_range)

        current_number = new_range[1] + 1

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ —Å–ª–æ–≤–∞—Ä—å
    updated_lottery = {user: rng for user, rng in ordered}
    save_lottery(updated_lottery)

    user_range = updated_lottery[username]
    await msg.reply_text(f"{username} –∫—É–ø–∏–ª –±–∏–ª–µ—Ç—ã –∑–∞ {count} –ø–µ—á–µ–Ω–µ–∫ üç™")


async def handle_show_lottery(update: Update, context: ContextTypes.DEFAULT_TYPE):
    from pprint import pformat  # –¥–ª—è –±–æ–ª–µ–µ —á–∏—Ç–∞–µ–º–æ–≥–æ –≤—ã–≤–æ–¥–∞

    username = get_username_from_message(update.message)
    if username != f"@{ADMIN_USERNAME}":
        await update.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—É.")
        return

    lottery = load_lottery()
    if not lottery:
        await update.message.reply_text("–§–∞–π–ª —Å –±–∏–ª–µ—Ç–∞–º–∏ –ø—É—Å—Ç.")
        return

    raw_text = pformat(lottery, width=80)
    await update.message.reply_text(f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞:\n{raw_text}")

async def handle_clear_lottery(update: Update, context: ContextTypes.DEFAULT_TYPE):
    save_lottery({})
    await update.message.reply_text("–ë–∏–ª–µ—Ç—ã –æ—á–∏—â–µ–Ω—ã.")


async def main_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.message.text:
        return

    text = update.message.text.strip()
    lower_text = text.lower()
    username = get_username_from_message(update.message)

    if lower_text.startswith("–±–∞–ª–∞–Ω—Å"):
        await handle_balance(update, context)
    elif lower_text.startswith("–¥–∞—Ç—å"):
        await handle_give(update, context)
    elif lower_text.startswith("–¥–∞—Ä"):
        await handle_give_admin(update, context)
    elif lower_text.startswith("–æ—Ç–Ω—è—Ç—å"):
        await handle_take_admin(update, context)
    elif lower_text.startswith("—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ"):
        await handle_save_admin(update, context)
    elif re.match(r'^N\s+\d+$', text, re.IGNORECASE):
        await handle_lottery_purchase(update, context)
    elif lower_text == "–ø–æ–∫–∞–∑–∞—Ç—å" and update.message.from_user.username == ADMIN_USERNAME:
        await handle_show_lottery(update, context)
    elif lower_text == "–æ—á–∏—Å—Ç–∏—Ç—å" and update.message.from_user.username == ADMIN_USERNAME:
        await handle_clear_lottery(update, context)


if __name__ == '__main__':
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, main_handler))
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()
